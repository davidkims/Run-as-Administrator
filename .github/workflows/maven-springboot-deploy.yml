name: Full SpringBoot CI/CD with Docker, K8s, Pages, CodeQL

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

env:
  BASE_VERSION: 1
  DOCKER_REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Repository
        uses: actions/checkout@v4

      - name: 📁 Create Directories
        run: |
          mkdir -p project/src/main/java/com/example/demo
          mkdir -p project/src/main/resources
          mkdir -p project/k8s
          mkdir -p project/docker
          mkdir -p project/report
          mkdir -p project/pages
          mkdir -p project/target
          sudo fallocate -l 3G /opt/.reserved_space || sudo dd if=/dev/zero of=/opt/.reserved_space bs=1M count=3072
          sudo chmod 777 /opt/.reserved_space

      - name: ☕ Setup JDK and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: 📌 Set Version and Image Name
        run: |
          VERSION=${{ env.BASE_VERSION }}.${{ github.run_number }}
          LOWER_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.DOCKER_REGISTRY }}/$LOWER_REPO:$VERSION" >> $GITHUB_ENV
          echo "REPO_NAME=$LOWER_REPO" >> $GITHUB_ENV

      - name: 📄 Generate pom.xml
        run: |
          echo '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>'$VERSION'</version> <packaging>jar</packaging> <properties> <java.version>17</java.version> <spring.boot.version>3.2.5</spring.boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <version>${spring.boot.version}</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> <version>${spring.boot.version}</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring.boot.version}</version> <executions> <execution> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> <distributionManagement> <repository> <id>github</id> <url>https://maven.pkg.github.com/'$REPO_NAME'</url> </repository> </distributionManagement> </project>' > project/pom.xml

      - name: 🧪 Add Spring Boot App
        run: |
          echo 'package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } }' > project/src/main/java/com/example/demo/DemoApplication.java
          echo "server.port=8080" > project/src/main/resources/application.properties
          echo "management.endpoints.web.exposure.include=health,info,metrics" >> project/src/main/resources/application.properties

      - name: 🔧 Build with Maven
        working-directory: project
        run: mvn clean package

      - name: 🐳 Generate Dockerfile
        run: |
          echo 'FROM eclipse-temurin:17-jdk-alpine\nCOPY target/*.jar app.jar\nENTRYPOINT ["java","-jar","/app.jar"]' > project/Dockerfile

      - name: 🔨 Build Docker Image
        run: docker build -t $IMAGE_NAME ./project

      - name: 🔐 Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 📦 Push Docker Image
        run: docker push $IMAGE_NAME

      - name: 🧪 Run & Check Actuator
        run: |
          docker run -d -p 8080:8080 --name test-app $IMAGE_NAME
          sleep 10
          curl -s http://localhost:8080/actuator/health > project/report/health.json || docker logs test-app
          curl -s http://localhost:8080/actuator/metrics > project/report/metrics.json || docker logs test-app
          docker stop test-app && docker rm test-app

      - name: 📄 Generate GitHub Pages Report
        run: |
          cp project/report/health.json project/pages/health.json
          cp project/report/metrics.json project/pages/metrics.json
          echo "<html><body><h1>Spring Boot Actuator</h1><h2>Health</h2><pre>" > project/pages/index.html
          cat project/pages/health.json >> project/pages/index.html
          echo "</pre><h2>Metrics</h2><pre>" >> project/pages/index.html
          cat project/pages/metrics.json >> project/pages/index.html
          echo "</pre></body></html>" >> project/pages/index.html

      - name: 🚀 Deploy GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./project/pages

      - name: 🐳 Generate docker-compose.yml
        run: |
          echo "version: '3'\nservices:\n  app:\n    image: $IMAGE_NAME\n    ports:\n      - \"8080:8080\"" > project/docker/docker-compose.yml

      - name: ☸ Generate K8s Deployment YAML
        run: |
          echo "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: springboot-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: springboot-app\n  template:\n    metadata:\n      labels:\n        app: springboot-app\n    spec:\n      containers:\n      - name: app\n        image: $IMAGE_NAME\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: springboot-service\nspec:\n  selector:\n    app: springboot-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080" > project/k8s/deployment.yaml

      - name: 📤 Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            project/report/health.json
            project/report/metrics.json
            project/pages/index.html

  codeql-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build with Maven
        working-directory: project
        run: mvn clean compile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
