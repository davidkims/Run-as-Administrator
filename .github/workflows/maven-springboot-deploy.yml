name: Maven SpringBoot Build & Deploy with Docker + Actuator

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    env:
      BASE_VERSION: 1.0

    steps:
    - name: ✅ Checkout Repository
      uses: actions/checkout@v4

    - name: 📁 Create Project Directories & Reserve Disk
      run: |
        mkdir -p project/src/main/java/com/example/demo
        mkdir -p project/src/main/resources
        mkdir -p project/target
        sudo fallocate -l 2G /opt/.reserved_space || sudo dd if=/dev/zero of=/opt/.reserved_space bs=1M count=2048
        sudo chmod 777 /opt/.reserved_space

    - name: ☕ Setup JDK and Maven
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: 📌 Set Unique Version to Avoid 409 Conflict
      run: |
        VERSION=${{ env.BASE_VERSION }}.${{ github.run_number }}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: 📄 Generate pom.xml with Actuator
      run: |
        cat > project/pom.xml << EOF
        <project xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>${VERSION}</version>
          <packaging>jar</packaging>

          <properties>
            <java.version>17</java.version>
            <spring.boot.version>3.2.5</spring.boot.version>
          </properties>

          <dependencies>
            <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-web</artifactId>
              <version>\${spring.boot.version}</version>
            </dependency>
            <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-actuator</artifactId>
              <version>\${spring.boot.version}</version>
            </dependency>
          </dependencies>

          <build>
            <plugins>
              <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>\${spring.boot.version}</version>
                <executions>
                  <execution>
                    <goals>
                      <goal>repackage</goal>
                    </goals>
                  </execution>
                </executions>
              </plugin>
            </plugins>
          </build>

          <distributionManagement>
            <repository>
              <id>github</id>
              <url>https://maven.pkg.github.com/${{ github.repository }}</url>
            </repository>
          </distributionManagement>
        </project>
        EOF

    - name: 🧪 Add Spring Boot App
      run: |
        cat > project/src/main/java/com/example/demo/DemoApplication.java << 'EOF'
        package com.example.demo;
        import org.springframework.boot.SpringApplication;
        import org.springframework.boot.autoconfigure.SpringBootApplication;

        @SpringBootApplication
        public class DemoApplication {
            public static void main(String[] args) {
                SpringApplication.run(DemoApplication.class, args);
            }
        }
        EOF

        echo "server.port=8080" > project/src/main/resources/application.properties
        echo "management.endpoints.web.exposure.include=health,info" >> project/src/main/resources/application.properties

    - name: 🔧 Build with Maven
      working-directory: project
      run: mvn clean package

    - name: 🚀 Publish to GitHub Packages (Maven)
      working-directory: project
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐳 Generate Dockerfile
      run: |
        cat > project/Dockerfile << 'EOF'
        FROM eclipse-temurin:17-jdk-alpine
        VOLUME /tmp
        COPY target/*.jar app.jar
        ENTRYPOINT ["java","-jar","/app.jar"]
        EOF

    - name: 🔨 Build Docker Image
      run: docker build -t ghcr.io/${{ github.repository }}:${{ env.VERSION }} ./project

    - name: 🔐 Docker Login to GHCR
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: 📦 Push Docker Image to GHCR
      run: docker push ghcr.io/${{ github.repository }}:${{ env.VERSION }}

    - name: 🧪 Run Docker Container & Check Actuator
      run: |
        docker run -d -p 8080:8080 --name demo-test ghcr.io/${{ github.repository }}:${{ env.VERSION }}
        echo "Waiting for actuator..."
        sleep 15
        curl -sf http://localhost:8080/actuator/health || (docker logs demo-test && exit 1)
        docker stop demo-test
        docker rm demo-test
