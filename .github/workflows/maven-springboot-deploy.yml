name: Full SpringBoot CI/CD

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

env:
  BASE_VERSION: 1
  DOCKER_REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Repository
        uses: actions/checkout@v4

      - name: 📁 Create Directories
        run: |
          mkdir -p project/src/main/java/com/example/demo
          mkdir -p project/src/main/resources
          mkdir -p project/k8s
          mkdir -p project/docker
          mkdir -p project/report
          mkdir -p project/pages
          sudo fallocate -l 3G /opt/.reserved_space || sudo dd if=/dev/zero of=/opt/.reserved_space bs=1M count=3072
          sudo chmod 777 /opt/.reserved_space

      - name: ☕ Setup JDK and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: 📌 Set Version and Image Name
        run: |
          VERSION=${{ env.BASE_VERSION }}.${{ github.run_number }}
          LOWER_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.DOCKER_REGISTRY }}/$LOWER_REPO:$VERSION" >> $GITHUB_ENV
          echo "REPO_NAME=$LOWER_REPO" >> $GITHUB_ENV

      - name: 📄 Generate pom.xml
        run: |
          echo "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"" > project/pom.xml
          echo "         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" >> project/pom.xml
          echo "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">" >> project/pom.xml
          echo "  <modelVersion>4.0.0</modelVersion>" >> project/pom.xml
          echo "  <groupId>com.example</groupId>" >> project/pom.xml
          echo "  <artifactId>demo</artifactId>" >> project/pom.xml
          echo "  <version>$VERSION</version>" >> project/pom.xml
          echo "  <packaging>jar</packaging>" >> project/pom.xml
          echo "  <properties><java.version>17</java.version><spring.boot.version>3.2.5</spring.boot.version></properties>" >> project/pom.xml
          echo "  <dependencies>" >> project/pom.xml
          echo "    <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-web</artifactId><version>3.2.5</version></dependency>" >> project/pom.xml
          echo "    <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>3.2.5</version></dependency>" >> project/pom.xml
          echo "  </dependencies>" >> project/pom.xml
          echo "  <build><plugins><plugin><groupId>org.springframework.boot</groupId><artifactId>spring-boot-maven-plugin</artifactId><version>3.2.5</version><executions><execution><goals><goal>repackage</goal></goals></execution></executions></plugin></plugins></build>" >> project/pom.xml
          echo "  <distributionManagement><repository><id>github</id><url>https://maven.pkg.github.com/$REPO_NAME</url></repository></distributionManagement>" >> project/pom.xml
          echo "</project>" >> project/pom.xml

      - name: 🧪 Add Spring Boot App
        run: |
          echo "package com.example.demo;" > project/src/main/java/com/example/demo/DemoApplication.java
          echo "import org.springframework.boot.SpringApplication;" >> project/src/main/java/com/example/demo/DemoApplication.java
          echo "import org.springframework.boot.autoconfigure.SpringBootApplication;" >> project/src/main/java/com/example/demo/DemoApplication.java
          echo "@SpringBootApplication" >> project/src/main/java/com/example/demo/DemoApplication.java
          echo "public class DemoApplication {" >> project/src/main/java/com/example/demo/DemoApplication.java
          echo "  public static void main(String[] args) {" >> project/src/main/java/com/example/demo/DemoApplication.java
          echo "    SpringApplication.run(DemoApplication.class, args);" >> project/src/main/java/com/example/demo/DemoApplication.java
          echo "  }" >> project/src/main/java/com/example/demo/DemoApplication.java
          echo "}" >> project/src/main/java/com/example/demo/DemoApplication.java

          echo "server.port=8080" > project/src/main/resources/application.properties
          echo "management.endpoints.web.exposure.include=health,info" >> project/src/main/resources/application.properties

      - name: 🔧 Build with Maven
        working-directory: project
        run: mvn clean package

      - name: 🐳 Generate Dockerfile
        run: |
          echo "FROM eclipse-temurin:17-jdk-alpine" > project/Dockerfile
          echo "COPY target/*.jar app.jar" >> project/Dockerfile
          echo "ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]" >> project/Dockerfile

      - name: 🔨 Build Docker Image
        run: docker build -t $IMAGE_NAME ./project

      - name: 🔐 Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 📦 Push Docker Image
        run: docker push $IMAGE_NAME

      - name: 🧪 Run & Check Actuator
        run: |
          docker run -d -p 8080:8080 --name test-app $IMAGE_NAME
          sleep 10
          curl -s http://localhost:8080/actuator/health > project/report/health.json || docker logs test-app
          docker stop test-app && docker rm test-app

      - name: 📄 Generate GitHub Pages Report
        run: |
          cp project/report/health.json project/pages/index.json
          echo "<html><body><h1>Spring Boot Health</h1><pre>" > project/pages/index.html
          cat project/pages/index.json >> project/pages/index.html
          echo "</pre></body></html>" >> project/pages/index.html

      - name: 🚀 Deploy GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./project/pages

      - name: 🐳 Generate docker-compose.yml
        run: |
          echo "version: '3'" > project/docker/docker-compose.yml
          echo "services:" >> project/docker/docker-compose.yml
          echo "  app:" >> project/docker/docker-compose.yml
          echo "    image: $IMAGE_NAME" >> project/docker/docker-compose.yml
          echo "    ports:" >> project/docker/docker-compose.yml
          echo "      - \"8080:8080\"" >> project/docker/docker-compose.yml

      - name: ☸ Generate K8s Deployment YAML
        run: |
          echo "apiVersion: apps/v1" > project/k8s/deployment.yaml
          echo "kind: Deployment" >> project/k8s/deployment.yaml
          echo "metadata:" >> project/k8s/deployment.yaml
          echo "  name: springboot-app" >> project/k8s/deployment.yaml
          echo "spec:" >> project/k8s/deployment.yaml
          echo "  replicas: 1" >> project/k8s/deployment.yaml
          echo "  selector:" >> project/k8s/deployment.yaml
          echo "    matchLabels:" >> project/k8s/deployment.yaml
          echo "      app: springboot-app" >> project/k8s/deployment.yaml
          echo "  template:" >> project/k8s/deployment.yaml
          echo "    metadata:" >> project/k8s/deployment.yaml
          echo "      labels:" >> project/k8s/deployment.yaml
          echo "        app: springboot-app" >> project/k8s/deployment.yaml
          echo "    spec:" >> project/k8s/deployment.yaml
          echo "      containers:" >> project/k8s/deployment.yaml
          echo "      - name: app" >> project/k8s/deployment.yaml
          echo "        image: $IMAGE_NAME" >> project/k8s/deployment.yaml
          echo "        ports:" >> project/k8s/deployment.yaml
          echo "        - containerPort: 8080" >> project/k8s/deployment.yaml
          echo "---" >> project/k8s/deployment.yaml
          echo "apiVersion: v1" >> project/k8s/deployment.yaml
          echo "kind: Service" >> project/k8s/deployment.yaml
          echo "metadata:" >> project/k8s/deployment.yaml
          echo "  name: springboot-service" >> project/k8s/deployment.yaml
          echo "spec:" >> project/k8s/deployment.yaml
          echo "  selector:" >> project/k8s/deployment.yaml
          echo "    app: springboot-app" >> project/k8s/deployment.yaml
          echo "  ports:" >> project/k8s/deployment.yaml
          echo "    - protocol: TCP" >> project/k8s/deployment.yaml
          echo "      port: 80" >> project/k8s/deployment.yaml
          echo "      targetPort: 8080" >> project/k8s/deployment.yaml

  codeql-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build with Maven
        working-directory: project
        run: mvn clean compile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
