name: "🐧 Linux/RHEL Image Suite (Dirs+ISO Download/Create+QCOW2+Release)"

on:
  workflow_dispatch:
    inputs:
      distro:
        description: "배포판 선택 (ubuntu|debian|rocky|alma|rhel)"
        type: choice
        required: true
        default: "ubuntu"
        options: [ "ubuntu", "debian", "rocky", "alma", "rhel" ]
      generate_dirs:
        description: "대량 디렉토리/파일 생성"
        type: boolean
        default: true
      dir_spec:
        description: "생성 규칙 (예: linux:100,rhel:100)"
        required: false
        default: "linux:100,rhel:100"
      download_base_iso:
        description: "공식 ISO 자동 다운로드(배포판별 기본 URL 사용)"
        type: boolean
        default: true
      base_iso_custom_url:
        description: "커스텀 ISO URL (선택). 값이 있으면 이 주소로 다운로드"
        required: false
        default: ""
      create_iso:
        description: "작업물로 커스텀 ISO 생성"
        type: boolean
        default: true
      create_qcow2:
        description: "QCOW2 베이스/스냅샷 생성"
        type: boolean
        default: true
      qcow_size_gb:
        description: "QCOW2 사이즈(GB)"
        required: false
        default: "8"
      create_release:
        description: "GitHub Release 발행"
        type: boolean
        default: false
      release_tag:
        description: "Release 태그(비우면 auto-{run_id})"
        required: false
        default: ""

  workflow_call:
    inputs:
      distro:
        type: string
        required: true
      generate_dirs:
        type: boolean
        default: true
      dir_spec:
        type: string
        default: "linux:100,rhel:100"
      download_base_iso:
        type: boolean
        default: true
      base_iso_custom_url:
        type: string
        default: ""
      create_iso:
        type: boolean
        default: true
      create_qcow2:
        type: boolean
        default: true
      qcow_size_gb:
        type: string
        default: "8"
      create_release:
        type: boolean
        default: false
      release_tag:
        type: string
        default: ""
    outputs:
      iso_path:
        description: "생성된 커스텀 ISO 경로"
        value: ${{ jobs.image-suite.outputs.iso_path }}
      qcow2_base:
        description: "QCOW2 베이스 경로"
        value: ${{ jobs.image-suite.outputs.qcow2_base }}
      qcow2_snap:
        description: "QCOW2 스냅샷 경로"
        value: ${{ jobs.image-suite.outputs.qcow2_snap }}

permissions:
  contents: write

concurrency:
  group: linux-rhel-image-suite-${{ github.ref }}
  cancel-in-progress: false

jobs:
  image-suite:
    name: "Build/Pack (Dirs + ISO DL/Create + QCOW2 + Artifacts)"
    runs-on: ubuntu-latest
    outputs:
      iso_path: ${{ steps.set-outputs.outputs.iso_path }}
      qcow2_base: ${{ steps.set-outputs.outputs.qcow2_base }}
      qcow2_snap: ${{ steps.set-outputs.outputs.qcow2_snap }}
    env:
      ECHO_ROOT: .github/echo_linux
      DIST_DIR: dist
      ISO_DIR: dist/isos
      IMG_DIR: dist/images
      LOG_DIR: dist/logs
      META_DIR: dist/meta

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init dirs
        run: |
          set -Eeuo pipefail
          mkdir -p "$ECHO_ROOT"/{linux,rhel}/bulk \
                   "$DIST_DIR" "$ISO_DIR" "$IMG_DIR" "$LOG_DIR" "$META_DIR"
          printf '[%s] INIT: dirs ready\n' "$(date -u +'%F %T')"

      - name: Echo tools (functions)
        id: echo-tools
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > "$ECHO_ROOT/echo_tools.sh" <<'EOS'
          set -Eeuo pipefail
          TS(){ date -u +'%Y-%m-%dT%H:%M:%SZ'; }
          echoe(){ printf '[%s] %s\n' "$(TS)" "$*"; }
          fail(){ echoe "::error::$*"; exit 1; }
          ensure_cmd(){
            local cmd="$1"
            if ! command -v "$cmd" >/dev/null 2>&1; then
              echoe "installing: $cmd"
              sudo apt-get update -y
              case "$cmd" in
                mkisofs) sudo apt-get install -y genisoimage ;;
                xorriso) sudo apt-get install -y xorriso ;;
                qemu-img) sudo apt-get install -y qemu-utils ;;
                curl|jq) sudo apt-get install -y curl jq ;;
                sha256sum|sha512sum) sudo apt-get install -y coreutils ;;
                file) sudo apt-get install -y file ;;
                *) sudo apt-get install -y "$cmd" || true ;;
              esac
            fi
          }
          parse_dir_spec(){
            local spec="$1"; local out="$2"
            : > "$out"
            IFS=',' read -ra items <<< "$spec"
            for it in "${items[@]}"; do
              local name="${it%%:*}"; local cnt="${it##*:}"
              [[ -z "$name" || -z "$cnt" ]] && continue
              printf '%s %s\n' "$name" "$cnt" >> "$out"
            done
          }
          set_official_iso_vars(){
            local d="$1"
            case "$d" in
              ubuntu)
                ISO_URL="https://releases.ubuntu.com/noble/ubuntu-24.04.3-live-server-amd64.iso"
                FILE_NAME="ubuntu-24.04.3-live-server-amd64.iso"
                SUM_TYPE="sha256"
                SUM_EXPECTED="c3514bf0056180d09376462a7a1b4f213c1d6e8ea67fae5c25099c6fd3d8274b"
                ;;
              debian)
                ISO_URL="https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-13.1.0-amd64-netinst.iso"
                FILE_NAME="debian-13.1.0-amd64-netinst.iso"
                SUM_TYPE="sha512"
                SUM_URL="https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA512SUMS"
                ;;
              rocky)
                ISO_URL="https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-x86_64-minimal.iso"
                FILE_NAME="Rocky-x86_64-minimal.iso"
                SUM_TYPE="sha256"
                SUM_URL="https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-x86_64-minimal.iso.CHECKSUM"
                ;;
              alma)
                ISO_URL="https://repo.almalinux.org/almalinux/9/isos/x86_64/AlmaLinux-9-latest-x86_64-minimal.iso"
                FILE_NAME="AlmaLinux-9-latest-x86_64-minimal.iso"
                SUM_TYPE="sha256"
                SUM_URL="https://repo.almalinux.org/almalinux/9/isos/x86_64/CHECKSUM"
                ;;
              rhel)
                ISO_URL=""
                FILE_NAME=""
                ;;
              *) ISO_URL=""; FILE_NAME="";;
            esac
          }
          verify_sum(){
            local fpath="$1"
            local stype="$2"
            local expected="$3"
            local sum_url="$4"
            if [[ -n "$expected" ]]; then
              echoe "Verifying ($stype) with embedded expected hash"
              if [[ "$stype" = "sha512" ]]; then
                echo "${expected}  $(basename "$fpath")" | sha512sum -c -
              else
                echo "${expected}  $(basename "$fpath")" | sha256sum -c -
              fi
              return
            fi
            if [[ -n "$sum_url" ]]; then
              echoe "Fetching checksum list: $sum_url"
              curl -fsSL "$sum_url" -o "$fpath.$stype.list" || { echoe "WARN: checksum fetch failed"; return; }
              if [[ "$stype" = "sha512" ]]; then
                grep "  $(basename "$fpath")\$" "$fpath.$stype.list" | sha512sum -c - || echoe "WARN: checksum mismatch or entry not found"
              else
                grep "  $(basename "$fpath")\$" "$fpath.$stype.list" | sha256sum -c - || echoe "WARN: checksum mismatch or entry not found"
              fi
            else
              echoe "No checksum source provided; computing local hash only"
              if [[ "$stype" = "sha512" ]]; then sha512sum "$fpath" | tee "$fpath.sha512.txt"
              else sha256sum "$fpath" | tee "$fpath.sha256.txt"
              fi
            fi
          }
          EOS
          chmod +x "$ECHO_ROOT/echo_tools.sh"

      - name: Generate bulk directories/files (optional)
        if: inputs.generate_dirs == true || github.event.inputs.generate_dirs == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          SPEC_FILE="$META_DIR/dir_spec.txt"
          parse_dir_spec "${{ inputs.dir_spec || github.event.inputs.dir_spec }}" "$SPEC_FILE"
          while read -r PREFIX COUNT; do
            echoe "Generating prefix=$PREFIX count=$COUNT"
            BASE="$ECHO_ROOT/$PREFIX/bulk"
            for ((i=1;i<=COUNT;i++)); do
              D="$BASE/${PREFIX}_dir_$i"
              mkdir -p "$D/sub1" "$D/sub2"
              echo "sample file for $PREFIX #$i" > "$D/README.txt"
              printf '{"prefix":"%s","index":%d,"ts":"%s"}\n' "$PREFIX" "$i" "$(date -u +'%F %T')" > "$D/meta.json"
            done
          done < "$SPEC_FILE"
          tar -C "$ECHO_ROOT" -cf "$DIST_DIR/echo_bulk.tar" .
          echoe "Bulk generated -> $DIST_DIR/echo_bulk.tar"

      - name: Download official base ISO (auto/custom)
        if: inputs.download_base_iso == true || github.event.inputs.download_base_iso == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          ensure_cmd curl; ensure_cmd sha256sum; ensure_cmd sha512sum; ensure_cmd file
          D="${{ inputs.distro || github.event.inputs.distro }}"
          URL_CUSTOM="${{ inputs.base_iso_custom_url || github.event.inputs.base_iso_custom_url }}"
          set_official_iso_vars "$D"
          if [[ -n "$URL_CUSTOM" ]]; then
            ISO_URL="$URL_CUSTOM"
            FILE_NAME="$(basename "$URL_CUSTOM")"
            SUM_TYPE="sha256"
            echoe "Using custom ISO URL: $ISO_URL"
          elif [[ "$D" = "rhel" && -z "$ISO_URL" ]]; then
            echoe "RHEL requires authenticated download; falling back to AlmaLinux official minimal ISO"
            set_official_iso_vars "alma"
          fi
          [[ -z "$ISO_URL" ]] && fail "No ISO URL resolved"
          OUT="$ISO_DIR/$FILE_NAME"
          echoe "Downloading: $ISO_URL"
          curl -fL "$ISO_URL" -o "$OUT"
          file "$OUT" | tee "$META_DIR/base_iso.file.txt"
          verify_sum "$OUT" "${SUM_TYPE:-sha256}" "${SUM_EXPECTED:-}" "${SUM_URL:-}"

      - name: Create custom ISO (optional)
        if: inputs.create_iso == true || github.event.inputs.create_iso == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          if ! command -v mkisofs >/dev/null 2>&1; then ensure_cmd mkisofs || true; fi
          if ! command -v mkisofs >/dev/null 2>&1 && ! command -v xorriso >/dev/null 2>&1; then ensure_cmd xorriso; fi
          SRC="$ECHO_ROOT"
          LABEL="ECHO_${{ inputs.distro || github.event.inputs.distro }}_$(date -u +%Y%m%d)"
          ISO_OUT="$ISO_DIR/custom_${{ inputs.distro || github.event.inputs.distro }}.iso"
          if command -v mkisofs >/dev/null 2>&1; then
            mkisofs -V "$LABEL" -J -R -o "$ISO_OUT" "$SRC" 2>&1 | tee "$LOG_DIR/mkisofs.log"
          else
            xorriso -as mkisofs -V "$LABEL" -J -R -o "$ISO_OUT" "$SRC" 2>&1 | tee "$LOG_DIR/xorriso.log"
          fi
          sha256sum "$ISO_OUT" | tee "$META_DIR/custom_iso.sha256.txt"
          printf '{"label":"%s","path":"%s","ts":"%s"}\n' "$LABEL" "$ISO_OUT" "$(date -u +'%F %T')" > "$META_DIR/custom_iso.json"

      - name: Create QCOW2 & snapshot (fixed backing path)
        if: inputs.create_qcow2 == true || github.event.inputs.create_qcow2 == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          ensure_cmd qemu-img
          SIZE_GB="${{ inputs.qcow_size_gb || github.event.inputs.qcow_size_gb }}"
          DISTRO="${{ inputs.distro || github.event.inputs.distro }}"
          mkdir -p "$IMG_DIR"
          cd "$IMG_DIR"
          BASE="base_${DISTRO}.qcow2"
          SNAP="snap_${DISTRO}.qcow2"
          echoe "Creating base QCOW2: $BASE (${SIZE_GB}G)"
          qemu-img create -f qcow2 -o cluster_size=65536,compression_type=zlib "$BASE" "${SIZE_GB}G"
          qemu-img info --output=json "$BASE" | tee "$META_DIR/qcow2_base.info.json"
          qemu-img check "$BASE" | tee "$LOG_DIR/qcow2_base.check.log" || echoe "WARN: qemu-img check returned non-zero"
          echoe "Creating snapshot QCOW2 with proper backing file (relative basename)"
          qemu-img create -f qcow2 -b "$BASE" -F qcow2 "$SNAP"
          qemu-img info --output=json "$SNAP" | tee "$META_DIR/qcow2_snap.info.json"
          qemu-img check "$SNAP" | tee "$LOG_DIR/qcow2_snap.check.log" || echoe "WARN: qemu-img check returned non-zero"

      - name: Set outputs
        id: set-outputs
        shell: bash
        run: |
          set -Eeuo pipefail
          ISO_OUT=""
          BASE=""
          SNAP=""
          test -f "${{ env.ISO_DIR }}/custom_${{ inputs.distro || github.event.inputs.distro }}.iso" && ISO_OUT="${{ env.ISO_DIR }}/custom_${{ inputs.distro || github.event.inputs.distro }}.iso"
          test -f "${{ env.IMG_DIR }}/base_${{ inputs.distro || github.event.inputs.distro }}.qcow2" && BASE="${{ env.IMG_DIR }}/base_${{ inputs.distro || github.event.inputs.distro }}.qcow2"
          test -f "${{ env.IMG_DIR }}/snap_${{ inputs.distro || github.event.inputs.distro }}.qcow2" && SNAP="${{ env.IMG_DIR }}/snap_${{ inputs.distro || github.event.inputs.distro }}.qcow2"
          echo "iso_path=$ISO_OUT" >> "$GITHUB_OUTPUT"
          echo "qcow2_base=$BASE" >> "$GITHUB_OUTPUT"
          echo "qcow2_snap=$SNAP" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-rhel-image-suite-${{ github.run_id }}
          path: |
            dist/**
          if-no-files-found: warn
          retention-days: 7

  release:
    name: "Publish Release (optional)"
    needs: [image-suite]
    if: inputs.create_release == true || github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-rhel-image-suite-${{ github.run_id }}
          path: dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_tag && inputs.release_tag != '' && inputs.release_tag || format('auto-{0}', github.run_id) }}
          name: "Linux/RHEL Image Suite • ${{ inputs.distro || github.event.inputs.distro }}"
          body: |
            Automated release for Linux/RHEL image suite.
            - Distro: `${{ inputs.distro || github.event.inputs.distro }}`
            - Directories: `${{ inputs.generate_dirs || github.event.inputs.generate_dirs }}`
            - ISO Download: `${{ inputs.download_base_iso || github.event.inputs.download_base_iso }}`
            - Custom ISO: `${{ inputs.create_iso || github.event.inputs.create_iso }}`
            - QCOW2: `${{ inputs.create_qcow2 || github.event.inputs.create_qcow2 }}` (size=`${{ inputs.qcow_size_gb || github.event.inputs.qcow_size_gb }}G`)
            - Custom ISO path: `${{ needs.image-suite.outputs.iso_path }}`
            - QCOW2 base/snap: `${{ needs.image-suite.outputs.qcow2_base }} | ${{
              needs.image-suite.outputs.qcow2_snap }}`
          files: |
            dist/isos/*.iso
            dist/images/*.qcow2
            dist/meta/**
            dist/logs/**
            dist/echo_bulk.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
