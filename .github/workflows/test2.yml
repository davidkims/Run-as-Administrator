name: "🐧 Linux & RHEL Image Suite (Dirs + ISO + Download + QCOW2 + Release)"

on:
  workflow_dispatch:
    inputs:
      distro:
        description: "타겟 계열 (linux=우분투/데비안, rhel=레드햇/로키/알마)"
        type: choice
        required: true
        default: "linux"
        options:
          - "linux"
          - "rhel"
      generate_dirs:
        description: "대량 디렉토리/파일 생성"
        type: boolean
        default: true
      dir_spec:
        description: "생성 규칙 예: linux:100,rhel:100 (콤마 구분, 각 prefix별 개수)"
        required: false
        default: "linux:100,rhel:100"
      create_iso:
        description: "작업물로 ISO 생성"
        type: boolean
        default: true
      iso_label:
        description: "ISO 라벨"
        required: false
        default: "ECHO_LINUX_RHEL"
      base_iso_url:
        description: "기존 ISO 다운로드 URL(선택, RHEL은 사용자 계정/권한 필요)"
        required: false
        default: ""
      create_qcow2:
        description: "QCOW2 디스크 이미지 및 스냅샷 생성"
        type: boolean
        default: true
      qcow_size_gb:
        description: "QCOW2 사이즈(GB)"
        required: false
        default: "8"
      create_release:
        description: "GitHub Release 발행"
        type: boolean
        default: false
      release_tag:
        description: "Release 태그(예: auto-1)"
        required: false
        default: "auto-1"

  # 다른 워크플로우에서 호출 가능 (호출 기능)
  workflow_call:
    inputs:
      distro:
        type: string
        required: true
      generate_dirs:
        type: boolean
        required: false
        default: true
      dir_spec:
        type: string
        required: false
        default: "linux:100,rhel:100"
      create_iso:
        type: boolean
        required: false
        default: true
      iso_label:
        type: string
        required: false
        default: "ECHO_LINUX_RHEL"
      base_iso_url:
        type: string
        required: false
        default: ""
      create_qcow2:
        type: boolean
        required: false
        default: true
      qcow_size_gb:
        type: string
        required: false
        default: "8"
      create_release:
        type: boolean
        required: false
        default: false
      release_tag:
        type: string
        required: false
        default: "auto-1"
    outputs:
      iso_path:
        description: "생성된 ISO 경로"
        value: ${{ jobs.image-suite.outputs.iso_path }}
      qcow2_base:
        description: "생성된 QCOW2 베이스 경로"
        value: ${{ jobs.image-suite.outputs.qcow2_base }}
      qcow2_snap:
        description: "생성된 QCOW2 스냅샷 경로"
        value: ${{ jobs.image-suite.outputs.qcow2_snap }}

permissions:
  contents: write  # Release 업로드 위해 write

concurrency:
  group: linux-rhel-image-suite-${{ github.ref }}
  cancel-in-progress: false

jobs:
  image-suite:
    name: "Build/Pack (Dirs+ISO+QCOW2+Artifacts)"
    runs-on: ubuntu-latest
    outputs:
      iso_path: ${{ steps.set-outputs.outputs.iso_path }}
      qcow2_base: ${{ steps.set-outputs.outputs.qcow2_base }}
      qcow2_snap: ${{ steps.set-outputs.outputs.qcow2_snap }}
    env:
      ECHO_ROOT: .github/echo_linux
      DIST_DIR: dist
      ISO_DIR: dist/isos
      IMG_DIR: dist/images
      LOG_DIR: dist/logs
      META_DIR: dist/meta
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init dirs
        run: |
          set -Eeuo pipefail
          mkdir -p "$ECHO_ROOT"/{linux,rhel}/bulk \
                   "$DIST_DIR" "$ISO_DIR" "$IMG_DIR" "$LOG_DIR" "$META_DIR"
          printf '[%s] INIT: dirs ready\n' "$(date -u +'%F %T')"

      - name: Echo tools (functions)
        id: echo-tools
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > "$ECHO_ROOT/echo_tools.sh" <<'EOS'
          set -Eeuo pipefail
          TS(){ date -u +'%Y-%m-%dT%H:%M:%SZ'; }
          echoe(){ printf '[%s] %s\n' "$(TS)" "$*"; }
          fail(){ echoe "::error::$*"; exit 1; }
          ensure_cmd(){
            local cmd="$1"
            if ! command -v "$cmd" >/dev/null 2>&1; then
              echoe "installing: $cmd"
              if [ -f /etc/debian_version ] || grep -qi 'ubuntu' /etc/os-release 2>/dev/null; then
                sudo apt-get update -y
                case "$cmd" in
                  mkisofs) sudo apt-get install -y genisoimage ;;
                  xorriso) sudo apt-get install -y xorriso ;;
                  qemu-img) sudo apt-get install -y qemu-utils ;;
                  curl|xz-utils|coreutils|jq|sha256sum) sudo apt-get install -y curl xz-utils coreutils jq ;;
                  *) sudo apt-get install -y "$cmd" || true ;;
                esac
              elif [ -f /etc/redhat-release ] || grep -qi 'rocky\|alma\|rhel' /etc/os-release 2>/dev/null; then
                # RHEL 계열 (self-hosted에서 동작). 권한/리포지토리 필요.
                if command -v dnf >/dev/null 2>&1; then
                  sudo dnf install -y "$cmd" || true
                  [[ "$cmd" == "mkisofs" ]] && sudo dnf install -y genisoimage || true
                  [[ "$cmd" == "qemu-img" ]] && sudo dnf install -y qemu-img || true
                else
                  sudo yum install -y "$cmd" || true
                  [[ "$cmd" == "mkisofs" ]] && sudo yum install -y genisoimage || true
                  [[ "$cmd" == "qemu-img" ]] && sudo yum install -y qemu-img || true
                fi
              else
                echoe "WARN: unknown distro, skip installing $cmd"
              fi
            fi
          }
          parse_dir_spec(){
            local spec="$1"; local out="$2"
            : > "$out"
            IFS=',' read -ra items <<< "$spec"
            for it in "${items[@]}"; do
              name="${it%%:*}"; cnt="${it##*:}"
              [[ -z "$name" || -z "$cnt" ]] && continue
              printf '%s %s\n' "$name" "$cnt" >> "$out"
            done
          }
          EOS
          chmod +x "$ECHO_ROOT/echo_tools.sh"
          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: Generate bulk directories/files (optional)
        if: inputs.generate_dirs == true || github.event.inputs.generate_dirs == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          echoe "DIR_SPEC=${{ inputs.dir_spec || github.event.inputs.dir_spec }}"
          SPEC_FILE="$META_DIR/dir_spec.txt"
          parse_dir_spec "${{ inputs.dir_spec || github.event.inputs.dir_spec }}" "$SPEC_FILE"

          while read -r PREFIX COUNT; do
            echoe "Generating prefix=$PREFIX count=$COUNT"
            BASE="$ECHO_ROOT/$PREFIX/bulk"
            for ((i=1;i<=COUNT;i++)); do
              D="$BASE/${PREFIX}_dir_$i"
              mkdir -p "$D/sub1" "$D/sub2"
              echo "sample file for $PREFIX #$i" > "$D/README.txt"
              printf '{"prefix":"%s","index":%d,"ts":"%s"}\n' "$PREFIX" "$i" "$(date -u +'%F %T')" > "$D/meta.json"
            done
          done < "$SPEC_FILE"

          tar -C "$ECHO_ROOT" -cf "$DIST_DIR/echo_bulk.tar" .
          echoe "Bulk generated -> $DIST_DIR/echo_bulk.tar"

      - name: (optional) Download base ISO
        if: ${{ (inputs.base_iso_url != '' && inputs.base_iso_url != null) || (github.event.inputs.base_iso_url != '' && github.event.inputs.base_iso_url != null) }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          ensure_cmd curl
          URL="${{ inputs.base_iso_url || github.event.inputs.base_iso_url }}"
          OUT="$ISO_DIR/base.iso"
          echoe "Downloading base ISO: $URL"
          curl -fL "$URL" -o "$OUT"
          sha256sum "$OUT" | tee "$META_DIR/base_iso.sha256.txt"
          file "$OUT" | tee "$META_DIR/base_iso.file.txt"
          echoe "Base ISO saved -> $OUT"

      - name: Create ISO (optional)
        if: inputs.create_iso == true || github.event.inputs.create_iso == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          # Try mkisofs, fallback xorriso
          if ! command -v mkisofs >/dev/null 2>&1; then ensure_cmd mkisofs || true; fi
          if ! command -v mkisofs >/dev/null 2>&1 && ! command -v xorriso >/dev/null 2>&1; then
            ensure_cmd xorriso
          fi

          SRC="$ECHO_ROOT"
          ISO_OUT="$ISO_DIR/custom_${{ inputs.distro || github.event.inputs.distro }}.iso"
          LABEL="${{ inputs.iso_label || github.event.inputs.iso_label }}"
          if command -v mkisofs >/dev/null 2>&1; then
            mkisofs -V "$LABEL" -J -R -o "$ISO_OUT" "$SRC" 2>&1 | tee "$LOG_DIR/mkisofs.log"
          else
            xorriso -as mkisofs -V "$LABEL" -J -R -o "$ISO_OUT" "$SRC" 2>&1 | tee "$LOG_DIR/xorriso.log"
          fi
          sha256sum "$ISO_OUT" | tee "$META_DIR/custom_iso.sha256.txt"
          printf '{"label":"%s","path":"%s","ts":"%s"}\n' "$LABEL" "$ISO_OUT" "$(date -u +'%F %T')" > "$META_DIR/custom_iso.json"

      - name: Create QCOW2 & snapshot (optional)
        if: inputs.create_qcow2 == true || github.event.inputs.create_qcow2 == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          source "$ECHO_ROOT/echo_tools.sh"
          ensure_cmd qemu-img
          SIZE_GB="${{ inputs.qcow_size_gb || github.event.inputs.qcow_size_gb }}"
          BASE="$IMG_DIR/base_${{ inputs.distro || github.event.inputs.distro }}.qcow2"
          SNAP="$IMG_DIR/snap_${{ inputs.distro || github.event.inputs.distro }}.qcow2"

          qemu-img create -f qcow2 "$BASE" "${SIZE_GB}G"
          qemu-img info --output=json "$BASE" | tee "$META_DIR/qcow2_base.info.json"

          # snapshot via backing file
          qemu-img create -f qcow2 -b "$BASE" -F qcow2 "$SNAP"
          qemu-img info --output=json "$SNAP" | tee "$META_DIR/qcow2_snap.info.json"

      - name: Set outputs
        id: set-outputs
        shell: bash
        run: |
          set -Eeuo pipefail
          ISO_OUT=""
          BASE=""
          SNAP=""
          if [ -f "${{ env.ISO_DIR }}/custom_${{ inputs.distro || github.event.inputs.distro }}.iso" ]; then
            ISO_OUT="${{ env.ISO_DIR }}/custom_${{ inputs.distro || github.event.inputs.distro }}.iso"
          fi
          if [ -f "${{ env.IMG_DIR }}/base_${{ inputs.distro || github.event.inputs.distro }}.qcow2" ]; then
            BASE="${{ env.IMG_DIR }}/base_${{ inputs.distro || github.event.inputs.distro }}.qcow2"
          fi
          if [ -f "${{ env.IMG_DIR }}/snap_${{ inputs.distro || github.event.inputs.distro }}.qcow2" ]; then
            SNAP="${{ env.IMG_DIR }}/snap_${{ inputs.distro || github.event.inputs.distro }}.qcow2"
          fi
          echo "iso_path=$ISO_OUT" >> "$GITHUB_OUTPUT"
          echo "qcow2_base=$BASE" >> "$GITHUB_OUTPUT"
          echo "qcow2_snap=$SNP" >> "$GITHUB_OUTPUT" || true
          # correct var name
          echo "qcow2_snap=$SNAP" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-rhel-image-suite-${{ github.run_id }}
          path: |
            dist/**
          if-no-files-found: warn
          retention-days: 7

  release:
    name: "Publish Release (optional)"
    needs: [image-suite]
    if: inputs.create_release == true || github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-rhel-image-suite-${{ github.run_id }}
          path: dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_tag || github.event.inputs.release_tag }}
          name: "Linux & RHEL Image Suite • ${{ inputs.release_tag || github.event.inputs.release_tag }}"
          body: |
            Automated release for Linux/RHEL image suite.
            - Distro: `${{ inputs.distro || github.event.inputs.distro }}`
            - Directories: `${{ inputs.generate_dirs || github.event.inputs.generate_dirs }}`
            - ISO: `${{ inputs.create_iso || github.event.inputs.create_iso }}` (label=`${{ inputs.iso_label || github.event.inputs.iso_label }}`)
            - QCOW2: `${{ inputs.create_qcow2 || github.event.inputs.create_qcow2 }}` (size=`${{ inputs.qcow_size_gb || github.event.inputs.qcow_size_gb }}G`)
            - Base ISO URL: `${{ inputs.base_iso_url || github.event.inputs.base_iso_url }}`
          files: |
            dist/isos/*.iso
            dist/images/*.qcow2
            dist/meta/**
            dist/logs/**
            dist/echo_bulk.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
