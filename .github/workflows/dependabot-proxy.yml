# 파일 경로: .github/workflows/validate-workflows.yml
name: "✅ Validate Workflow Syntax"

on:
  push:
    paths:
      - ".github/workflows/**"
  pull_request:
    paths:
      - ".github/workflows/**"

permissions:
  contents: read

jobs:
  validate-syntax:
    name: "Lint & Validate GitHub Workflows"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      # 1) actionlint (GitHub Actions 구문/표현식 전용 린터)
      - name: 🔍 actionlint
        uses: rhysd/actionlint@v1
        with:
          # 셸체커 설치(가능하면). 실패해도 린트는 계속 진행
          args: >
            -color
            -shellcheck=
        continue-on-error: false

      # 2) yamllint (일반 YAML 문법/스타일)
      - name: 🧰 Install yamllint (pip)
        run: |
          python3 -m pip install --upgrade pip
          pip install yamllint
      - name: 🧪 Run yamllint
        run: |
          set -euo pipefail
          # 기본 규칙 + 장황한 출력, 필요하면 .yamllint 추가 가능
          yamllint -s -f standard .github/workflows || (echo "yamllint failed" && exit 1)

      # 3) 심화 검사: inputs 10개 제한, 중복 키 탐지, on: 구조 점검
      - name: 🐍 Deep Validate (PyYAML + ruamel.yaml)
        run: |
          set -euo pipefail

          python3 - <<'PY'
          import sys, os, glob, json
          from pathlib import Path

          # PyYAML 로드
          import yaml
          # ruamel.yaml로 중복 키 감지
          from ruamel.yaml import YAML
          from ruamel.yaml.constructor import DuplicateKeyError

          workflows = sorted(list(glob.glob(".github/workflows/*.yml")) + list(glob.glob(".github/workflows/*.yaml")))
          if not workflows:
            print("No workflow files found under .github/workflows/. Nothing to validate.")
            sys.exit(0)

          yaml_ruamel = YAML(typ='rt')  # round-trip for duplicate key detection

          errors = []
          summary = []

          for wf in workflows:
            p = Path(wf)
            # 3-1) 중복 키 탐지 (ruamel)
            try:
              with open(p, "r", encoding="utf-8") as f:
                yaml_ruamel.load(f)
            except DuplicateKeyError as e:
              errors.append(f"[{wf}] Duplicate key found: {e}")
              continue
            except Exception as e:
              errors.append(f"[{wf}] YAML parse error (ruamel): {e}")
              continue

            # 3-2) 일반 로딩(PyYAML) 후 구조 점검
            try:
              with open(p, "r", encoding="utf-8") as f:
                data = yaml.safe_load(f) or {}
            except Exception as e:
              errors.append(f"[{wf}] YAML parse error (PyYAML): {e}")
              continue

            # on.workflow_call.inputs / on.workflow_dispatch.inputs 의 개수 확인 (각각 최대 10)
            def count_inputs(section_name):
              on = data.get("on") or {}
              sect = on.get(section_name) or {}
              inputs = sect.get("inputs") or {}
              if isinstance(inputs, dict):
                return len(inputs)
              return 0

            wc = count_inputs("workflow_call")
            wd = count_inputs("workflow_dispatch")

            if wc > 10:
              errors.append(f"[{wf}] workflow_call.inputs has {wc} (>10) — GitHub limit exceeded.")
            if wd > 10:
              errors.append(f"[{wf}] workflow_dispatch.inputs has {wd} (>10) — GitHub limit exceeded.")

            summary.append({
              "file": wf,
              "workflow_call_inputs": wc,
              "workflow_dispatch_inputs": wd,
            })

          # 결과 출력
          print("=== Inputs Summary ===")
          for row in summary:
            print(json.dumps(row, ensure_ascii=False))

          if errors:
            print("\n=== ERRORS ===")
            for e in errors:
              print(e)
            sys.exit(1)
          PY

      # 4) 사람 친화적 요약 출력 (문제 없을 때)
      - name: ✅ Summary
        if: ${{ success() }}
        run: |
          echo "All workflow files under .github/workflows passed:"
          echo "- actionlint (GitHub Actions-aware lint)"
          echo "- yamllint (YAML syntax/style)"
          echo "- Deep checks (inputs <= 10, duplicate keys, structure)"
