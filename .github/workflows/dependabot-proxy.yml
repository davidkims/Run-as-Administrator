# .github/workflows/validate-workflows.yml
name: "✅ Validate Workflow Syntax"

on:
  push:
    paths:
      - ".github/workflows/**"
  pull_request:
    paths:
      - ".github/workflows/**"

permissions:
  contents: read

jobs:
  validate-syntax:
    name: "Lint & Validate GitHub Workflows"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      # 1) actionlint 설치 (공식 스크립트) + 실행
      - name: 🔍 Install actionlint
        shell: bash
        env:
          ACTIONLINT_VERSION: v1.7.1   # 필요 시 최신으로 고정 갱신
        run: |
          set -Eeuo pipefail
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash \
            | bash -s -- -b ./bin "${ACTIONLINT_VERSION}"
          ./bin/actionlint --version

      - name: ▶️ Run actionlint
        shell: bash
        run: |
          set -Eeuo pipefail
          # shellcheck 없는 환경에서도 진행되도록 비활성화
          ./bin/actionlint -color -shellcheck=

      # 2) yamllint (일반 YAML 문법/스타일)
      - name: 🧰 Install yamllint
        run: |
          python3 -m pip install --upgrade pip
          pip install yamllint
      - name: 🧪 Run yamllint
        run: |
          set -euo pipefail
          yamllint -s -f standard .github/workflows

      # 3) 심화 검사: inputs 10개 제한, 중복 키 탐지, 파서 이중 체크
      - name: 🐍 Deep Validate (PyYAML + ruamel.yaml)
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import sys, glob, json
          from pathlib import Path
          import yaml
          from ruamel.yaml import YAML
          from ruamel.yaml.constructor import DuplicateKeyError

          files = sorted(glob.glob(".github/workflows/*.yml") + glob.glob(".github/workflows/*.yaml"))
          if not files:
            print("No workflow files found.")
            sys.exit(0)

          ru = YAML(typ='rt')
          errors, summary = [], []

          for f in files:
            p = Path(f)
            # 중복 키 감지
            try:
              with p.open(encoding="utf-8") as fh:
                ru.load(fh)
            except DuplicateKeyError as e:
              errors.append(f"[{f}] Duplicate key: {e}")
              continue
            except Exception as e:
              errors.append(f"[{f}] ruamel parse error: {e}")
              continue

            # PyYAML 로드
            try:
              with p.open(encoding="utf-8") as fh:
                data = yaml.safe_load(fh) or {}
            except Exception as e:
              errors.append(f"[{f}] PyYAML parse error: {e}")
              continue

            def count_inputs(kind):
              on = data.get("on") or {}
              sect = on.get(kind) or {}
              inputs = sect.get("inputs") or {}
              return len(inputs) if isinstance(inputs, dict) else 0

            wc = count_inputs("workflow_call")
            wd = count_inputs("workflow_dispatch")

            if wc > 10:
              errors.append(f"[{f}] workflow_call.inputs={wc} (>10) — GitHub limit exceeded.")
            if wd > 10:
              errors.append(f"[{f}] workflow_dispatch.inputs={wd} (>10) — GitHub limit exceeded.")

            summary.append({"file": f, "workflow_call_inputs": wc, "workflow_dispatch_inputs": wd})

          print("=== Inputs Summary ===")
          for row in summary:
            print(json.dumps(row, ensure_ascii=False))

          if errors:
            print("\n=== ERRORS ===")
            for e in errors:
              print(e)
            sys.exit(1)
          PY

      - name: ✅ Summary
        if: ${{ success() }}
        run: |
          echo "All .github/workflows passed:"
          echo "- actionlint (downloaded binary)"
          echo "- yamllint"
          echo "- deep checks (inputs <= 10, duplicate keys, parse)"
