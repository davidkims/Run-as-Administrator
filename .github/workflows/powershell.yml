name: PowerShell PSScriptAnalyzer SARIF CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  analyze:
    name: Analyze PowerShell Code with PSScriptAnalyzer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure ./scripts directory exists
        run: |
          mkdir -p ./scripts
          echo "Write-Output 'Dummy script'" > ./scripts/dummy.ps1

      - name: Remove and reinstall PSScriptAnalyzer
        shell: pwsh
        run: |
          Remove-Module PSScriptAnalyzer -ErrorAction SilentlyContinue
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -AllowClobber

      - name: Run PSScriptAnalyzer and generate SARIF
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path "./scripts" -Recurse -Severity Error,Warning,Information

          $rules = Get-ScriptAnalyzerRule | ForEach-Object {
            [PSCustomObject]@{
              id = $_.RuleName
              name = $_.RuleName
              shortDescription = @{ text = $_.Description }
              fullDescription = @{ text = $_.Description }
              helpUri = "https://github.com/PowerShell/PSScriptAnalyzer/blob/master/README.md"
              properties = @{ tags = @($_.Severity) }
            }
          }

          $sarif = @{
            '$schema' = 'https://json.schemastore.org/sarif-2.1.0.json'
            version = '2.1.0'
            runs = @(@{
              tool = @{
                driver = @{
                  name = 'PSScriptAnalyzer'
                  version = '1.24.0'
                  informationUri = 'https://github.com/PowerShell/PSScriptAnalyzer'
                  rules = $rules
                }
              }
              results = @()
            })
          }

          foreach ($res in $results) {
            $sarif.runs[0].results += @{
              ruleId = $res.RuleName
              level = $res.Severity.ToString().ToLower()
              message = @{ text = $res.Message }
              locations = @(@{
                physicalLocation = @{
                  artifactLocation = @{ uri = $res.ScriptPath }
                  region = @{ startLine = $res.Line }
                }
              })
            }
          }

          $sarif | ConvertTo-Json -Depth 10 | Out-File results.sarif -Encoding utf8

      - name: Upload SARIF to GitHub code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
