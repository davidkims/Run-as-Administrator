name: PSScriptAnalyzer with Fallback HTML Report

on:
  push:
    branches: [ "main" ]
  pull_request_target:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  id-token: write
  security-events: write

jobs:
  analyze-powershell:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìù Create insecure PowerShell test (sample.ps1)
        run: |
          mkdir -p scripts
          echo 'Write-Host "Bad practice"' > scripts/sample.ps1
          echo '$files = gci' >> scripts/sample.ps1
          echo '# ‚ùó insecure test case for PSScriptAnalyzer' >> scripts/sample.ps1
          echo '$secure = "plaintext" | ConvertTo-SecureString -AsPlainText -Force' >> scripts/sample.ps1

      - name: üõ°Ô∏è Create secure PowerShell test (secure-sample.ps1)
        run: |
          echo '# ‚úÖ Secure: Read-Host' > scripts/secure-sample.ps1
          echo '$secure = Read-Host "Enter your password" -AsSecureString' >> scripts/secure-sample.ps1
          echo '' >> scripts/secure-sample.ps1
          echo '# ‚úÖ Secure: Get-Credential' >> scripts/secure-sample.ps1
          echo '$cred = Get-Credential' >> scripts/secure-sample.ps1

      - name: ‚öôÔ∏è Generate PSScriptAnalyzer settings.psd1
        run: |
          mkdir -p .github
          echo '@{' > .github/psscriptanalyzer-settings.psd1
          echo '    IncludeRules = @(' >> .github/psscriptanalyzer-settings.psd1
          echo "        'PSAvoidGlobalAliases'," >> .github/psscriptanalyzer-settings.psd1
          echo "        'PSAvoidUsingConvertToSecureStringWithPlainText'," >> .github/psscriptanalyzer-settings.psd1
          echo "        'PSAvoidUsingWriteHost'" >> .github/psscriptanalyzer-settings.psd1
          echo '    )' >> .github/psscriptanalyzer-settings.psd1
          echo '}' >> .github/psscriptanalyzer-settings.psd1

      - name: üß™ Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@6b2948b1944407914a58661c49941824d149734f
        with:
          path: ./scripts
          recurse: true
          settingsPath: .github/psscriptanalyzer-settings.psd1
          output: results.sarif

      - name: üîç Simulate User Profile Log (for fallback HTML)
        run: |
          mkdir -p logs
          echo '[Warning] EventID 1511: User profile could not be loaded. TEMP profile used.' > logs/user-profile.log
          echo '[Error] EventID 1500: The user profile service failed the logon.' >> logs/user-profile.log
          echo '[Info] EventID 1509: ntuser.dat could not be loaded due to permission issue.' >> logs/user-profile.log

      - name: üì§ Try uploading SARIF to GitHub Security tab
        id: sarif_upload
        run: |
          echo "Attempting to upload SARIF file..."
          gh api /repos/${{ github.repository }}/code-scanning/alerts > /dev/null 2>&1 || echo "UPLOAD_FAILED=true" >> $GITHUB_ENV
          gh workflow run dummy.yml || echo "UPLOAD_FAILED=true" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üåê Convert SARIF + Log to HTML
        if: env.UPLOAD_FAILED == 'true'
        run: |
          npm install -g @microsoft/sarif-multitool
          mkdir -p report
          sarif-multitool rewrite --force --uriBaseId "file://" results.sarif --output report/results.sarif
          sarif-multitool export report/results.sarif --format html --output report/index.html
          echo "<hr><h2>User Profile Error Summary</h2><pre>" >> report/index.html
          cat logs/user-profile.log >> report/index.html
          echo "</pre>" >> report/index.html

      - name: üöÄ Deploy HTML report to GitHub Pages
        if: env.UPLOAD_FAILED == 'true'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./report
