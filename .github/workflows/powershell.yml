name: Analyze PowerShell Scripts

on:
  push:
    paths:
      - '**/*.ps1'
      - '.github/workflows/psscriptanalyzer.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  analyze:
    name: PowerShell Static Analysis (SARIF)
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Homebrew (if missing)
        shell: bash
        run: |
          if ! command -v brew &> /dev/null; then
            echo "🍺 Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> "$HOME/.zprofile"
            eval "$(/opt/homebrew/bin/brew shellenv)"
          else
            echo "✅ Homebrew already installed"
          fi

      - name: Ensure scripts folder exists
        shell: pwsh
        run: |
          New-Item -Path './scripts' -ItemType Directory -Force
          Set-Content -Path './scripts/dummy.ps1' -Value 'Write-Host "Hello PowerShell!"'

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          if (Get-Module -ListAvailable -Name PSScriptAnalyzer) {
            Write-Host "✅ PSScriptAnalyzer already available"
          } else {
            Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -AllowClobber
          }

      - name: Import and Run PSScriptAnalyzer + Generate SARIF
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Import-Module -Name PSScriptAnalyzer -Force

          $results = Invoke-ScriptAnalyzer -Path "./scripts" -Recurse -Severity Error,Warning,Information

          $rules = Get-ScriptAnalyzerRule | ForEach-Object {
            [PSCustomObject]@{
              id = $_.RuleName
              name = $_.RuleName
              shortDescription = @{ text = $_.Description }
              fullDescription = @{ text = $_.Description }
              helpUri = 'https://github.com/PowerShell/PSScriptAnalyzer/blob/master/README.md'
              properties = @{ tags = @($_.Severity.ToString()) }
            }
          }

          $sarif = @{
            '$schema' = 'https://json.schemastore.org/sarif-2.1.0.json'
            version = '2.1.0'
            runs = @(@{
              tool = @{
                driver = @{
                  name = 'PSScriptAnalyzer'
                  version = '1.24.0'
                  informationUri = 'https://github.com/PowerShell/PSScriptAnalyzer'
                  rules = $rules
                }
              }
              results = @()
            })
          }

          foreach ($res in $results | Where-Object { $_.Severity -eq 'Error' }) {
            $sarif.runs[0].results += @{
              ruleId = $res.RuleName
              level = $res.Severity.ToString().ToLower()
              message = @{ text = $res.Message }
              locations = @(@{
                physicalLocation = @{
                  artifactLocation = @{ uri = $res.ScriptPath }
                  region = @{ startLine = $res.Line }
                }
              })
            }
          }

          $sarif | ConvertTo-Json -Depth 10 | Out-File -FilePath 'results.sarif' -Encoding UTF8 -Force

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
