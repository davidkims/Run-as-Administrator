name: "🧱 Customer Resource Generator (Spring Boot + JPA + H2)"

on:
  workflow_dispatch:
    inputs:
      group_id:
        description: "Maven Group ID (예: com.example)"
        required: true
        default: "com.example"
      artifact_id:
        description: "Maven Artifact ID (예: demo)"
        required: true
        default: "demo"
      package_name:
        description: "기본 패키지명 (예: com.example.demo)"
        required: true
        default: "com.example.demo"
      app_name:
        description: "애플리케이션 클래스명 (예: DemoApplication)"
        required: true
        default: "DemoApplication"
      java_version:
        description: "Java 버전"
        required: true
        default: "17"
      run_smoke_test:
        description: "스모크 테스트 수행 (true/false)"
        required: true
        default: "true"
      commit_changes:
        description: "생성 산출물 커밋/푸시 (true/false)"
        required: true
        default: "false"

permissions:
  contents: write   # commit_changes=true일 때 커밋/푸시 허용

jobs:
  generate-customer-resource:
    runs-on: ubuntu-latest
    env:
      GROUP_ID: ${{ inputs.group_id }}
      ARTIFACT_ID: ${{ inputs.artifact_id }}
      PACKAGE_NAME: ${{ inputs.package_name }}
      APP_NAME: ${{ inputs.app_name }}
      JAVA_VERSION: ${{ inputs.java_version }}
      RUN_SMOKE_TEST: ${{ inputs.run_smoke_test }}
      COMMIT_CHANGES: ${{ inputs.commit_changes }}
      SRC_MAIN: src/main/java
      SRC_TEST: src/test/java

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Prepare Directories
        run: |
          set -Eeuo pipefail
          PKG_DIR="${SRC_MAIN}/$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          mkdir -p "${PKG_DIR}" "${SRC_MAIN}/resources" "${SRC_TEST}"
          echo "PKG_DIR=${PKG_DIR}" >> $GITHUB_ENV

      - name: Generate pom.xml
        run: |
          set -Eeuo pipefail
          cat > pom.xml <<'POM'
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>${GROUP_ID}</groupId>
            <artifactId>${ARTIFACT_ID}</artifactId>
            <version>0.0.1-SNAPSHOT</version>
            <name>${ARTIFACT_ID}</name>
            <description>Customer Resource Generator</description>
            <properties>
              <java.version>${JAVA_VERSION}</java.version>
              <spring-boot.version>3.3.3</spring-boot.version>
            </properties>
            <dependencyManagement>
              <dependencies>
                <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-dependencies</artifactId>
                  <version>${spring-boot.version}</version>
                  <type>pom</type>
                  <scope>import</scope>
                </dependency>
              </dependencies>
            </dependencyManagement>
            <dependencies>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
              </dependency>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <scope>runtime</scope>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-actuator</artifactId>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
              </dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-maven-plugin</artifactId>
                  <configuration>
                    <mainClass>${PACKAGE_NAME}.${APP_NAME}</mainClass>
                  </configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.13.0</version>
                  <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                  </configuration>
                </plugin>
              </plugins>
            </build>
          </project>
          POM
        env:
          GROUP_ID: ${{ env.GROUP_ID }}
          ARTIFACT_ID: ${{ env.ARTIFACT_ID }}
          JAVA_VERSION: ${{ env.JAVA_VERSION }}
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}

      - name: Generate application.properties
        run: |
          set -Eeuo pipefail
          cat > src/main/resources/application.properties <<'PROPS'
          # H2 in-memory DB + JPA
          spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=LEGACY
          spring.datasource.driverClassName=org.h2.Driver
          spring.jpa.hibernate.ddl-auto=update
          spring.h2.console.enabled=true
          # Actuator (port 공유)
          management.endpoints.web.exposure.include=health,info
          management.endpoint.health.show-details=always
          PROPS

      - name: Generate Application class
        run: |
          set -Eeuo pipefail
          cat > "${PKG_DIR}/${APP_NAME}.java" <<APP
          package ${PACKAGE_NAME};

          import org.springframework.boot.SpringApplication;
          import org.springframework.boot.autoconfigure.SpringBootApplication;

          @SpringBootApplication
          public class ${APP_NAME} {
              public static void main(String[] args) {
                  SpringApplication.run(${APP_NAME}.class, args);
              }
          }
          APP

      - name: Generate Customer entity
        run: |
          set -Eeuo pipefail
          cat > "${PKG_DIR}/model/Customer.java" <<'JAVA'
          package ${PACKAGE_NAME}.model;

          import jakarta.persistence.*;

          @Entity
          @Table(name = "customers")
          public class Customer {
              @Id
              @GeneratedValue(strategy = GenerationType.IDENTITY)
              private Long id;

              @Column(nullable = false, length = 100)
              private String name;

              @Column(nullable = false, unique = true)
              private String email;

              @Column(length = 20)
              private String phone;

              public Customer() {}

              public Customer(String name, String email, String phone) {
                  this.name = name;
                  this.email = email;
                  this.phone = phone;
              }

              public Long getId() { return id; }
              public void setId(Long id) { this.id = id; }

              public String getName() { return name; }
              public void setName(String name) { this.name = name; }

              public String getEmail() { return email; }
              public void setEmail(String email) { this.email = email; }

              public String getPhone() { return phone; }
              public void setPhone(String phone) { this.phone = phone; }
          }
          JAVA
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}

      - name: Generate CustomerRepository
        run: |
          set -Eeuo pipefail
          mkdir -p "${PKG_DIR}/repository"
          cat > "${PKG_DIR}/repository/CustomerRepository.java" <<'JAVA'
          package ${PACKAGE_NAME}.repository;

          import ${PACKAGE_NAME}.model.Customer;
          import org.springframework.data.jpa.repository.JpaRepository;

          public interface CustomerRepository extends JpaRepository<Customer, Long> {
              boolean existsByEmail(String email);
          }
          JAVA
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}

      - name: Generate CustomerService
        run: |
          set -Eeuo pipefail
          mkdir -p "${PKG_DIR}/service"
          cat > "${PKG_DIR}/service/CustomerService.java" <<'JAVA'
          package ${PACKAGE_NAME}.service;

          import ${PACKAGE_NAME}.model.Customer;
          import ${PACKAGE_NAME}.repository.CustomerRepository;
          import org.springframework.stereotype.Service;

          import java.util.List;

          @Service
          public class CustomerService {
              private final CustomerRepository customerRepository;

              public CustomerService(CustomerRepository customerRepository) {
                  this.customerRepository = customerRepository;
              }

              public Customer createCustomer(Customer customer) {
                  if (customerRepository.existsByEmail(customer.getEmail())) {
                      throw new IllegalArgumentException("이미 존재하는 이메일입니다.");
                  }
                  return customerRepository.save(customer);
              }

              public List<Customer> getAllCustomers() {
                  return customerRepository.findAll();
              }
          }
          JAVA
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}

      - name: Generate CustomerController
        run: |
          set -Eeuo pipefail
          mkdir -p "${PKG_DIR}/controller"
          cat > "${PKG_DIR}/controller/CustomerController.java" <<'JAVA'
          package ${PACKAGE_NAME}.controller;

          import ${PACKAGE_NAME}.model.Customer;
          import ${PACKAGE_NAME}.service.CustomerService;
          import org.springframework.http.ResponseEntity;
          import org.springframework.web.bind.annotation.*;

          import java.util.List;

          @RestController
          @RequestMapping("/customers")
          public class CustomerController {
              private final CustomerService customerService;

              public CustomerController(CustomerService customerService) {
                  this.customerService = customerService;
              }

              @PostMapping
              public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
                  return ResponseEntity.ok(customerService.createCustomer(customer));
              }

              @GetMapping
              public ResponseEntity<List<Customer>> getCustomers() {
                  return ResponseEntity.ok(customerService.getAllCustomers());
              }
          }
          JAVA
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}

      - name: Build (Maven)
        run: mvn -B -q -DskipTests package

      - name: Smoke Test (optional)
        if: ${{ env.RUN_SMOKE_TEST == 'true' }}
        run: |
          set -Eeuo pipefail
          LOG=.github/echo_logs
          mkdir -p "$LOG"
          # 앱 백그라운드 실행
          nohup mvn -q -DskipTests spring-boot:run > "$LOG/app.log" 2>&1 &
          APP_PID=$!
          echo "APP_PID=${APP_PID}"
          # 가용성 대기 (최대 60초)
          for i in $(seq 1 60); do
            if curl -fsS "http://127.0.0.1:8080/actuator/health" >/dev/null 2>&1; then
              echo "App is up"
              break
            fi
            sleep 1
          done
          # 샘플 POST
          curl -fsS -X POST "http://127.0.0.1:8080/customers" \
            -H "Content-Type: application/json" \
            -d '{"name":"홍길동","email":"hong@example.com","phone":"010-1234-5678"}' \
            | tee "$LOG/post.json"
          # 샘플 GET
          curl -fsS "http://127.0.0.1:8080/customers" \
            | tee "$LOG/get.json"
          # 종료
          kill "${APP_PID}" || true
          sleep 2
          pkill -f 'spring-boot:run' || true

      - name: Commit & Push (optional)
        if: ${{ env.COMMIT_CHANGES == 'true' }}
        run: |
          set -Eeuo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "[ECHO] Generate Customer Resource (Spring Boot + JPA + H2)"
            git push
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: customer-resource-project
          path: |
            pom.xml
            src/**
            target/**
            .github/echo_logs/**
          if-no-files-found: ignore
