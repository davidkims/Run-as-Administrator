name: "üèóÔ∏è Customer MEGA ‚Äî Gen + Echo + OpenAPI + Testcontainers + Flyway/Liquibase + MapStruct + Matrix CI (Fixed+Gradle+CurlDL)"

on:
  workflow_dispatch:
    inputs:
      group_id:
        description: "Maven Group ID"
        required: true
        default: "com.example"
      artifact_id:
        description: "Maven Artifact ID"
        required: true
        default: "demo"
      package_name:
        description: "Base package (e.g., com.example.demo)"
        required: true
        default: "com.example.demo"
      app_name:
        description: "Spring Boot main class (e.g., DemoApplication)"
        required: true
        default: "DemoApplication"
      java_version:
        description: "Primary Java version"
        required: true
        default: "17"
      run_smoke_test:
        description: "Run HTTP smoke test (true/false)"
        required: true
        default: "true"
      commit_changes:
        description: "Commit generated sources (true/false)"
        required: true
        default: "false"
      build_matrix:
        description: "Matrix build across Java versions 17,21 (true/false)"
        required: true
        default: "true"
      use_liquibase:
        description: "Use Liquibase profile instead of Flyway (true/false)"
        required: true
        default: "false"
      enable_gradle:
        description: "Also build with Gradle (true/false)"
        required: true
        default: "true"

permissions:
  contents: write

env:
  SRC_MAIN: src/main/java
  SRC_TEST: src/test/java

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      GROUP_ID: ${{ inputs.group_id }}
      ARTIFACT_ID: ${{ inputs.artifact_id }}
      PACKAGE_NAME: ${{ inputs.package_name }}
      APP_NAME: ${{ inputs.app_name }}
      JAVA_PRIMARY: ${{ inputs.java_version }}
      USE_LIQUIBASE: ${{ inputs.use_liquibase }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo helpers & massive dir tree
        run: |
          set -Eeuo pipefail
          TS(){ date +'%F %T'; }
          echoe(){ printf '[%s] %s\n' "$(TS)" "$*"; }
          mkdir -p \
            .github/echo_logs \
            .github/echo_dirs/{app,db,docs,ops,tests,containers} \
            .github/echo_files/{samples,templates,reports} \
            .github/echo_secrets \
            .github/echo_containers \
            .github/echo_tmp
          for i in $(seq 1 30); do
            printf 'placeholder-%02d\n' "$i" > ".github/echo_files/samples/sample_${i}.txt"
          done
          chmod -R 755 .github/echo_dirs .github/echo_containers
          chmod -R 700 .github/echo_secrets
          echoe "Echo dirs/files created."

      - name: Generate virtual accounts & passwords (echo)
        run: |
          set -Eeuo pipefail
          USERS_JSON=".github/echo_secrets/users.json"
          ENV_FILE=".github/echo_secrets/.env"
          TOKENS_FILE=".github/echo_secrets/tokens.txt"
          cat > "$USERS_JSON" <<JSON
          { "users": [
              {"username": "svc_admin", "roles": ["ADMIN","OPS"]},
              {"username": "svc_app",   "roles": ["APP"]},
              {"username": "svc_ro",    "roles": ["READONLY"]}
          ] }
          JSON
          for u in svc_admin svc_app svc_ro; do
            P=$(openssl rand -base64 24)
            echo "${u^^}_PASSWORD=$P" >> "$ENV_FILE"
          done
          for i in $(seq 1 5); do
            openssl rand -hex 32 >> "$TOKENS_FILE"
          done
          chmod 600 "$ENV_FILE" "$TOKENS_FILE"

      # üîΩ Î®ºÏ†Ä ÏÜåÏä§/Ìè¨Îß∑ ÏÉùÏÑ± ‚Üí pom.xmlÏùÑ ÎßåÎì† Îã§ÏùåÏóê setup-java(cache:maven) Ïã§Ìñâ
      - name: Prepare source layout
        id: prep
        run: |
          set -Eeuo pipefail
          PKG_PATH="$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          PKG_DIR="${SRC_MAIN}/${PKG_PATH}"
          TEST_PKG_DIR="${SRC_TEST}/${PKG_PATH}"
          mkdir -p \
            "${PKG_DIR}"/{model,dto,repository,service,controller,advice,exception,mapper,config} \
            "${TEST_PKG_DIR}"
          mkdir -p src/main/resources/{db/migration,db/changelog,static}
          echo "PKG_DIR=$PKG_DIR" >> $GITHUB_OUTPUT
          echo "TEST_PKG_DIR=$TEST_PKG_DIR" >> $GITHUB_OUTPUT

      - name: Generate pom.xml
        run: |
          set -Eeuo pipefail
          cat > pom.xml <<EOF
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>${GROUP_ID}</groupId>
            <artifactId>${ARTIFACT_ID}</artifactId>
            <version>0.0.1-SNAPSHOT</version>
            <name>${ARTIFACT_ID}</name>
            <properties>
              <java.version>${JAVA_PRIMARY}</java.version>
              <spring-boot.version>3.3.3</spring-boot.version>
              <mapstruct.version>1.5.5.Final</mapstruct.version>
              <testcontainers.version>1.20.1</testcontainers.version>
              <maven.compiler.release>${JAVA_PRIMARY}</maven.compiler.release>
            </properties>
            <dependencyManagement>
              <dependencies>
                <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-dependencies</artifactId>
                  <version>\${spring-boot.version}</version>
                  <type>pom</type>
                  <scope>import</scope>
                </dependency>
              </dependencies>
            </dependencyManagement>
            <dependencies>
              <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-web</artifactId></dependency>
              <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-data-jpa</artifactId></dependency>
              <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-validation</artifactId></dependency>
              <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId></dependency>
              <dependency><groupId>org.springdoc</groupId><artifactId>springdoc-openapi-starter-webmvc-ui</artifactId><version>2.6.0</version></dependency>
              <dependency><groupId>com.h2database</groupId><artifactId>h2</artifactId><scope>runtime</scope></dependency>
              <dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><scope>runtime</scope></dependency>
              <dependency><groupId>com.mysql</groupId><artifactId>mysql-connector-j</artifactId><scope>runtime</scope></dependency>
              <dependency><groupId>org.flywaydb</groupId><artifactId>flyway-core</artifactId></dependency>
              <dependency><groupId>org.liquibase</groupId><artifactId>liquibase-core</artifactId></dependency>
              <dependency><groupId>org.mapstruct</groupId><artifactId>mapstruct</artifactId><version>\${mapstruct.version}</version></dependency>
              <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-test</artifactId><scope>test</scope></dependency>
              <dependency><groupId>org.testcontainers</groupId><artifactId>junit-jupiter</artifactId><version>\${testcontainers.version}</version><scope>test</scope></dependency>
              <dependency><groupId>org.testcontainers</groupId><artifactId>postgresql</artifactId><version>\${testcontainers.version}</version><scope>test</scope></dependency>
              <dependency><groupId>org.testcontainers</groupId><artifactId>mysql</artifactId><version>\${testcontainers.version}</version><scope>test</scope></dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.springframework.boot</groupId><artifactId>spring-boot-maven-plugin</artifactId>
                  <configuration><mainClass>${PACKAGE_NAME}.${APP_NAME}</mainClass></configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><version>3.13.0</version>
                  <configuration>
                    <release>\${maven.compiler.release}</release>
                    <annotationProcessorPaths>
                      <path><groupId>org.mapstruct</groupId><artifactId>mapstruct-processor</artifactId><version>\${mapstruct.version}</version></path>
                    </annotationProcessorPaths>
                  </configuration>
                </plugin>
                <plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-surefire-plugin</artifactId><version>3.2.5</version></plugin>
              </plugins>
            </build>
          </project>
          EOF

      # ‚úÖ Ïù¥Ï†ú pom.xmlÏù¥ ÏûàÏúºÎØÄÎ°ú cache:maven ÏÇ¨Ïö©Ìï¥ÎèÑ ÏïàÏ†Ñ
      - name: Setup Java (primary) + Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_PRIMARY }}
          cache: maven

      # üîΩ Í≥µÏãù Í≤ΩÎ°ú curl Îã§Ïö¥Î°úÎìú: JDK(Temurin) ‚Äî ÌïÑÏöî Ïãú(ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú Ï†úÏñ¥)
      - name: Curl install Temurin JDK if requested
        if: ${{ env.DOWNLOAD_JDK == 'true' }}
        env:
          JDK_VERSION: ${{ env.JDK_VERSION || env.JAVA_PRIMARY }}
          JDK_ARCH: ${{ env.JDK_ARCH || 'x64' }}
        run: |
          set -Eeuo pipefail
          mkdir -p .github/downloads
          echo "Downloading Temurin JDK ${JDK_VERSION} (${JDK_ARCH})..."
          # Adoptium API: ÏµúÏã† GA JDK Î∞îÏù¥ÎÑàÎ¶¨
          URL="https://api.adoptium.net/v3/binary/latest/${JDK_VERSION}/ga/linux/${JDK_ARCH}/jdk/hotspot/normal/eclipse"
          curl -fsSL --retry 3 --retry-connrefused -o .github/downloads/temurin.tar.gz "$URL"
          tar -xzf .github/downloads/temurin.tar.gz -C .github/downloads
          JDK_DIR="$(find .github/downloads -maxdepth 1 -type d -name 'jdk-*' | head -n1)"
          if [ -d "$JDK_DIR" ]; then
            echo "Using JDK at: $JDK_DIR"
            echo "JAVA_HOME=$PWD/$JDK_DIR" >> $GITHUB_ENV
            echo "$PWD/$JDK_DIR/bin" >> $GITHUB_PATH
            java -version
          else
            echo "JDK directory not found after extraction."; exit 1
          fi

      # üîΩ Í≥µÏãù Í≤ΩÎ°ú curl Îã§Ïö¥Î°úÎìú: Maven ‚Äî ÌïÑÏöî Ïãú(ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú Ï†úÏñ¥)
      - name: Curl install Apache Maven if requested
        if: ${{ env.DOWNLOAD_MAVEN == 'true' }}
        env:
          MAVEN_VERSION: ${{ env.MAVEN_VERSION || '3.9.9' }}
          MAVEN_SHA256: ${{ env.MAVEN_SHA256 }}
        run: |
          set -Eeuo pipefail
          mkdir -p .github/downloads
          TAR="apache-maven-${MAVEN_VERSION}-bin.tar.gz"
          URL="https://downloads.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/${TAR}"
          echo "Downloading Maven ${MAVEN_VERSION} ..."
          curl -fsSL --retry 3 --retry-connrefused -o ".github/downloads/${TAR}" "$URL"
          if [ -n "${MAVEN_SHA256:-}" ]; then
            echo "${MAVEN_SHA256}  .github/downloads/${TAR}" | sha256sum -c -
          fi
          tar -xzf ".github/downloads/${TAR}" -C .github/downloads
          MVN_DIR=".github/downloads/apache-maven-${MAVEN_VERSION}"
          echo "M2_HOME=$PWD/${MVN_DIR}" >> $GITHUB_ENV
          echo "$PWD/${MVN_DIR}/bin" >> $GITHUB_PATH
          mvn -v

      - name: Create ~/.m2/settings.xml (GH server optional)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<XML
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                        https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${GITHUB_ACTOR}</username>
                <password>${GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          XML

      - name: application properties & profiles (OpenAPI + Flyway/Liquibase)
        run: |
          set -Eeuo pipefail
          cat > src/main/resources/application.properties <<P
          server.port=8080
          spring.application.name=customer-mega
          spring.profiles.active=flyway
          spring.jpa.open-in-view=false
          spring.jpa.hibernate.ddl-auto=validate
          management.endpoints.web.exposure.include=health,info
          management.endpoint.health.show-details=always
          springdoc.api-docs.enabled=true
          springdoc.swagger-ui.enabled=true
          spring.flyway.enabled=true
          spring.liquibase.enabled=false
          P
          cat > src/main/resources/application-h2.properties <<H2
          spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
          spring.datasource.driverClassName=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
          H2
          cat > src/main/resources/application-flyway.properties <<F
          spring.flyway.enabled=true
          spring.liquibase.enabled=false
          F
          cat > src/main/resources/application-liquibase.properties <<L
          spring.flyway.enabled=false
          spring.liquibase.enabled=true
          L
          cat > src/main/resources/application-postgres.properties <<PG
          spring.datasource.url=jdbc:postgresql://localhost:5432/testdb
          spring.datasource.username=test
          spring.datasource.password=test
          spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
          PG
          cat > src/main/resources/application-mysql.properties <<MY
          spring.datasource.url=jdbc:mysql://localhost:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
          spring.datasource.username=test
          spring.datasource.password=test
          spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
          MY
          cat > src/main/resources/db/migration/V1__init.sql <<SQL
          CREATE TABLE IF NOT EXISTS customers(
            id BIGSERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            email VARCHAR(255) NOT NULL UNIQUE,
            phone VARCHAR(20)
          );
          SQL
          cat > src/main/resources/db/changelog/db.changelog-master.yaml <<Y
          databaseChangeLog:
            - changeSet:
                id: 1
                author: chatgpt
                changes:
                  - createTable:
                      tableName: customers
                      columns:
                        - column: { name: id, type: BIGINT, autoIncrement: true, constraints: { primaryKey: true } }
                        - column: { name: name, type: VARCHAR(100), constraints: { nullable: false } }
                        - column: { name: email, type: VARCHAR(255), constraints: { nullable: false, unique: true } }
                        - column: { name: phone, type: VARCHAR(20) }
          Y

      - name: Generate Java sources (expand vars)
        run: |
          set -Eeuo pipefail
          PKG_DIR="${{ steps.prep.outputs.PKG_DIR }}"
          cat > "${PKG_DIR}/${APP_NAME}.java" <<EOF
          package ${PACKAGE_NAME};
          import org.springframework.boot.SpringApplication;
          import org.springframework.boot.autoconfigure.SpringBootApplication;
          @SpringBootApplication
          public class ${APP_NAME} {
            public static void main(String[] args) {
              SpringApplication.run(${APP_NAME}.class, args);
            }
          }
          EOF
          cat > "${PKG_DIR}/model/Customer.java" <<EOF
          package ${PACKAGE_NAME}.model;
          import jakarta.persistence.*;
          @Entity @Table(name = "customers")
          public class Customer {
            @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id;
            @Column(nullable = false, length = 100) private String name;
            @Column(nullable = false, unique = true, length = 255) private String email;
            @Column(length = 20) private String phone;
            public Customer() {}
            public Customer(Long id, String name, String email, String phone) { this.id=id; this.name=name; this.email=email; this.phone=phone; }
            public Long getId(){return id;} public void setId(Long id){this.id=id;}
            public String getName(){return name;} public void setName(String n){this.name=n;}
            public String getEmail(){return email;} public void setEmail(String e){this.email=e;}
            public String getPhone(){return phone;} public void setPhone(String p){this.phone=p;}
          }
          EOF
          cat > "${PKG_DIR}/dto/CustomerDto.java" <<EOF
          package ${PACKAGE_NAME}.dto;
          import jakarta.validation.constraints.Email;
          import jakarta.validation.constraints.NotBlank;
          import jakarta.validation.constraints.Size;
          public class CustomerDto {
            @NotBlank @Size(max=100) private String name;
            @NotBlank @Email @Size(max=255) private String email;
            @Size(max=20) private String phone;
            public CustomerDto() {}
            public CustomerDto(String name,String email,String phone){ this.name=name; this.email=email; this.phone=phone; }
            public String getName(){return name;} public void setName(String v){this.name=v;}
            public String getEmail(){return email;} public void setEmail(String v){this.email=v;}
            public String getPhone(){return phone;} public void setPhone(String v){this.phone=v;}
          }
          EOF
          cat > "${PKG_DIR}/mapper/CustomerMapper.java" <<EOF
          package ${PACKAGE_NAME}.mapper;
          import ${PACKAGE_NAME}.dto.CustomerDto;
          import ${PACKAGE_NAME}.model.Customer;
          import org.mapstruct.*;
          @Mapper(componentModel = "spring")
          public interface CustomerMapper {
            @Mapping(target="id", ignore = true)
            Customer toEntity(CustomerDto dto);
          }
          EOF
          cat > "${PKG_DIR}/repository/CustomerRepository.java" <<EOF
          package ${PACKAGE_NAME}.repository;
          import ${PACKAGE_NAME}.model.Customer;
          import org.springframework.data.jpa.repository.JpaRepository;
          public interface CustomerRepository extends JpaRepository<Customer, Long> {
            boolean existsByEmail(String email);
          }
          EOF
          cat > "${PKG_DIR}/service/CustomerService.java" <<EOF
          package ${PACKAGE_NAME}.service;
          import ${PACKAGE_NAME}.model.Customer;
          import ${PACKAGE_NAME}.repository.CustomerRepository;
          import org.springframework.stereotype.Service;
          import java.util.List;
          @Service
          public class CustomerService {
            private final CustomerRepository repo;
            public CustomerService(CustomerRepository repo){ this.repo=repo; }
            public Customer create(Customer c){
              if(repo.existsByEmail(c.getEmail()))
                throw new IllegalArgumentException("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.");
              return repo.save(c);
            }
            public List<Customer> findAll(){ return repo.findAll(); }
          }
          EOF
          cat > "${PKG_DIR}/controller/CustomerController.java" <<EOF
          package ${PACKAGE_NAME}.controller;
          import ${PACKAGE_NAME}.dto.CustomerDto;
          import ${PACKAGE_NAME}.mapper.CustomerMapper;
          import ${PACKAGE_NAME}.model.Customer;
          import ${PACKAGE_NAME}.service.CustomerService;
          import io.swagger.v3.oas.annotations.Operation;
          import io.swagger.v3.oas.annotations.tags.Tag;
          import jakarta.validation.Valid;
          import org.springframework.http.ResponseEntity;
          import org.springframework.web.bind.annotation.*;
          import java.util.List;
          @RestController
          @RequestMapping("/customers")
          @Tag(name="Customers", description="Customer CRUD API")
          public class CustomerController {
            private final CustomerService svc;
            private final CustomerMapper mapper;
            public CustomerController(CustomerService svc, CustomerMapper mapper){
              this.svc=svc; this.mapper=mapper;
            }
            @PostMapping
            @Operation(summary="Create customer")
            public ResponseEntity<Customer> create(@Valid @RequestBody CustomerDto dto){
              Customer saved = svc.create(mapper.toEntity(dto));
              return ResponseEntity.ok(saved);
            }
            @GetMapping
            @Operation(summary="List customers")
            public ResponseEntity<List<Customer>> list(){
              return ResponseEntity.ok(svc.findAll());
            }
          }
          EOF

      - name: Guard: detect leftover ${...} and auto-fix
        run: |
          set -Eeuo pipefail
          if grep -R --include='*.java' '\${PACKAGE_NAME}' src/main/java >/dev/null 2>&1; then
            sed -i "s|\${PACKAGE_NAME}|${PACKAGE_NAME}|g" $(git ls-files 'src/main/java/**/*.java' || echo)
          fi
          if grep -R --include='*.java' '\${APP_NAME}' src/main/java >/dev/null 2>&1; then
            sed -i "s|\${APP_NAME}|${APP_NAME}|g" $(git ls-files 'src/main/java/**/*.java' || echo)
          fi
          ! grep -R --include='*.java' '\${' src/main/java || (echo "Unexpanded variables remain"; exit 1)

      - name: Unit & IT (Testcontainers) sources
        run: |
          set -Eeuo pipefail
          TEST_PKG_DIR="${{ steps.prep.outputs.TEST_PKG_DIR }}"
          cat > "${TEST_PKG_DIR}/CustomerServiceTest.java" <<'EOF'
          package PACKAGE_NAME_REPLACE;
          import PACKAGE_NAME_REPLACE.model.Customer;
          import PACKAGE_NAME_REPLACE.repository.CustomerRepository;
          import PACKAGE_NAME_REPLACE.service.CustomerService;
          import org.junit.jupiter.api.Test;
          import org.mockito.Mockito;
          import static org.junit.jupiter.api.Assertions.*;
          import static org.mockito.ArgumentMatchers.any;
          class CustomerServiceTest {
            @Test
            void create_ok(){
              var repo = Mockito.mock(CustomerRepository.class);
              Mockito.when(repo.existsByEmail("a@b.c")).thenReturn(false);
              Mockito.when(repo.save(any(Customer.class))).thenAnswer(inv -> inv.getArgument(0));
              var svc = new CustomerService(repo);
              var saved = svc.create(new Customer(null,"A","a@b.c","010"));
              assertEquals("A", saved.getName());
            }
            @Test
            void dup_email(){
              var repo = Mockito.mock(CustomerRepository.class);
              Mockito.when(repo.existsByEmail("dup@x.com")).thenReturn(true);
              var svc = new CustomerService(repo);
              assertThrows(IllegalArgumentException.class,
                () -> svc.create(new Customer(null,"D","dup@x.com",null)));
            }
          }
          EOF
          sed -i "s|PACKAGE_NAME_REPLACE|${PACKAGE_NAME}|g" "${TEST_PKG_DIR}/CustomerServiceTest.java"

          cat > "${TEST_PKG_DIR}/CustomerPostgresIT.java" <<'EOF'
          package PACKAGE_NAME_REPLACE;
          import PACKAGE_NAME_REPLACE.dto.CustomerDto;
          import org.junit.jupiter.api.Test;
          import org.springframework.boot.test.context.SpringBootTest;
          import org.springframework.boot.test.web.client.TestRestTemplate;
          import org.springframework.boot.test.web.server.LocalServerPort;
          import org.springframework.test.context.DynamicPropertyRegistry;
          import org.springframework.test.context.DynamicPropertySource;
          import org.springframework.beans.factory.annotation.Autowired;
          import org.testcontainers.containers.PostgreSQLContainer;
          import org.testcontainers.junit.jupiter.Container;
          import org.testcontainers.junit.jupiter.Testcontainers;
          import org.springframework.http.*;
          @Testcontainers
          @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
                          properties = {"spring.profiles.active=postgres,flyway"})
          class CustomerPostgresIT {
            @Container
            static PostgreSQLContainer<?> pg = new PostgreSQLContainer<>("postgres:16");
            @DynamicPropertySource
            static void props(DynamicPropertyRegistry r){
              r.add("spring.datasource.url", pg::getJdbcUrl);
              r.add("spring.datasource.username", pg::getUsername);
              r.add("spring.datasource.password", pg::getPassword);
            }
            @LocalServerPort int port;
            @Autowired TestRestTemplate rest;
            @Test
            void create_and_list(){
              var dto = new CustomerDto("ÌôçÍ∏∏Îèô","pg@example.com","010");
              var base = "http://localhost:"+port;
              var res = rest.postForEntity(base+"/customers", dto, String.class);
              assert(res.getStatusCode()==HttpStatus.OK);
              var list = rest.getForObject(base+"/customers", String.class);
              assert(list.contains("pg@example.com"));
            }
          }
          EOF
          sed -i "s|PACKAGE_NAME_REPLACE|${PACKAGE_NAME}|g" "${TEST_PKG_DIR}/CustomerPostgresIT.java"

          cat > "${TEST_PKG_DIR}/CustomerMySQLIT.java" <<'EOF'
          package PACKAGE_NAME_REPLACE;
          import PACKAGE_NAME_REPLACE.dto.CustomerDto;
          import org.junit.jupiter.api.Test;
          import org.springframework.boot.test.context.SpringBootTest;
          import org.springframework.boot.test.web.client.TestRestTemplate;
          import org.springframework.boot.test.web.server.LocalServerPort;
          import org.springframework.test.context.DynamicPropertyRegistry;
          import org.springframework.test.context.DynamicPropertySource;
          import org.springframework.beans.factory.annotation.Autowired;
          import org.testcontainers.containers.MySQLContainer;
          import org.testcontainers.junit.jupiter.Container;
          import org.testcontainers.junit.jupiter.Testcontainers;
          import org.springframework.http.*;
          @Testcontainers
          @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
                          properties = {"spring.profiles.active=mysql,flyway"})
          class CustomerMySQLIT {
            @Container
            static MySQLContainer<?> mysql = new MySQLContainer<>("mysql:8.4");
            @DynamicPropertySource
            static void props(DynamicPropertyRegistry r){
              r.add("spring.datasource.url", mysql::getJdbcUrl);
              r.add("spring.datasource.username", mysql::getUsername);
              r.add("spring.datasource.password", mysql::getPassword);
            }
            @LocalServerPort int port;
            @Autowired TestRestTemplate rest;
            @Test
            void create_and_list(){
              var dto = new CustomerDto("Ïù¥Î™ΩÎ£°","my@example.com","010");
              var base="http://localhost:"+port;
              var res = rest.postForEntity(base+"/customers", dto, String.class);
              assert(res.getStatusCode()==HttpStatus.OK);
              var list = rest.getForObject(base+"/customers", String.class);
              assert(list.contains("my@example.com"));
            }
          }
          EOF
          sed -i "s|PACKAGE_NAME_REPLACE|${PACKAGE_NAME}|g" "${TEST_PKG_DIR}/CustomerMySQLIT.java"

      - name: Toggle Liquibase profile if requested
        if: ${{ env.USE_LIQUIBASE == 'true' }}
        run: |
          sed -i 's/spring.profiles.active=flyway/spring.profiles.active=liquibase/g' src/main/resources/application.properties
          echo "Liquibase profile enabled."

      - name: Docker Echo Container (build & run)
        run: |
          set -Eeuo pipefail
          cat > .github/echo_containers/Dockerfile <<'DF'
          FROM alpine:3.20
          WORKDIR /echo
          COPY . /echo
          CMD ["sh", "-c", "echo '[ECHO] Listing /echo && env'; ls -R /echo | head -n 50; env | sort | head -n 50"]
          DF
          docker build -t echo-container:latest .github/echo_containers
          docker run --rm -e ECHO_FLAG=on echo-container:latest

      - name: Build (compile only, Maven)
        run: mvn -B -q -DskipTests package

      - name: Generate Maven Wrapper (mvnw)
        run: |
          set -Eeuo pipefail
          mvn -N -q io.takari:maven:wrapper
          chmod +x mvnw || true

      - name: Install Gradle (to generate wrapper)
        if: ${{ inputs.enable_gradle == 'true' }}
        run: |
          set -Eeuo pipefail
          if ! command -v gradle >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gradle
          fi
          gradle -v

      - name: Generate Gradle build files + Wrapper
        if: ${{ inputs.enable_gradle == 'true' }}
        run: |
          set -Eeuo pipefail
          cat > settings.gradle <<SG
          rootProject.name = "${ARTIFACT_ID}"
          SG
          cat > build.gradle <<'BG'
          plugins {
            id 'java'
            id 'org.springframework.boot' version '3.3.3'
            id 'io.spring.dependency-management' version '1.1.6'
          }
          group = System.getenv('GROUP_ID') ?: 'com.example'
          version = '0.0.1-SNAPSHOT'
          java {
            toolchain {
              languageVersion = JavaLanguageVersion.of(Integer.valueOf(System.getenv('JAVA_PRIMARY') ?: '17'))
            }
          }
          repositories { mavenCentral() }
          dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-web'
            implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
            implementation 'org.springframework.boot:spring-boot-starter-validation'
            implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
            implementation 'org.mapstruct:mapstruct:1.5.5.Final'
            runtimeOnly 'com.h2database:h2'
            runtimeOnly 'org.postgresql:postgresql'
            runtimeOnly 'com.mysql:mysql-connector-j'
            implementation 'org.flywaydb:flyway-core'
            implementation 'org.liquibase:liquibase-core'
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
            testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
            testImplementation 'org.testcontainers:postgresql:1.20.1'
            testImplementation 'org.testcontainers:mysql:1.20.1'
            annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
          }
          tasks.withType(Test).configureEach {
            useJUnitPlatform()
          }
          BG
          gradle wrapper --gradle-version 8.10.2
          chmod +x gradlew

      - name: Commit & Push (optional)
        if: ${{ inputs.commit_changes == 'true' }}
        run: |
          set -Eeuo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes."
          else
            git commit -m "[ECHO] MEGA init + mvnw/gradlew + OpenAPI/Testcontainers/Migrations/MapStruct + curl JDK/Maven optional"
            git push
          fi

      - name: Upload project artifact
        uses: actions/upload-artifact@v4
        with:
          name: customer-mega-src
          path: |
            pom.xml
            mvnw
            mvnw.cmd
            .mvn/**
            build.gradle
            settings.gradle
            gradlew
            gradlew.bat
            gradle/wrapper/**
            src/**
            .github/echo_*/**
          if-no-files-found: error

  build-test:
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java:  ${{ fromJSON(inputs.build_matrix == 'true' && '["17","21"]' || format('["{0}"]', inputs.java_version)) }}
        build: ${{ fromJSON(inputs.enable_gradle == 'true' && '["maven","gradle"]' || '["maven"]') }}
    steps:
      - name: Download project artifact
        uses: actions/download-artifact@v4
        with:
          name: customer-mega-src
          path: ./

      - name: Materialize sources into workspace root
        run: |
          set -Eeuo pipefail
          shopt -s dotglob nullglob
          SRC_DIR="customer-mega-src"
          [ -d "$SRC_DIR" ] && rsync -a "$SRC_DIR"/ ./
          [ -f pom.xml ] || cat > pom.xml <<'POM'
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>temp.fallback</groupId><artifactId>temp-fallback</artifactId><version>0.0.1-SNAPSHOT</version>
          </project>
          POM
          mkdir -p src/main/java src/test/java

      - name: Setup Java ${{ matrix.java }} (cache: maven)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven

      - name: Gradle cache
        if: ${{ matrix.build == 'gradle' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ matrix.java }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build & test (Maven)
        if: ${{ matrix.build == 'maven' }}
        run: |
          set -Eeuo pipefail
          mvn -B -q -DskipITs=false -Dtest=* test package

      - name: Build & test (Gradle)
        if: ${{ matrix.build == 'gradle' }}
        run: |
          set -Eeuo pipefail
          chmod +x ./gradlew || true
          ./gradlew test build --no-daemon

      - name: Upload surefire/failsafe reports (Maven)
        if: ${{ always() && matrix.build == 'maven' }}
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-java-${{ matrix.java }}-maven
          path: |
            target/surefire-reports/**
            target/failsafe-reports/**
          if-no-files-found: warn

      - name: Upload Gradle test reports
        if: ${{ always() && matrix.build == 'gradle' }}
        uses: actions/upload-artifact@v4
        with:
          name: gradle-reports-java-${{ matrix.java }}
          path: |
            build/test-results/test/**
            build/reports/tests/test/**
          if-no-files-found: warn

  smoke:
    needs: [generate]
    if: ${{ inputs.run_smoke_test == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download project artifact
        uses: actions/download-artifact@v4
        with:
          name: customer-mega-src
          path: ./

      - name: Materialize sources into workspace root
        run: |
          set -Eeuo pipefail
          shopt -s dotglob nullglob
          SRC_DIR="customer-mega-src"
          [ -d "$SRC_DIR" ] && rsync -a "$SRC_DIR"/ ./
          [ -f pom.xml ] || cat > pom.xml <<'POM'
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>temp.fallback</groupId><artifactId>temp-fallback</artifactId><version>0.0.1-SNAPSHOT</version>
          </project>
          POM
          mkdir -p src/main/java src/test/java

      - name: Setup Java (for smoke)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}
          cache: maven

      - name: Boot run & curl check (H2 + OpenAPI)
        run: |
          set -Eeuo pipefail
          LOG=.github/echo_logs; mkdir -p "$LOG"
          nohup mvn -q -Dspring-boot.run.profiles=h2 spring-boot:run > "$LOG/app.log" 2>&1 &
          APP_PID=$!
          for i in $(seq 1 90); do
            curl -fsS "http://127.0.0.1:8080/actuator/health" >/dev/null 2>&1 && break
            sleep 1
          done
          curl -fsS "http://127.0.0.1:8080/v3/api-docs" | head -c 500 | tee "$LOG/openapi.json.head"
          curl -fsS "http://127.0.0.1:8080/swagger-ui/index.html" | head -c 500 | tee "$LOG/swagger.head"
          curl -fsS -X POST "http://127.0.0.1:8080/customers" \
            -H "Content-Type: application/json" \
            -d '{"name":"Ïä§Î™®ÌÅ¨","email":"smoke@example.com","phone":"010"}' | tee "$LOG/post.json"
          curl -fsS "http://127.0.0.1:8080/customers" | tee "$LOG/get.json"
          kill "$APP_PID" || true
          sleep 2
          pkill -f 'spring-boot:run' || true

      - name: Upload smoke logs
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: .github/echo_logs/**
          if-no-files-found: warn
