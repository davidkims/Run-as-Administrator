name: "🧱 Customer Resource — Gen+Build+Test (H2/Postgres/MySQL + DTO/Validation + Advice)"

on:
  workflow_dispatch:
    inputs:
      group_id:
        description: "Maven Group ID"
        required: true
        default: "com.example"
      artifact_id:
        description: "Maven Artifact ID"
        required: true
        default: "demo"
      package_name:
        description: "Base package (e.g., com.example.demo)"
        required: true
        default: "com.example.demo"
      app_name:
        description: "Spring Boot main class (e.g., DemoApplication)"
        required: true
        default: "DemoApplication"
      java_version:
        description: "Java version"
        required: true
        default: "17"
      run_smoke_test:
        description: "Run H2 smoke test (true/false)"
        required: true
        default: "true"
      run_postgres_tests:
        description: "Run tests with PostgreSQL profile (true/false)"
        required: true
        default: "false"
      run_mysql_tests:
        description: "Run tests with MySQL profile (true/false)"
        required: true
        default: "false"
      commit_changes:
        description: "Commit generated sources (true/false)"
        required: true
        default: "false"

permissions:
  contents: write

jobs:
  generate-build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U test -d testdb"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports: [ "3306:3306" ]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      GROUP_ID: ${{ inputs.group_id }}
      ARTIFACT_ID: ${{ inputs.artifact_id }}
      PACKAGE_NAME: ${{ inputs.package_name }}
      APP_NAME: ${{ inputs.app_name }}
      JAVA_VERSION: ${{ inputs.java_version }}
      RUN_SMOKE_TEST: ${{ inputs.run_smoke_test }}
      RUN_POSTGRES_TESTS: ${{ inputs.run_postgres_tests }}
      RUN_MYSQL_TESTS: ${{ inputs.run_mysql_tests }}
      COMMIT_CHANGES: ${{ inputs.commit_changes }}
      SRC_MAIN: src/main/java
      SRC_TEST: src/test/java

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo helpers & log dir
        run: |
          set -Eeuo pipefail
          mkdir -p .github/echo_logs
          cat > /tmp/echo_helpers.sh <<'SH'
          set -Eeuo pipefail
          TS(){ date +'%Y-%m-%d %H:%M:%S'; }
          echoe(){ printf '[%s] %s\n' "$(TS)" "$*"; }
          SH
          source /tmp/echo_helpers.sh
          echoe "Workspace: $GITHUB_WORKSPACE"

      - name: Create ~/.m2/settings.xml (optional for GH Packages)
        run: |
          set -Eeuo pipefail
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<'XML'
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                        https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${env.GITHUB_ACTOR}</username>
                <password>${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          XML
          echo "Created settings.xml with server-id: github"

      - name: Prepare directories
        run: |
          set -Eeuo pipefail
          PKG_DIR="${SRC_MAIN}/$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          TEST_PKG_DIR="${SRC_TEST}/$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          mkdir -p "${PKG_DIR}/model" "${PKG_DIR}/dto" "${PKG_DIR}/repository" \
                   "${PKG_DIR}/service" "${PKG_DIR}/controller" \
                   "${PKG_DIR}/exception" "${PKG_DIR}/advice" \
                   "src/main/resources" "${TEST_PKG_DIR}"
          echo "PKG_DIR=${PKG_DIR}" >> "$GITHUB_ENV"
          echo "TEST_PKG_DIR=${TEST_PKG_DIR}" >> "$GITHUB_ENV"

      - name: Generate pom.xml (echo)
        run: |
          set -Eeuo pipefail
          cat > pom.xml <<EOF
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>${GROUP_ID}</groupId>
            <artifactId>${ARTIFACT_ID}</artifactId>
            <version>0.0.1-SNAPSHOT</version>
            <name>${ARTIFACT_ID}</name>
            <description>Customer Resource (H2/Postgres/MySQL + Validation + Advice)</description>
            <properties>
              <java.version>${JAVA_VERSION}</java.version>
              <spring-boot.version>3.3.3</spring-boot.version>
              <maven.compiler.release>${JAVA_VERSION}</maven.compiler.release>
            </properties>

            <dependencyManagement>
              <dependencies>
                <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-dependencies</artifactId>
                  <version>\${spring-boot.version}</version>
                  <type>pom</type>
                  <scope>import</scope>
                </dependency>
              </dependencies>
            </dependencyManagement>

            <dependencies>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-actuator</artifactId>
              </dependency>

              <!-- DB drivers -->
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <scope>runtime</scope>
              </dependency>
              <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <scope>runtime</scope>
              </dependency>
              <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <scope>runtime</scope>
              </dependency>

              <!-- Test -->
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
              </dependency>
            </dependencies>

            <build>
              <plugins>
                <plugin>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-maven-plugin</artifactId>
                  <configuration>
                    <mainClass>${PACKAGE_NAME}.${APP_NAME}</mainClass>
                  </configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.13.0</version>
                  <configuration>
                    <release>\${maven.compiler.release}</release>
                  </configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>3.2.5</version>
                </plugin>
              </plugins>
            </build>
          </project>
          EOF
          echo "[OK] pom.xml generated."

      - name: Setup Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Generate application properties (H2/Postgres/MySQL profiles)
        run: |
          set -Eeuo pipefail
          cat > src/main/resources/application.properties <<'PROPS'
          server.port=8080
          spring.application.name=customer-app
          spring.profiles.active=h2
          management.endpoints.web.exposure.include=health,info
          management.endpoint.health.show-details=always
          # JPA (common)
          spring.jpa.open-in-view=false
          spring.jpa.hibernate.ddl-auto=update
          PROPS

          cat > src/main/resources/application-h2.properties <<'H2'
          spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
          spring.datasource.driverClassName=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
          H2

          cat > src/main/resources/application-postgres.properties <<'PG'
          spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/testdb
          spring.datasource.username=test
          spring.datasource.password=test
          spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
          PG

          cat > src/main/resources/application-mysql.properties <<'MY'
          spring.datasource.url=jdbc:mysql://127.0.0.1:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
          spring.datasource.username=test
          spring.datasource.password=test
          spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
          MY

      - name: Generate Application class
        run: |
          set -Eeuo pipefail
          cat > "${PKG_DIR}/${APP_NAME}.java" <<EOF
          package ${PACKAGE_NAME};

          import org.springframework.boot.SpringApplication;
          import org.springframework.boot.autoconfigure.SpringBootApplication;

          @SpringBootApplication
          public class ${APP_NAME} {
            public static void main(String[] args) {
              SpringApplication.run(${APP_NAME}.class, args);
            }
          }
          EOF

      - name: Generate Entity/DTO/Repository/Service/Controller/Advice
        run: |
          set -Eeuo pipefail
          # Entity
          cat > "${PKG_DIR}/model/Customer.java" <<'JAVA'
          package ${PACKAGE_NAME}.model;

          import jakarta.persistence.*;

          @Entity
          @Table(name = "customers")
          public class Customer {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;

            @Column(nullable = false, length = 100)
            private String name;

            @Column(nullable = false, unique = true, length = 255)
            private String email;

            @Column(length = 20)
            private String phone;

            public Customer() {}

            public Customer(String name, String email, String phone) {
              this.name = name;
              this.email = email;
              this.phone = phone;
            }

            public Long getId() { return id; }
            public void setId(Long id) { this.id = id; }
            public String getName() { return name; }
            public void setName(String name) { this.name = name; }
            public String getEmail() { return email; }
            public void setEmail(String email) { this.email = email; }
            public String getPhone() { return phone; }
            public void setPhone(String phone) { this.phone = phone; }
          }
          JAVA

          # DTO + Validation
          cat > "${PKG_DIR}/dto/CustomerDto.java" <<'JAVA'
          package ${PACKAGE_NAME}.dto;

          import jakarta.validation.constraints.Email;
          import jakarta.validation.constraints.NotBlank;
          import jakarta.validation.constraints.Size;

          public class CustomerDto {
            @NotBlank
            @Size(max = 100)
            private String name;

            @NotBlank
            @Email
            @Size(max = 255)
            private String email;

            @Size(max = 20)
            private String phone;

            public CustomerDto() {}
            public CustomerDto(String name, String email, String phone) {
              this.name = name; this.email = email; this.phone = phone;
            }

            public String getName() { return name; }
            public void setName(String name) { this.name = name; }
            public String getEmail() { return email; }
            public void setEmail(String email) { this.email = email; }
            public String getPhone() { return phone; }
            public void setPhone(String phone) { this.phone = phone; }
          }
          JAVA

          # Repository
          cat > "${PKG_DIR}/repository/CustomerRepository.java" <<'JAVA'
          package ${PACKAGE_NAME}.repository;

          import ${PACKAGE_NAME}.model.Customer;
          import org.springframework.data.jpa.repository.JpaRepository;

          public interface CustomerRepository extends JpaRepository<Customer, Long> {
            boolean existsByEmail(String email);
          }
          JAVA

          # Service
          cat > "${PKG_DIR}/service/CustomerService.java" <<'JAVA'
          package ${PACKAGE_NAME}.service;

          import ${PACKAGE_NAME}.model.Customer;
          import ${PACKAGE_NAME}.repository.CustomerRepository;
          import org.springframework.stereotype.Service;

          import java.util.List;

          @Service
          public class CustomerService {
            private final CustomerRepository customerRepository;

            public CustomerService(CustomerRepository customerRepository) {
              this.customerRepository = customerRepository;
            }

            public Customer createCustomer(Customer customer) {
              if (customerRepository.existsByEmail(customer.getEmail())) {
                throw new IllegalArgumentException("이미 존재하는 이메일입니다.");
              }
              return customerRepository.save(customer);
            }

            public List<Customer> getAllCustomers() {
              return customerRepository.findAll();
            }
          }
          JAVA

          # Controller
          cat > "${PKG_DIR}/controller/CustomerController.java" <<'JAVA'
          package ${PACKAGE_NAME}.controller;

          import ${PACKAGE_NAME}.dto.CustomerDto;
          import ${PACKAGE_NAME}.model.Customer;
          import ${PACKAGE_NAME}.service.CustomerService;
          import jakarta.validation.Valid;
          import org.springframework.http.ResponseEntity;
          import org.springframework.web.bind.annotation.*;

          import java.util.List;

          @RestController
          @RequestMapping("/customers")
          public class CustomerController {
            private final CustomerService customerService;

            public CustomerController(CustomerService customerService) {
              this.customerService = customerService;
            }

            @PostMapping
            public ResponseEntity<Customer> createCustomer(@Valid @RequestBody CustomerDto dto) {
              Customer saved = customerService.createCustomer(
                new Customer(dto.getName(), dto.getEmail(), dto.getPhone())
              );
              return ResponseEntity.ok(saved);
            }

            @GetMapping
            public ResponseEntity<List<Customer>> findAll() {
              return ResponseEntity.ok(customerService.getAllCustomers());
            }
          }
          JAVA

          # Exception + Advice
          cat > "${PKG_DIR}/exception/ApiError.java" <<'JAVA'
          package ${PACKAGE_NAME}.exception;

          import java.time.Instant;
          import java.util.Map;

          public class ApiError {
            private Instant timestamp = Instant.now();
            private int status;
            private String error;
            private String message;
            private String path;
            private Map<String, String> validation;

            public Instant getTimestamp() { return timestamp; }
            public int getStatus() { return status; }
            public void setStatus(int status) { this.status = status; }
            public String getError() { return error; }
            public void setError(String error) { this.error = error; }
            public String getMessage() { return message; }
            public void setMessage(String message) { this.message = message; }
            public String getPath() { return path; }
            public void setPath(String path) { this.path = path; }
            public Map<String, String> getValidation() { return validation; }
            public void setValidation(Map<String, String> validation) { this.validation = validation; }
          }
          JAVA

          cat > "${PKG_DIR}/advice/GlobalExceptionHandler.java" <<'JAVA'
          package ${PACKAGE_NAME}.advice;

          import ${PACKAGE_NAME}.exception.ApiError;
          import org.springframework.http.HttpStatus;
          import org.springframework.http.ResponseEntity;
          import org.springframework.web.bind.MethodArgumentNotValidException;
          import org.springframework.web.bind.annotation.ControllerAdvice;
          import org.springframework.web.bind.annotation.ExceptionHandler;

          import jakarta.servlet.http.HttpServletRequest;
          import java.util.LinkedHashMap;
          import java.util.Map;

          @ControllerAdvice
          public class GlobalExceptionHandler {

            @ExceptionHandler(MethodArgumentNotValidException.class)
            public ResponseEntity<ApiError> handleValidation(MethodArgumentNotValidException ex,
                                                             HttpServletRequest req) {
              Map<String, String> fieldErrors = new LinkedHashMap<>();
              ex.getBindingResult().getFieldErrors()
                .forEach(fe -> fieldErrors.put(fe.getField(), fe.getDefaultMessage()));

              ApiError err = new ApiError();
              err.setStatus(HttpStatus.BAD_REQUEST.value());
              err.setError(HttpStatus.BAD_REQUEST.getReasonPhrase());
              err.setMessage("Validation failed");
              err.setPath(req.getRequestURI());
              err.setValidation(fieldErrors);
              return ResponseEntity.badRequest().body(err);
            }

            @ExceptionHandler(IllegalArgumentException.class)
            public ResponseEntity<ApiError> handleIllegalArg(IllegalArgumentException ex,
                                                             HttpServletRequest req) {
              ApiError err = new ApiError();
              err.setStatus(HttpStatus.CONFLICT.value());
              err.setError(HttpStatus.CONFLICT.getReasonPhrase());
              err.setMessage(ex.getMessage());
              err.setPath(req.getRequestURI());
              return ResponseEntity.status(HttpStatus.CONFLICT).body(err);
            }

            @ExceptionHandler(Exception.class)
            public ResponseEntity<ApiError> handleGeneric(Exception ex, HttpServletRequest req) {
              ApiError err = new ApiError();
              err.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
              err.setError(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase());
              err.setMessage(ex.getMessage());
              err.setPath(req.getRequestURI());
              return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(err);
            }
          }
          JAVA
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}

      - name: Unit & Integration Tests (H2 default)
        run: |
          set -Eeuo pipefail
          cat > "${TEST_PKG_DIR}/CustomerServiceTest.java" <<'JAVA'
          package ${PACKAGE_NAME};

          import ${PACKAGE_NAME}.model.Customer;
          import ${PACKAGE_NAME}.repository.CustomerRepository;
          import ${PACKAGE_NAME}.service.CustomerService;
          import org.junit.jupiter.api.Test;
          import org.mockito.Mockito;

          import static org.junit.jupiter.api.Assertions.*;
          import static org.mockito.ArgumentMatchers.any;

          public class CustomerServiceTest {
            @Test
            void createCustomer_ok() {
              CustomerRepository repo = Mockito.mock(CustomerRepository.class);
              Mockito.when(repo.existsByEmail("a@b.c")).thenReturn(false);
              Mockito.when(repo.save(any(Customer.class)))
                     .thenAnswer(inv -> inv.getArgument(0));

              CustomerService svc = new CustomerService(repo);
              Customer saved = svc.createCustomer(new Customer("A","a@b.c","010"));
              assertEquals("A", saved.getName());
              assertEquals("a@b.c", saved.getEmail());
            }

            @Test
            void createCustomer_dupEmail() {
              CustomerRepository repo = Mockito.mock(CustomerRepository.class);
              Mockito.when(repo.existsByEmail("dup@x.com")).thenReturn(true);
              CustomerService svc = new CustomerService(repo);
              assertThrows(IllegalArgumentException.class,
                () -> svc.createCustomer(new Customer("D","dup@x.com","")));
            }
          }
          JAVA

          cat > "${TEST_PKG_DIR}/CustomerControllerH2IT.java" <<'JAVA'
          package ${PACKAGE_NAME};

          import ${PACKAGE_NAME}.dto.CustomerDto;
          import org.junit.jupiter.api.Test;
          import org.springframework.beans.factory.annotation.Autowired;
          import org.springframework.boot.test.context.SpringBootTest;
          import org.springframework.boot.test.web.client.TestRestTemplate;
          import org.springframework.boot.test.web.server.LocalServerPort;
          import org.springframework.http.*;

          import static org.junit.jupiter.api.Assertions.*;

          @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
                          properties = { "spring.profiles.active=h2" })
          class CustomerControllerH2IT {

            @LocalServerPort
            int port;

            @Autowired
            TestRestTemplate rest;

            @Test
            void postAndGet_ok() {
              String base = "http://localhost:" + port;

              CustomerDto dto = new CustomerDto("홍길동", "hong@example.com", "010-1234-5678");
              ResponseEntity<String> postRes =
                  rest.postForEntity(base + "/customers", dto, String.class);
              assertEquals(HttpStatus.OK, postRes.getStatusCode());

              String list = rest.getForObject(base + "/customers", String.class);
              assertTrue(list.contains("hong@example.com"));
            }

            @Test
            void validation_fail() {
              String base = "http://localhost:" + port;

              // invalid email
              CustomerDto dto = new CustomerDto("A", "not-email", null);
              ResponseEntity<String> res =
                  rest.postForEntity(base + "/customers", dto, String.class);
              assertEquals(HttpStatus.BAD_REQUEST, res.getStatusCode());
              assertTrue(res.getBody().contains("Validation failed"));
            }
          }
          JAVA
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}

      - name: Build & Unit tests
        run: mvn -B -q -DskipITs=false test package

      - name: Smoke test via HTTP (H2)
        if: ${{ env.RUN_SMOKE_TEST == 'true' }}
        run: |
          set -Eeuo pipefail
          LOG=.github/echo_logs; mkdir -p "$LOG"
          nohup mvn -q -Dspring-boot.run.profiles=h2 -DskipTests spring-boot:run > "$LOG/app.log" 2>&1 &
          APP_PID=$!
          for i in $(seq 1 60); do
            if curl -fsS "http://127.0.0.1:8080/actuator/health" >/dev/null 2>&1; then break; fi
            sleep 1
          done
          curl -fsS -X POST "http://127.0.0.1:8080/customers" \
            -H "Content-Type: application/json" \
            -d '{"name":"홍길동","email":"hong2@example.com","phone":"010-0000-0000"}' | tee "$LOG/post.json"
          curl -fsS "http://127.0.0.1:8080/customers" | tee "$LOG/get.json"
          kill $APP_PID || true

      - name: Postgres profile tests (optional)
        if: ${{ env.RUN_POSTGRES_TESTS == 'true' }}
        run: |
          set -Eeuo pipefail
          # wait for service healthy
          for i in $(seq 1 60); do
            if pg_isready -h 127.0.0.1 -p 5432 -U test >/dev/null 2>&1; then break; fi
            sleep 1
          done
          mvn -B -q -Dspring.profiles.active=postgres -DskipTests=false test

      - name: MySQL profile tests (optional)
        if: ${{ env.RUN_MYSQL_TESTS == 'true' }}
        run: |
          set -Eeuo pipefail
          for i in $(seq 1 60); do
            if mysqladmin ping -h 127.0.0.1 -proot >/dev/null 2>&1; then break; fi
            sleep 1
          done
          mvn -B -q -Dspring.profiles.active=mysql -DskipTests=false test

      - name: Commit & Push (optional)
        if: ${{ env.COMMIT_CHANGES == 'true' }}
        run: |
          set -Eeuo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes."
          else
            git commit -m "[ECHO] Init Customer Resource (H2/Postgres/MySQL + Validation + Advice)"
            git push
          fi

      - name: Upload artifacts (sources, target, logs)
        uses: actions/upload-artifact@v4
        with:
          name: customer-app
          path: |
            pom.xml
            src/**
            target/**
            .github/echo_logs/**
          if-no-files-found: warn
