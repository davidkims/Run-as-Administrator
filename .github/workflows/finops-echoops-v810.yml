name: "☕ Java Red Hat Resources + Spring Boot Upgrade (All-in-One)"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "작업 유형 (generate | upgrade)"
        type: choice
        required: true
        default: "generate"
        options: ["generate", "upgrade"]
      build_tool:
        description: "생성 대상 (maven | gradle | spring-boot)"
        type: choice
        required: true
        default: "maven"
        options: ["maven", "gradle", "spring-boot"]
      target_version:
        description: "Spring Boot 타겟 버전 (빈값=기본 3.5.6)"
        required: false
        default: "3.5.6"
      group_id:
        description: "Maven/Gradle groupId"
        required: false
        default: "com.example"
      artifact_id:
        description: "프로젝트 artifactId"
        required: false
        default: "demo-app"
      package_name:
        description: "기본 패키지"
        required: false
        default: "com.example.app"
      out_dir:
        description: "생성 출력 경로 (예: ./demo-app)"
        required: false
        default: "./demo-app"

permissions:
  contents: write

concurrency:
  group: java-redhat-boot-upgrade-${{ github.ref }}-${{ github.event.inputs.action }}
  cancel-in-progress: false

jobs:
  prepare:
    name: "Prepare scripts"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write generator scripts (Maven / Gradle / Spring Boot)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p .github/tools
          # ----------------- gen-redhat-java.sh (Maven) -----------------
          cat > .github/tools/gen-redhat-java.sh <<'EOS'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          GROUP_ID="${GROUP_ID:-com.example}"
          ARTIFACT_ID="${ARTIFACT_ID:-demo-app}"
          VERSION="${VERSION:-0.0.1-SNAPSHOT}"
          PACKAGE_NAME="${PACKAGE_NAME:-com.example.app}"
          OUT_DIR="${OUT_DIR:-./demo-app}"
          while [[ $# -gt 0 ]]; do
            case "$1" in
              --groupId) GROUP_ID="$2"; shift 2 ;;
              --artifactId) ARTIFACT_ID="$2"; shift 2 ;;
              --version) VERSION="$2"; shift 2 ;;
              --package) PACKAGE_NAME="$2"; shift 2 ;;
              --out) OUT_DIR="$2"; shift 2 ;;
              *) echo "Unknown arg: $1" >&2; exit 1 ;;
            esac
          done
          PKG_PATH="${PACKAGE_NAME//./\/}"
          ROOT="$(mkdir -p "$OUT_DIR" && cd "$OUT_DIR" && pwd)"
          mkdir -p "$ROOT/src/main/java/$PKG_PATH" "$ROOT/src/test/java/$PKG_PATH" "$ROOT/src/main/resources" "$ROOT/.vscode"
          cat > "$ROOT/pom.xml" <<EOF
          <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>${GROUP_ID}</groupId>
            <artifactId>${ARTIFACT_ID}</artifactId>
            <version>${VERSION}</version>
            <name>${ARTIFACT_ID}</name>
            <description>Red Hat Java ready project</description>
            <properties>
              <java.version>17</java.version>
              <maven.compiler.source>\${java.version}</maven.compiler.source>
              <maven.compiler.target>\${java.version}</maven.compiler.target>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              <junit.jupiter.version>5.10.2</junit.jupiter.version>
              <surefire.plugin.version>3.2.5</surefire.plugin.version>
            </properties>
            <dependencies>
              <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>\${junit.jupiter.version}</version>
                <scope>test</scope>
              </dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>\${surefire.plugin.version}</version>
                  <configuration><useModulePath>false</useModulePath></configuration>
                </plugin>
              </plugins>
            </build>
          </project>
          EOF
          cat > "$ROOT/src/main/java/$PKG_PATH/App.java" <<EOF
          package ${PACKAGE_NAME};
          public class App { public static void main(String[] args){ System.out.println("Hello, Red Hat Java + VS Code! ✔"); } }
          EOF
          cat > "$ROOT/src/test/java/$PKG_PATH/AppTest.java" <<EOF
          package ${PACKAGE_NAME};
          import static org.junit.jupiter.api.Assertions.assertTrue;
          import org.junit.jupiter.api.Test;
          class AppTest { @Test void sanity(){ assertTrue(true); } }
          EOF
          cat > "$ROOT/.vscode/launch.json" <<EOF
          { "version":"0.2.0", "configurations":[{ "type":"java","name":"Run App","request":"launch","mainClass":"${PACKAGE_NAME}.App","projectName":"${ARTIFACT_ID}","console":"integratedTerminal"}] }
          EOF
          echo "Generated (Maven): $ROOT"
          EOS
          chmod +x .github/tools/gen-redhat-java.sh

          # ----------------- gen-redhat-java-gradle.sh -----------------
          cat > .github/tools/gen-redhat-java-gradle.sh <<'EOS'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          GROUP_ID="${GROUP_ID:-com.example}"
          ARTIFACT_ID="${ARTIFACT_ID:-demo-gradle}"
          PACKAGE_NAME="${PACKAGE_NAME:-com.example.app}"
          OUT_DIR="${OUT_DIR:-./demo-gradle}"
          JAVA_VERSION="${JAVA_VERSION:-17}"
          while [[ $# -gt 0 ]]; do
            case "$1" in
              --groupId) GROUP_ID="$2"; shift 2 ;;
              --artifactId) ARTIFACT_ID="$2"; shift 2 ;;
              --package) PACKAGE_NAME="$2"; shift 2 ;;
              --out) OUT_DIR="$2"; shift 2 ;;
              --java) JAVA_VERSION="$2"; shift 2 ;;
              *) echo "Unknown arg: $1" >&2; exit 1 ;;
            esac
          done
          PKG_PATH="${PACKAGE_NAME//./\/}"
          ROOT="$(mkdir -p "$OUT_DIR" && cd "$OUT_DIR" && pwd)"
          mkdir -p "$ROOT/src/main/java/$PKG_PATH" "$ROOT/src/test/java/$PKG_PATH" "$ROOT/.vscode"
          cat > "$ROOT/settings.gradle" <<< "rootProject.name = '${ARTIFACT_ID}'"
          cat > "$ROOT/build.gradle" <<EOF
          plugins { id 'java'; id 'application' }
          group='${GROUP_ID}'; version='1.0.0'
          java { toolchain { languageVersion = JavaLanguageVersion.of(${JAVA_VERSION}) } }
          repositories { mavenCentral() }
          dependencies { testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2' }
          test { useJUnitPlatform() }
          application { mainClass = '${PACKAGE_NAME}.App' }
          EOF
          cat > "$ROOT/src/main/java/$PKG_PATH/App.java" <<EOF
          package ${PACKAGE_NAME};
          public class App { public static void main(String[] args){ System.out.println("Hello, Red Hat Java + Gradle! ✔"); } }
          EOF
          cat > "$ROOT/src/test/java/$PKG_PATH/AppTest.java" <<'EOF'
          package ${PACKAGE_NAME};
          import static org.junit.jupiter.api.Assertions.assertTrue;
          import org.junit.jupiter.api.Test;
          class AppTest { @Test void sanity(){ assertTrue(true); } }
          EOF
          cat > "$ROOT/.vscode/launch.json" <<EOF
          { "version":"0.2.0", "configurations":[{ "type":"java","name":"Run App (Gradle)","request":"launch","mainClass":"${PACKAGE_NAME}.App","projectName":"${ARTIFACT_ID}","console":"integratedTerminal"}] }
          EOF
          echo "Generated (Gradle): $ROOT"
          EOS
          chmod +x .github/tools/gen-redhat-java-gradle.sh

          # ----------------- gen-redhat-springboot.sh -----------------
          cat > .github/tools/gen-redhat-springboot.sh <<'EOS'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          GROUP_ID="${GROUP_ID:-com.example}"
          ARTIFACT_ID="${ARTIFACT_ID:-demo-boot}"
          PACKAGE_NAME="${PACKAGE_NAME:-com.example.app}"
          OUT_DIR="${OUT_DIR:-./demo-boot}"
          SPRING_BOOT_VERSION="${SPRING_BOOT_VERSION:-3.5.6}"
          JAVA_VERSION="${JAVA_VERSION:-17}"
          while [[ $# -gt 0 ]]; do
            case "$1" in
              --groupId) GROUP_ID="$2"; shift 2 ;;
              --artifactId) ARTIFACT_ID="$2"; shift 2 ;;
              --package) PACKAGE_NAME="$2"; shift 2 ;;
              --out) OUT_DIR="$2"; shift 2 ;;
              --boot) SPRING_BOOT_VERSION="$2"; shift 2 ;;
              --java) JAVA_VERSION="$2"; shift 2 ;;
              *) echo "Unknown arg: $1" >&2; exit 1 ;;
            esac
          done
          PKG_PATH="${PACKAGE_NAME//./\/}"
          ROOT="$(mkdir -p "$OUT_DIR" && cd "$OUT_DIR" && pwd)"
          mkdir -p "$ROOT/src/main/java/$PKG_PATH" "$ROOT/src/test/java/$PKG_PATH" "$ROOT/src/main/resources" "$ROOT/.vscode"
          cat > "$ROOT/pom.xml" <<EOF
          <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <version>${SPRING_BOOT_VERSION}</version>
              <relativePath/>
            </parent>
            <groupId>${GROUP_ID}</groupId>
            <artifactId>${ARTIFACT_ID}</artifactId>
            <version>0.0.1-SNAPSHOT</version>
            <name>${ARTIFACT_ID}</name>
            <description>Spring Boot minimal app (VS Code + Red Hat Java)</description>
            <properties><java.version>${JAVA_VERSION}</java.version></properties>
            <dependencies>
              <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter</artifactId></dependency>
              <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-test</artifactId><scope>test</scope></dependency>
            </dependencies>
            <build><plugins><plugin><groupId>org.springframework.boot</groupId><artifactId>spring-boot-maven-plugin</artifactId></plugin></plugins></build>
          </project>
          EOF
          cat > "$ROOT/src/main/java/$PKG_PATH/Application.java" <<EOF
          package ${PACKAGE_NAME};
          import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.web.bind.annotation.*;
          @SpringBootApplication @RestController class Application {
            @GetMapping("/hello") public String hello(){ return "Hello, Spring Boot + VS Code ✔"; }
            public static void main(String[] args){ SpringApplication.run(Application.class, args); }
          }
          EOF
          cat > "$ROOT/src/test/java/$PKG_PATH/ApplicationTests.java" <<'EOF'
          package ${PACKAGE_NAME};
          import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest;
          @SpringBootTest class ApplicationTests { @Test void contextLoads() {} }
          EOF
          echo "server.port=8080" > "$ROOT/src/main/resources/application.properties"
          echo "Generated (Spring Boot): $ROOT"
          EOS
          chmod +x .github/tools/gen-redhat-springboot.sh

      - name: Upload generator scripts
        uses: actions/upload-artifact@v4
        with:
          name: redhat-java-generators
          path: .github/tools/*.sh
          if-no-files-found: error

  run:
    name: "Generate or Upgrade"
    needs: [prepare]
    runs-on: ubuntu-latest
    env:
      TARGET_BOOT: ${{ inputs.target_version != '' && inputs.target_version || '3.5.6' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Temurin JDK (17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Download generator scripts
        uses: actions/download-artifact@v4
        with:
          name: redhat-java-generators
          path: .github/tools

      - name: Ensure executables
        run: chmod +x .github/tools/*.sh

      # ----------------- Generate -----------------
      - name: Generate (Maven)
        if: ${{ inputs.action == 'generate' && inputs.build_tool == 'maven' }}
        run: |
          .github/tools/gen-redhat-java.sh \
            --groupId "${{ inputs.group_id }}" \
            --artifactId "${{ inputs.artifact_id }}" \
            --package "${{ inputs.package_name }}" \
            --out "${{ inputs.out_dir }}"
          echo "GEN_DIR=${{ inputs.out_dir }}" >> $GITHUB_ENV

      - name: Generate (Gradle)
        if: ${{ inputs.action == 'generate' && inputs.build_tool == 'gradle' }}
        run: |
          .github/tools/gen-redhat-java-gradle.sh \
            --groupId "${{ inputs.group_id }}" \
            --artifactId "${{ inputs.artifact_id }}" \
            --package "${{ inputs.package_name }}" \
            --out "${{ inputs.out_dir }}"
          echo "GEN_DIR=${{ inputs.out_dir }}" >> $GITHUB_ENV

      - name: Generate (Spring Boot Maven)
        if: ${{ inputs.action == 'generate' && inputs.build_tool == 'spring-boot' }}
        run: |
          .github/tools/gen-redhat-springboot.sh \
            --groupId "${{ inputs.group_id }}" \
            --artifactId "${{ inputs.artifact_id }}" \
            --package "${{ inputs.package_name }}" \
            --out "${{ inputs.out_dir }}" \
            --boot "${TARGET_BOOT}"
          echo "GEN_DIR=${{ inputs.out_dir }}" >> $GITHUB_ENV

      - name: Build generated project (Maven)
        if: ${{ inputs.action == 'generate' && (inputs.build_tool == 'maven' || inputs.build_tool == 'spring-boot') }}
        run: |
          mvn -q -e -DskipTests=false -f "${{ env.GEN_DIR }}/pom.xml" clean verify

      - name: Build generated project (Gradle)
        if: ${{ inputs.action == 'generate' && inputs.build_tool == 'gradle' }}
        run: |
          cd "${{ env.GEN_DIR }}"
          ./gradlew --version >/dev/null 2>&1 || (echo "Gradle wrapper absent; installing Gradle" && sudo apt-get update -y && sudo apt-get install -y gradle)
          ./gradlew -q --no-daemon clean build || gradle -q clean build

      - name: Upload generated project
        if: ${{ inputs.action == 'generate' }}
        uses: actions/upload-artifact@v4
        with:
          name: generated-${{ inputs.build_tool }}
          path: ${{ env.GEN_DIR }}

      # ----------------- Upgrade -----------------
      - name: Detect build tool
        id: detect
        if: ${{ inputs.action == 'upgrade' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          if [[ -f "pom.xml" ]]; then
            echo "tool=maven" >> $GITHUB_OUTPUT
          elif [[ -f "build.gradle" || -f "build.gradle.kts" ]]; then
            echo "tool=gradle" >> $GITHUB_OUTPUT
          else
            echo "No build file found (pom.xml or build.gradle*)."; exit 1
          fi

      - name: Upgrade Spring Boot (Maven)
        if: ${{ inputs.action == 'upgrade' && steps.detect.outputs.tool == 'maven' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          TARGET="${TARGET_BOOT}"
          echo "Upgrading Spring Boot (Maven) -> ${TARGET}"
          # xmlstarlet가 있으면 안전 업데이트, 없으면 sed fallback
          if command -v xmlstarlet >/dev/null 2>&1; then
            xmlstarlet ed -P -L \
              -u "/project/parent/version" -v "${TARGET}" \
              pom.xml || true
          else
            sed -i -E "s|(<artifactId>spring-boot-starter-parent</artifactId>[^<]*</parent>.*?<version>)[^<]+(</version>)|\1${TARGET}\2|s" pom.xml || true
            sed -i -E "s|(<parent>[^<]*<groupId>org.springframework.boot</groupId>[^<]*<artifactId>spring-boot-starter-parent</artifactId>[^<]*<version>)[^<]+(</version>)|\1${TARGET}\2|g" pom.xml || true
          fi
          ./mvnw -q -V -U -e -DskipTests=false clean verify || mvn -q -V -U -e clean verify

      - name: Upgrade Spring Boot (Gradle)
        if: ${{ inputs.action == 'upgrade' && steps.detect.outputs.tool == 'gradle' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          TARGET="${TARGET_BOOT}"
          echo "Upgrading Spring Boot (Gradle) -> ${TARGET}"
          GRADLE_FILE=""
          [[ -f build.gradle.kts ]] && GRADLE_FILE="build.gradle.kts" || GRADLE_FILE="build.gradle"
          # plugin 버전 치환 (Groovy/Kotlin DSL 모두 지원하는 단순 패턴)
          sed -i -E "s|(id[[:space:]]+'org\\.springframework\\.boot'[[:space:]]+version[[:space:]]+')[^']+(')|\\1${TARGET}\\2|g" "${GRADLE_FILE}" || true
          sed -i -E 's|(id\\("org\\.springframework\\.boot"\\)[[:space:]]*version[[:space:]]*")[^"]+(")|\\1'${TARGET}'\\2|g' "${GRADLE_FILE}" || true
          ./gradlew -q --no-daemon clean build || gradle -q clean build

      - name: Commit changes (upgrade only)
        if: ${{ inputs.action == 'upgrade' }}
        run: |
          set -Eeuo pipefail
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "[AUTO] Spring Boot upgrade -> ${TARGET_BOOT}"
            git push
          else
            echo "No changes to commit."
          fi
