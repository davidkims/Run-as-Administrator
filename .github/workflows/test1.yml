name: Test-Server + Spring Boot + Docker (Ultra:Maven+Gradle, JDK17/21, Schedule, Release, Promote)

on:
  schedule:
    - cron: "*/10 * * * *" # 10분 주기
  workflow_dispatch:
    inputs:
      freedisk_profile:
        description: "FreeDisk 프로파일 (none|minimal/aggressive)"
        required: true
        default: "minimal"
      lowdisk_mode:
        description: "저용량 디스크 시뮬 (off|tmpfs|loop)"
        required: true
        default: "tmpfs"
      fast_compress:
        description: "pigz 병렬 압축 사용 (true/false)"
        required: true
        default: "true"
      upgrade_os:
        description: "OS 패키지 업그레이드 (true/false)"
        required: true
        default: "false"
      java_version:
        description: "수동 실행시 기본 JDK (17/21)"
        required: false
        default: "17"
      maven_version:
        description: "Maven 버전(예: 3.9.9) 비우면 apt 기본"
        required: false
        default: ""
      purge_apt_cache:
        description: "Apt 캐시/로그 정리 (true/false)"
        required: true
        default: "false"
      boot_artifact:
        description: "Spring Boot artifactId"
        required: false
        default: "demo-app"
      boot_dependencies:
        description: "Boot deps CSV (web,actuator,...)"
        required: false
        default: "web,actuator"
      container_port_host:
        description: "호스트 포트(기본 18080; JDK21는 +1)"
        required: false
        default: "18080"

permissions:
  contents: write
  pull-requests: write

env:
  BOOT_GROUP: com.example

jobs:
  setup_base:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      artifact: ${{ steps.cfg.outputs.artifact }}
      deps: ${{ steps.cfg.outputs.deps }}
      base_port: ${{ steps.cfg.outputs.base_port }}
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v5
        continue-on-error: true

      - name: 🔧 Config echo
        id: cfg
        run: |
          echo "artifact=${{ inputs.boot_artifact || 'demo-app' }}" >> $GITHUB_OUTPUT
          echo "deps=${{ inputs.boot_dependencies || 'web,actuator' }}" >> $GITHUB_OUTPUT
          echo "base_port=${{ inputs.container_port_host || '18080' }}" >> $GITHUB_OUTPUT

      - name: 🔎 Echo:runner/env/docker/resources
        run: |
          uname -a || true
          nproc || true
          free -h || true
          df -h || true
          ip a || true
          docker version || true
          docker info || true

      - name: 📦 Reserve fast disk (5G)
        run: |
          mkdir -p .github/workflows || true
          sudo fallocate -l 5G .github/workflows/.reserve_space || true
          sudo chmod 666 .github/workflows/.reserve_space || true
          du -h .github/workflows/.reserve_space || true
          df -h || true

      - name: 🛠️ numfmt shim (-4 옵션 무시)
        run: |
          command -v numfmt >/dev/null 2>&1 || { sudo apt-get update -y || true; sudo apt-get install -y coreutils || true; }
          sudo mkdir -p /usr/local/bin
          sudo tee /usr/local/bin/numfmt >/dev/null <<'SH'
          #!/usr/bin/env bash
          TARGET="$(command -v -a numfmt | grep -v '/usr/local/bin/numfmt' | head -n1)"
          args=(); for a in "$@"; do [ "$a" = "-4" ] && continue; args+=("$a"); done
          exec "$TARGET" "${args[@]}"
          SH
          sudo chmod +x /usr/local/bin/numfmt
          /usr/local/bin/numfmt -4 --to=iec 1024 || true

      - name: 🧹 Free up disk (profiled)
        uses: jlumbroso/free-disk-space@main
        with:
          android:        ${{ inputs.freedisk_profile == 'aggressive' }}
          dotnet:         ${{ inputs.freedisk_profile == 'aggressive' }}
          haskell:        ${{ inputs.freedisk_profile == 'aggressive' }}
          large-packages: ${{ inputs.freedisk_profile == 'aggressive' }}
          docker-images:  ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          tool-cache:     ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          swap-storage:   ${{ inputs.freedisk_profile == 'aggressive' }}

      - name: ⬆️ Upgrade OS (opt)
        if: ${{ inputs.upgrade_os == 'true' }}
        run: |
          sudo apt-get update -y || true
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade || true
          sudo dpkg --configure -a || true
          sudo apt-get -f install || true

      - name: 🧯 Purge apt cache&logs (opt)
        if: ${{ inputs.purge_apt_cache == 'true' }}
        run: |
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo journalctl --vacuum-time=1s || true
          sudo find /var/log -type f -name "*.gz" -delete || true
          sudo find /var/log -type f -name "*.1" -delete || true
          df -h || true

  build_matrix:
    needs: setup_base
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        java: ['17','21']
    env:
      BOOT_ARTIFACT: ${{ needs.setup_base.outputs.artifact }}
      BOOT_DEPS: ${{ needs.setup_base.outputs.deps }}
      BASE_PORT: ${{ needs.setup_base.outputs.base_port }}
      BOOT_GROUP: com.example

    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v5

      # 1) 첫 Java 설정(캐시 없이) → 캐시 미스/경로 오류 방지
      - name: ☕ Setup Java (no cache yet)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: 📦 Install Maven (tarball if version set)
        run: |
          VER="${{ inputs.maven_version }}"
          if [ -n "$VER" ]; then
            URL="https://archive.apache.org/dist/maven/maven-3/${VER}/binaries/apache-maven-${VER}-bin.tar.gz"
            TMPD="$(mktemp -d)" || true
            (cd "$TMPD" && curl -fsSL "$URL" -o maven.tgz && tar -xzf maven.tgz) || true
            sudo rm -rf /opt/maven || true; sudo mv "$TMPD/apache-maven-${VER}" /opt/maven || true
            echo "/opt/maven/bin" >> "$GITHUB_PATH"
            rm -rf "$TMPD" || true
          else
            sudo apt-get update -y || true
            sudo apt-get install -y maven unzip pigz || true
          fi
          mvn -v || true

      # 2) Maven 샘플 생성/패치/빌드
      - name: 🧪 Generate Maven sample + patch (JDK=${{ matrix.java }})
        run: |
          mvn -q -T 1C archetype:generate \
            -DgroupId=com.example -DartifactId=maven-sample \
            -DarchetypeArtifactId=maven-archetype-quickstart \
            -DarchetypeVersion=1.4 -DinteractiveMode=false || true
          cat > maven-sample/pom.xml <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>maven-sample</artifactId>
            <version>1.0.0</version>
            <properties>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              <maven.compiler.release>__REL__</maven.compiler.release>
            </properties>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.11.0</version>
                  <configuration><release>${maven.compiler.release}</release></configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>3.2.5</version>
                </plugin>
              </plugins>
            </build>
            <dependencies>
              <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13.2</version>
                <scope>test</scope>
              </dependency>
            </dependencies>
          </project>
          EOF
          sed -i "s/__REL__/${{ matrix.java }}/g" maven-sample/pom.xml || true
          (cd maven-sample && mvn -q -T 1C -DskipTests package) || true
          ls -al maven-sample/target || true

      # 3) Spring Boot(Maven) 프로젝트 생성 + Hello + Testcontainers 스텁
      - name: 🌱 Generate Boot (Maven) + Hello + IT stub
        run: |
          G="${{ env.BOOT_GROUP }}"; A="${{ env.BOOT_ARTIFACT }}"; D="${{ env.BOOT_DEPS }}"; J="${{ matrix.java }}"
          PKG="${G}.${A//-/.}"
          mkdir -p boot-app || true
          curl -fsSL -G https://start.spring.io/starter.zip \
            --data-urlencode "type=maven-project" \
            --data-urlencode "language=java" \
            --data-urlencode "groupId=$G" \
            --data-urlencode "artifactId=$A" \
            --data-urlencode "name=$A" \
            --data-urlencode "packageName=$PKG" \
            --data-urlencode "dependencies=$D" \
            --data-urlencode "javaVersion=$J" \
            --data-urlencode "packaging=jar" \
            -o boot-app.zip || true
          unzip -q -o boot-app.zip -d boot-app || true
          mkdir -p "boot-app/src/main/java/${PKG//.//}/controller"
          cat > "boot-app/src/main/java/${PKG//.//}/controller/HelloController.java" <<EOF
          package ${PKG}.controller;
          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RestController;
          @RestController
          public class HelloController { @GetMapping("/hello") public String hello(){ return "hello"; } }
          EOF
          mkdir -p "boot-app/src/test/java/${PKG//.//}/it"
          cat > "boot-app/src/test/java/${PKG//.//}/it/DemoIT.java" <<EOF
          package ${PKG}.it;
          import org.junit.jupiter.api.Disabled;
          import org.junit.jupiter.api.Test;
          import org.testcontainers.containers.GenericContainer;
          import org.testcontainers.junit.jupiter.Testcontainers;
          @Testcontainers @Disabled("RUN_IT=true 로 활성화")
          public class DemoIT {
            @Test void smoke() {
              try (GenericContainer<?> c = new GenericContainer<>("alpine:3.19").withCommand("sleep","1")) { c.start(); }
            }
          }
          EOF
          mkdir -p boot-app/src/main/resources
          { echo "server.port=8080"; echo "management.endpoints.web.exposure.include=*"; } >> boot-app/src/main/resources/application.properties
          # testcontainers deps 주입
          sed -i 's#</dependencies>#  <dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>5.10.2</version>\n    <scope>test</scope>\n  </dependency>\n  <dependency>\n    <groupId>org.testcontainers</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>1.19.7</version>\n    <scope>test</scope>\n  </dependency>\n  <dependency>\n    <groupId>org.testcontainers</groupId>\n    <artifactId>testcontainers</artifactId>\n    <version>1.19.7</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>#' boot-app/pom.xml || true

      # 4) (이 시점에) Maven 캐시 활성화 — 이제 pom.xml 존재
      - name: ☕ Enable Maven cache (now projects exist)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven
          cache-dependency-path: |
            maven-sample/pom.xml
            boot-app/pom.xml

      - name: 🏗️ Build Boot (Maven)
        working-directory: boot-app
        run: |
          if [ -x "./mvnw" ]; then ./mvnw -q -T 1C -DskipTests package || true
          else mvn -q -T 1C -DskipTests package || true
          fi
          ls -al target || true

      # 5) Spring Boot (Gradle) 동시 생성/빌드(샘플 비교)
      - name: 🌱 Generate Boot (Gradle)
        run: |
          G="${{ env.BOOT_GROUP }}"; A="${{ env.BOOT_ARTIFACT }}-gradle"; D="${{ env.BOOT_DEPS }}"; J="${{ matrix.java }}"
          PKG="${G}.${A//-/.}"
          mkdir -p boot-app-gradle || true
          curl -fsSL -G https://start.spring.io/starter.zip \
            --data-urlencode "type=gradle-project" \
            --data-urlencode "language=java" \
            --data-urlencode "groupId=$G" \
            --data-urlencode "artifactId=$A" \
            --data-urlencode "name=$A" \
            --data-urlencode "packageName=$PKG" \
            --data-urlencode "dependencies=$D" \
            --data-urlencode "javaVersion=$J" \
            --data-urlencode "packaging=jar" \
            -o boot-app-gradle.zip || true
          unzip -q -o boot-app-gradle.zip -d boot-app-gradle || true
          mkdir -p "boot-app-gradle/src/main/java/${PKG//.//}/controller"
          cat > "boot-app-gradle/src/main/java/${PKG//.//}/controller/HelloController.java" <<EOF
          package ${PKG}.controller;
          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RestController;
          @RestController
          public class HelloController { @GetMapping("/hello") public String hello(){ return "hello-gradle"; } }
          EOF
          sed -i '/dependencies {/a \ \ \ \ testImplementation("org.testcontainers:junit-jupiter:1.19.7")\n\ \ \ \ testImplementation("org.testcontainers:testcontainers:1.19.7")' boot-app-gradle/build.gradle || true

      - name: 🏗️ Build Boot (Gradle)
        working-directory: boot-app-gradle
        run: |
          chmod +x ./gradlew || true
          ./gradlew -q -Dorg.gradle.jvmargs="-Xmx1g" -x test build || true
          ls -al build/libs || true

      # 6) Docker 이미지(멀티스테이지) 빌드/기동
      - name: 🐳 Setup QEMU/Buildx
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: 🐳 Create Dockerfile (multi-stage, JDK=${{ matrix.java }})
        working-directory: boot-app
        run: |
          J="${{ matrix.java }}"
          BUILDER="maven:3.9.9-eclipse-temurin-${J}"
          RUNTIME="eclipse-temurin:${J}-jre"
          cat > Dockerfile <<DOCKER
          FROM ${BUILDER} AS builder
          WORKDIR /workspace
          COPY pom.xml .
          COPY src ./src
          RUN --mount=type=cache,target=/root/.m2 mvn -q -DskipTests package
          FROM ${RUNTIME}
          WORKDIR /app
          COPY --from=builder /workspace/target/*.jar /app/app.jar
          EXPOSE 8080
          USER 1000
          ENTRYPOINT ["java","-jar","/app/app.jar"]
          DOCKER
          printf "target/\n.git/\n.github/\n**/*.iml\n**/.DS_Store\n*.log\n" > .dockerignore

      - name: 🐳 Build image (cached) - tag by JDK
        id: docker_build
        working-directory: boot-app
        env:
          IMG: ${{ env.BOOT_ARTIFACT }}:local-j${{ matrix.java }}
        run: |
          mkdir -p /tmp/.buildx-cache-${{ matrix.java }} /tmp/.buildx-cache-new-${{ matrix.java }} || true
          docker buildx build --load -t "${IMG}" \
            --cache-from type=local,src=/tmp/.buildx-cache-${{ matrix.java }} \
            --cache-to   type=local,dest=/tmp/.buildx-cache-new-${{ matrix.java }},mode=max \
            .
          rm -rf /tmp/.buildx-cache-${{ matrix.java }} || true
          mv /tmp/.buildx-cache-new-${{ matrix.java }} /tmp/.buildx-cache-${{ matrix.java }} || true
          echo "image=${IMG}" >> $GITHUB_OUTPUT
          docker images | head -n 20 || true

      - name: 🐳 Save image tar
        working-directory: ${{ github.workspace }}
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
        run: |
          mkdir -p artifacts || true
          docker save "${IMG}" -o artifacts/${IMG/:/_}.tar 2>/dev/null || true

      - name: 🐳 Run container (No-Stop)
        id: docker_run
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
          BASE: ${{ env.BASE_PORT }}
          J: ${{ matrix.java }}
        run: |
          PORT=$BASE; [ "$J" = "21" ] && PORT=$((BASE+1))
          NAME="boot-app-${J}-${GITHUB_RUN_ID}"
          docker run -d --name "${NAME}" -p "${PORT}:8080" "${IMG}" 2>/dev/null || true
          echo "container_name=${NAME}" >> $GITHUB_OUTPUT
          echo "PORT=${PORT}" >> $GITHUB_OUTPUT
          for i in $(seq 1 30); do
            sleep 2
            curl -fsS "http://localhost:${PORT}/actuator/health" && break || true
            curl -fsS "http://localhost:${PORT}/hello" && break || true
            echo "[echo] waiting app(${J})... ($i)"
          done
          curl -fsS "http://localhost:${PORT}/hello" || true
          docker logs --tail 120 "${NAME}" 2>/dev/null || true

      - name: ⬆️ Upload artifacts (per JDK)
        uses: actions/upload-artifact@v4
        with:
          name: bundles-j${{ matrix.java }}
          path: |
            artifacts/*
            maven-sample/target/*.jar
            boot-app/target/*.jar
            boot-app/Dockerfile
            boot-app/.dockerignore
            boot-app-gradle/build/libs/*.jar
          if-no-files-found: warn
          retention-days: 7

  release:
    needs: [setup_base, build_matrix]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: ⬇️ Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: 🧾 List artifacts
        run: |
          echo "== release_artifacts =="; find release_artifacts -type f | sed 's/^/- /' || true

      - name: 🚀 Create GitHub Release (only if files exist)
        if: ${{ hashFiles('release_artifacts/**/*') != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: auto-${{ github.run_number }}
          name: "Auto Release #${{ github.run_number }}"
          draft: false
          prerelease: true
          files: |
            release_artifacts/**/* 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  promote_to_prod:
    # 테스트 산출물을 운영 명명으로 복제/리태깅(tar) + 워크플로우 복제 PR 생성
    needs: [setup_base, build_matrix]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: ⬇️ Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: stage_artifacts

      - name: 📦 Promote artifacts → prod (rename/retag tar)
        run: |
          mkdir -p prod_artifacts
          find stage_artifacts -type f -name "*.tar" -print0 | while IFS= read -r -d '' f; do
            base="$(basename "$f")"
            prod="${base/local/prod}"
            cp -f "$f" "prod_artifacts/${prod}"
          done
          # JAR도 prod 접미사로 복제
          find stage_artifacts -type f \( -name "*.jar" -o -name "*.tgz" \) -print0 | while IFS= read -r -d '' f; do
            cp -f "$f" "prod_artifacts/$(basename "$f")"
          done
          echo "== prod_artifacts =="; ls -al prod_artifacts || true

      - name: ⬆️ Upload prod bundle
        uses: actions/upload-artifact@v4
        with:
          name: prod-bundles
          path: prod_artifacts/*
          if-no-files-found: warn
          retention-days: 14

      - name: 🛒 Checkout (for PR)
        uses: actions/checkout@v5

      - name: 📝 Create a PROD workflow copy (PR)
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/test1-prod.yml <<'YML'
          name: PROD Runner (wrapper)
          on:
            workflow_dispatch:
          jobs:
            info:
              runs-on: ubuntu-latest
              steps:
                - run: echo "This is a placeholder PROD workflow. It exists as a copy for ops traceability."
          YML

      - name: 🔁 Open PR for PROD workflow copy
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(prod): add prod workflow copy & promote bundles"
          title: "chore(prod): add prod workflow copy & promote bundles"
          body: |
            자동 생성된 PROD 워크플로우 래퍼 및 프로모션 번들 업로드.
            - test1-prod.yml 추가(운영 추적용)
            - 아티팩트(prod-bundles) 포함
          branch: promote/prod-${{ github.run_number }}
          delete-branch: true
