name: Test-Server + Spring Boot + Docker (Ultra-Expanded:Maven+Gradle, JDK17/21, Scheduled, Release)

on:
  schedule:
    - cron: "*/10 * * * *"   # ‚úÖ 10Î∂Ñ Ï£ºÍ∏∞ ÏûêÎèô Ïã§Ìñâ
  workflow_dispatch:
    inputs:
      freedisk_profile:
        description: "FreeDisk ÌîÑÎ°úÌååÏùº (none|minimal|aggressive)"
        required: true
        default: "minimal"
      lowdisk_mode:
        description: "Ï†ÄÏö©Îüâ ÎîîÏä§ÌÅ¨ ÏãúÎÆ¨ (off|tmpfs|loop)"
        required: true
        default: "tmpfs"
      fast_compress:
        description: "pigz Î≥ëÎ†¨ ÏïïÏ∂ï ÏÇ¨Ïö© (true/false)"
        required: true
        default: "true"
      upgrade_os:
        description: "OS Ìå®ÌÇ§ÏßÄ ÏóÖÍ∑∏Î†àÏù¥Îìú Ïã§Ìñâ (true/false)"
        required: true
        default: "false"
      java_version:
        description: "Í∏∞Î≥∏ JDK Î≤ÑÏ†Ñ(ÏàòÎèô Ïã§ÌñâÏö©; Îß§Ìä∏Î¶≠Ïä§Îäî 17/21 Í≥†Ï†ï)"
        required: false
        default: "17"
      maven_version:
        description: "Maven Î≤ÑÏ†Ñ(Ïòà: 3.9.9). ÎπÑÏö∞Î©¥ apt Í∏∞Î≥∏"
        required: false
        default: ""
      purge_apt_cache:
        description: "Apt Ï∫êÏãú/Î°úÍ∑∏ Ï†ïÎ¶¨ (true/false)"
        required: true
        default: "false"
      boot_artifact:
        description: "Spring Boot artifactId"
        required: false
        default: "demo-app"
      boot_dependencies:
        description: "Boot deps CSV (Ïòà: web,actuator)"
        required: false
        default: "web,actuator"
      container_port_host:
        description: "Ìò∏Ïä§Ìä∏ Ìè¨Ìä∏(Í∏∞Î≥∏ 18080; JDK21ÏùÄ +1)"
        required: false
        default: "18080"

permissions:
  contents: write

jobs:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # 0) Í≥µÌÜµ Ï§ÄÎπÑ(ÎîîÏä§ÌÅ¨/ÏóêÏΩî/numfmt shim Îì±) ‚Äî Ìïú Î≤àÎßå Ïã§Ìñâ
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  setup_base:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      artifact: ${{ steps.cfg.outputs.artifact }}
      deps: ${{ steps.cfg.outputs.deps }}
      base_port: ${{ steps.cfg.outputs.base_port }}
    steps:
      - name: üõí Checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: üîß Config echo
        id: cfg
        run: |
          echo "artifact=${{ inputs.boot_artifact || 'demo-app' }}" >> $GITHUB_OUTPUT
          echo "deps=${{ inputs.boot_dependencies || 'web,actuator' }}" >> $GITHUB_OUTPUT
          echo "base_port=${{ inputs.container_port_host || '18080' }}" >> $GITHUB_OUTPUT

      - name: üîé Echo: runner/env/docker/resources
        run: |
          set -o pipefail
          uname -a || true
          nproc || true
          free -h || true
          df -h || true
          ip a || true
          docker version || true
          docker info || true
        continue-on-error: true

      - name: üì¶ Reserve fast disk (5G) + df
        run: |
          mkdir -p .github/workflows || true
          sudo fallocate -l 5G .github/workflows/.reserve_space || true
          sudo chmod 666 .github/workflows/.reserve_space || true
          du -h .github/workflows/.reserve_space || true
          df -h || true
        continue-on-error: true

      - name: üõ†Ô∏è numfmt shim (-4 ÏòµÏÖò Î¨¥Ïãú)
        run: |
          command -v numfmt >/dev/null 2>&1 || { sudo apt-get update -y || true; sudo apt-get install -y coreutils || true; }
          sudo mkdir -p /usr/local/bin
          sudo tee /usr/local/bin/numfmt >/dev/null <<'SH'
          #!/usr/bin/env bash
          TARGET="$(command -v -a numfmt | grep -v '/usr/local/bin/numfmt' | head -n1)"
          args=(); for a in "$@"; do [ "$a" = "-4" ] && continue; args+=("$a"); done
          exec "$TARGET" "${args[@]}"
          SH
          sudo chmod +x /usr/local/bin/numfmt
          /usr/local/bin/numfmt -4 --to=iec 1024 || true
        continue-on-error: true

      - name: üßπ Free up disk (profiled)
        uses: jlumbroso/free-disk-space@main
        with:
          android:        ${{ inputs.freedisk_profile == 'aggressive' }}
          dotnet:         ${{ inputs.freedisk_profile == 'aggressive' }}
          haskell:        ${{ inputs.freedisk_profile == 'aggressive' }}
          large-packages: ${{ inputs.freedisk_profile == 'aggressive' }}
          docker-images:  ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          tool-cache:     ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          swap-storage:   ${{ inputs.freedisk_profile == 'aggressive' }}
        continue-on-error: true

      - name: ‚¨ÜÔ∏è Upgrade OS (opt)
        if: ${{ inputs.upgrade_os == 'true' }}
        run: |
          sudo apt-get update -y || true
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade || true
          sudo dpkg --configure -a || true
          sudo apt-get -f install || true
        continue-on-error: true

      - name: üßØ Purge apt cache&logs (opt)
        if: ${{ inputs.purge_apt_cache == 'true' }}
        run: |
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo journalctl --vacuum-time=1s || true
          sudo find /var/log -type f -name "*.gz" -delete || true
          sudo find /var/log -type f -name "*.1" -delete || true
          df -h || true
        continue-on-error: true

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # 1) Îß§Ìä∏Î¶≠Ïä§ ÎπåÎìú/Ïù¥ÎØ∏ÏßÄ (JDK 17/21) ‚Äî Maven + Gradle ÎèôÏãú ÏÉùÏÑ±/ÎπåÎìú
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  build_matrix:
    needs: setup_base
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        java: [ '17', '21' ]
    env:
      BOOT_GROUP: com.example
      BOOT_ARTIFACT: ${{ needs.setup_base.outputs.artifact }}
      BOOT_DEPS: ${{ needs.setup_base.outputs.deps }}
      BASE_PORT: ${{ needs.setup_base.outputs.base_port }}

    steps:
      - name: üõí Checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: ‚òï Setup Java (matrix)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: 'maven'
        continue-on-error: true

      - name: üì¶ Install Maven (tarball if version set)
        run: |
          set -o pipefail
          VER="${{ inputs.maven_version }}"
          if [ -n "$VER" ]; then
            URL="https://archive.apache.org/dist/maven/maven-3/${VER}/binaries/apache-maven-${VER}-bin.tar.gz"
            TMPD="$(mktemp -d)" || true
            (cd "$TMPD" && curl -fsSL "$URL" -o maven.tgz && tar -xzf maven.tgz) || true
            sudo rm -rf /opt/maven || true; sudo mv "$TMPD/apache-maven-${VER}" /opt/maven || true
            echo "/opt/maven/bin" >> "$GITHUB_PATH"; rm -rf "$TMPD" || true
          else
            sudo apt-get update -y || true
            sudo apt-get install -y maven unzip pigz || true
          fi
          mvn -v || true
        continue-on-error: true

      # ‚îÄ‚îÄ Maven ÏÉòÌîå(Ïª¥ÌååÏùºÎü¨ release=matrix.java) ‚îÄ‚îÄ
      - name: üß™ Generate Maven sample + patch (JDK=${{ matrix.java }})
        run: |
          set -o pipefail
          mvn -q -T 1C archetype:generate \
            -DgroupId=com.example -DartifactId=maven-sample \
            -DarchetypeArtifactId=maven-archetype-quickstart \
            -DarchetypeVersion=1.4 -DinteractiveMode=false || true
          cat > maven-sample/pom.xml <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>maven-sample</artifactId>
            <version>1.0.0</version>
            <properties>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              <maven.compiler.release>__REL__</maven.compiler.release>
            </properties>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.11.0</version>
                  <configuration><release>${maven.compiler.release}</release></configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>3.2.5</version>
                </plugin>
              </plugins>
            </build>
            <dependencies>
              <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13.2</version>
                <scope>test</scope>
              </dependency>
            </dependencies>
          </project>
          EOF
          sed -i "s/__REL__/${{ matrix.java }}/g" maven-sample/pom.xml || true
          (cd maven-sample && mvn -q -T 1C -DskipTests package) || true
          ls -al maven-sample/target || true
        continue-on-error: true

      # ‚îÄ‚îÄ Spring Boot (Maven) ÏÉùÏÑ± + HelloController + Testcontainers Ïä§ÌÖÅ ‚îÄ‚îÄ
      - name: üå± Generate Boot(Maven) + Hello + IT stub
        run: |
          set -o pipefail
          G="${BOOT_GROUP}"
          A="${BOOT_ARTIFACT}"
          D="${BOOT_DEPS}"
          J="${{ matrix.java }}"
          PKG="${G}.${A//-/.}"
          mkdir -p boot-app || true
          curl -fsSL -G https://start.spring.io/starter.zip \
            --data-urlencode "type=maven-project" \
            --data-urlencode "language=java" \
            --data-urlencode "groupId=$G" \
            --data-urlencode "artifactId=$A" \
            --data-urlencode "name=$A" \
            --data-urlencode "packageName=$PKG" \
            --data-urlencode "dependencies=$D" \
            --data-urlencode "javaVersion=$J" \
            --data-urlencode "packaging=jar" \
            -o boot-app.zip || true
          unzip -q -o boot-app.zip -d boot-app || true
          # HelloController
          mkdir -p "boot-app/src/main/java/${PKG//.//}/controller"
          cat > "boot-app/src/main/java/${PKG//.//}/controller/HelloController.java" <<EOF
          package ${PKG}.controller;
          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RestController;
          @RestController
          public class HelloController {
            @GetMapping("/hello") public String hello(){ return "hello"; }
          }
          EOF
          # Testcontainers ÌÜµÌï©ÌÖåÏä§Ìä∏ Ïä§ÌÖÅ (Í∏∞Î≥∏ Disabled)
          mkdir -p "boot-app/src/test/java/${PKG//.//}/it"
          cat > "boot-app/src/test/java/${PKG//.//}/it/DemoIT.java" <<EOF
          package ${PKG}.it;
          import org.junit.jupiter.api.Disabled;
          import org.junit.jupiter.api.Test;
          import org.testcontainers.containers.GenericContainer;
          import org.testcontainers.junit.jupiter.Testcontainers;

          @Testcontainers
          @Disabled("RUN_IT=true ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú ÌôúÏÑ±Ìôî")
          public class DemoIT {
            @Test
            void smoke() {
              try (GenericContainer<?> c = new GenericContainer<>("alpine:3.19").withCommand("sleep","1")) {
                c.start();
              }
            }
          }
          EOF
          # pom.xmlÏóê junit-jupiter & testcontainers Ï∂îÍ∞Ä(ÏûàÏúºÎ©¥ ÎçÆÏñ¥ÏîÄ)
          sed -i 's#</dependencies>#  <dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>5.10.2</version>\n    <scope>test</scope>\n  </dependency>\n  <dependency>\n    <groupId>org.testcontainers</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>1.19.7</version>\n    <scope>test</scope>\n  </dependency>\n  <dependency>\n    <groupId>org.testcontainers</groupId>\n    <artifactId>testcontainers</artifactId>\n    <version>1.19.7</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>#' boot-app/pom.xml || true
          # application.properties
          mkdir -p boot-app/src/main/resources
          {
            echo "server.port=8080"
            echo "management.endpoints.web.exposure.include=*"
          } >> boot-app/src/main/resources/application.properties
        continue-on-error: true

      - name: üèóÔ∏è Build Boot(Maven)
        working-directory: boot-app
        run: |
          set -o pipefail
          if [ -x "./mvnw" ]; then ./mvnw -q -T 1C -DskipTests package || true
          else mvn -q -T 1C -DskipTests package || true
          fi
          ls -al target || true
        continue-on-error: true

      # ‚îÄ‚îÄ Spring Boot (Gradle) ÎèôÏãú ÏÉùÏÑ±(ÏÉòÌîå ÎπÑÍµê) ‚îÄ‚îÄ
      - name: üå± Generate Boot(Gradle) project
        run: |
          set -o pipefail
          G="${BOOT_GROUP}"
          A="${BOOT_ARTIFACT}-gradle"
          D="${BOOT_DEPS}"
          J="${{ matrix.java }}"
          PKG="${G}.${A//-/.}"
          mkdir -p boot-app-gradle || true
          curl -fsSL -G https://start.spring.io/starter.zip \
            --data-urlencode "type=gradle-project" \
            --data-urlencode "language=java" \
            --data-urlencode "groupId=$G" \
            --data-urlencode "artifactId=$A" \
            --data-urlencode "name=$A" \
            --data-urlencode "packageName=$PKG" \
            --data-urlencode "dependencies=$D" \
            --data-urlencode "javaVersion=$J" \
            --data-urlencode "packaging=jar" \
            -o boot-app-gradle.zip || true
          unzip -q -o boot-app-gradle.zip -d boot-app-gradle || true
          # ÎèôÏùº HelloController
          mkdir -p "boot-app-gradle/src/main/java/${PKG//.//}/controller"
          cat > "boot-app-gradle/src/main/java/${PKG//.//}/controller/HelloController.java" <<EOF
          package ${PKG}.controller;
          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RestController;
          @RestController
          public class HelloController {
            @GetMapping("/hello") public String hello(){ return "hello-gradle"; }
          }
          EOF
          # Testcontainers Ïä§ÌÖÅÏùÄ ÏùòÏ°¥Îßå Ï∂îÍ∞Ä(Gradle)
          sed -i '/dependencies {/a \ \ \ \ testImplementation("org.testcontainers:junit-jupiter:1.19.7")\n\ \ \ \ testImplementation("org.testcontainers:testcontainers:1.19.7")' boot-app-gradle/build.gradle || true
        continue-on-error: true

      - name: üèóÔ∏è Build Boot(Gradle) (wrapper)
        working-directory: boot-app-gradle
        run: |
          set -o pipefail
          chmod +x ./gradlew || true
          ./gradlew -q -Dorg.gradle.jvmargs="-Xmx1g" -x test build || true
          ls -al build/libs || true
        continue-on-error: true

      # ‚îÄ‚îÄ Docker Ïù¥ÎØ∏ÏßÄ(Î©ÄÌã∞Ïä§ÌÖåÏù¥ÏßÄ, JDKÎ≥Ñ Î≤†Ïù¥Ïä§ ÏûêÎèô ÏÑ†ÌÉù) ‚îÄ‚îÄ
      - name: üê≥ Setup QEMU/Buildx
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
        continue-on-error: true

      - uses: docker/setup-buildx-action@v3
        with:
          install: true
        continue-on-error: true

      - name: üê≥ Create Dockerfile (multi-stage, JDK=${{ matrix.java }})
        working-directory: boot-app
        run: |
          set -o pipefail
          J="${{ matrix.java }}"
          BUILDER="maven:3.9.9-eclipse-temurin-${J}"
          RUNTIME="eclipse-temurin:${J}-jre"
          cat > Dockerfile <<DOCKER
          FROM ${BUILDER} AS builder
          WORKDIR /workspace
          COPY pom.xml .
          COPY src ./src
          RUN --mount=type=cache,target=/root/.m2 mvn -q -DskipTests package

          FROM ${RUNTIME}
          WORKDIR /app
          COPY --from=builder /workspace/target/*.jar /app/app.jar
          EXPOSE 8080
          USER 1000
          ENTRYPOINT ["java","-jar","/app/app.jar"]
          DOCKER
          cat > .dockerignore <<'IGNORE'
          target/
          .git/
          .github/
          **/*.iml
          **/.DS_Store
          *.log
          IGNORE
          sed -n '1,160p' Dockerfile || true
        continue-on-error: true

      - name: üê≥ Prepare buildx cache
        run: |
          mkdir -p /tmp/.buildx-cache /tmp/.buildx-cache-new || true
        continue-on-error: true

      - name: üê≥ Build image (cached) - tag by JDK
        id: docker_build
        working-directory: boot-app
        env:
          IMG: ${{ env.BOOT_ARTIFACT }}:local-j${{ matrix.java }}
        run: |
          set -o pipefail
          docker buildx build --load -t "${IMG}" \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to   type=local,dest=/tmp/.buildx-cache-new,mode=max \
            .
          rm -rf /tmp/.buildx-cache || true
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
          echo "image=${IMG}" >> $GITHUB_OUTPUT
          docker images | head -n 20 || true
        continue-on-error: true

      - name: üê≥ Save image tar
        working-directory: ${{ github.workspace }}
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
        run: |
          mkdir -p artifacts || true
          docker save "${IMG}" -o artifacts/${IMG/:/_}.tar 2>/dev/null || true
        continue-on-error: true

      - name: üê≥ Run container (No-Stop)
        id: docker_run
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
          BASE: ${{ env.BASE_PORT }}
          J: ${{ matrix.java }}
        run: |
          set -o pipefail
          # JDK21Îäî Ìè¨Ìä∏ +1 (Ï∂©Îèå Î∞©ÏßÄ)
          PORT=$BASE
          if [ "$J" = "21" ]; then PORT=$((BASE+1)); fi
          NAME="boot-app-${J}-${GITHUB_RUN_ID}"
          echo "[echo] docker run --name ${NAME} -p ${PORT}:8080 ${IMG}"
          CID=$(docker run -d --name "${NAME}" -p "${PORT}:8080" "${IMG}" 2>/dev/null || true)
          echo "container_id=${CID}" >> $GITHUB_OUTPUT
          echo "container_name=${NAME}" >> $GITHUB_OUTPUT
          echo "PORT=${PORT}" >> $GITHUB_OUTPUT
          for i in $(seq 1 30); do
            sleep 2
            curl -fsS "http://localhost:${PORT}/actuator/health" && break || true
            curl -fsS "http://localhost:${PORT}/hello" && break || true
            echo "[echo] waiting app(${J})... ($i)"
          done
          curl -fsS "http://localhost:${PORT}/hello" || true
          docker logs --tail 200 "${NAME}" 2>/dev/null || true
        continue-on-error: true

      # ‚îÄ‚îÄ Echo ÎåÄÎüâ ÎîîÎ†âÌÜ†Î¶¨/ÌååÏùº & Í∂åÌïú ‚îÄ‚îÄ
      - name: üóÇÔ∏è Echo dirs/files & perms (mass)
        run: |
          ROOT="$GITHUB_WORKSPACE/echo-${{ matrix.java }}"
          mkdir -p "$ROOT"/{logs,bin,tmp,data/{a,b,c},conf,scripts,output} || true
          for i in $(seq 1 150); do
            echo "echo-j${{ matrix.java }}-$i $(date -u +%FT%TZ)" > "$ROOT/data/a/file_$i.txt"
          done
          chmod -R 777 "$ROOT" || true
          find "$ROOT" -type f | head -n 50 || true
        continue-on-error: true

      # ‚îÄ‚îÄ ÏïÑÌã∞Ìå©Ìä∏ ÏóÖÎ°úÎìú(Îß§Ìä∏Î¶≠Ïä§Î≥Ñ Î∂ÑÎ¶¨Î™Ö) ‚îÄ‚îÄ
      - name: ‚¨ÜÔ∏è Upload artifacts (per JDK)
        uses: actions/upload-artifact@v4
        with:
          name: bundles-j${{ matrix.java }}
          path: |
            artifacts/*
            maven-sample/target/*.jar
            boot-app/target/*.jar
            boot-app/Dockerfile
            boot-app/.dockerignore
            boot-app-gradle/build/libs/*.jar
          if-no-files-found: warn
          retention-days: 7
        continue-on-error: true

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # 2) Î¶¥Î¶¨Ï¶à ÏûêÎèô ÏÉùÏÑ±(ÏïÑÌã∞Ìå©Ìä∏ Ï≤®Î∂Ä)
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  release:
    needs: [setup_base, build_matrix]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: üõí Checkout
        uses: actions/checkout@v4

      - name: ‚¨áÔ∏è Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts
        continue-on-error: true

      - name: üßæ List artifacts
        run: |
          set -o pipefail
          echo "== release_artifacts =="
          find release_artifacts -type f | sed 's/^/- /' || true
        continue-on-error: true

      - name: üöÄ Create GitHub Release (auto-tag)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: auto-${{ github.run_number }}
          name: "Auto Release #${{ github.run_number }}"
          draft: false
          prerelease: true
          files: |
            release_artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
