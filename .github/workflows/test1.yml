name: Test-Server + Spring Boot + Docker (Ultra Integrated - HyperHelp v3)

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      freedisk_profile:
        description: "FreeDisk ÌîÑÎ°úÌååÏùº (none|minimal|aggressive)"
        required: true
        default: "minimal"
      fast_compress:
        description: "pigz Î≥ëÎ†¨ ÏïïÏ∂ï ÏÇ¨Ïö© (true/false)"
        required: true
        default: "true"
      upgrade_os:
        description: "OS Ìå®ÌÇ§ÏßÄ ÏóÖÍ∑∏Î†àÏù¥Îìú (true/false)"
        required: true
        default: "false"
      maven_version:
        description: "Maven Î≤ÑÏ†Ñ(Ïòà: 3.9.9) ÎπÑÏö∞Î©¥ apt Í∏∞Î≥∏"
        required: false
        default: ""
      purge_apt_cache:
        description: "Apt Ï∫êÏãú/Î°úÍ∑∏ Ï†ïÎ¶¨ (true/false)"
        required: true
        default: "false"
      boot_artifact:
        description: "Spring Boot artifactId"
        required: false
        default: "demo-app"
      boot_dependencies:
        description: "Boot deps CSV (web,actuator,...)"
        required: false
        default: "web,actuator"
      container_port_host:
        description: "Ìò∏Ïä§Ìä∏ Ìè¨Ìä∏(Í∏∞Î≥∏ 18080; JDK21Îäî +1)"
        required: false
        default: "18080"
      release_prerelease:
        description: "Î¶¥Î¶¨Ïä§Î•º ÌîÑÎ¶¨Î¶¥Î¶¨Ïä§Î°ú ÌëúÏãú (true/false)"
        required: true
        default: "true"
      extras_json:
        description: >-
          ÏÑ§Ïπò ÌÜ†Í∏Ä JSON. Ïòà)
          {"container_toolchain":true,"k8s_toolchain":true,"security_tools":true,
           "obs_tools":true,"db_images":true,"db_clis":true,
           "build_runtimes":true,"release_utils":true,"docs_tools":true}
        required: false
        default: '{"container_toolchain":true,"k8s_toolchain":true,"security_tools":true,"obs_tools":true,"db_images":true,"db_clis":true,"build_runtimes":true,"release_utils":true,"docs_tools":true}'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: test-server-ultra-${{ github.ref }}
  cancel-in-progress: true

env:
  BOOT_GROUP: com.example
  DEFAULT_EXTRAS_JSON: >-
    {"container_toolchain":true,"k8s_toolchain":true,"security_tools":true,
     "obs_tools":true,"db_images":true,"db_clis":true,
     "build_runtimes":true,"release_utils":true,"docs_tools":true}

jobs:
  setup_base:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true
    outputs:
      artifact: ${{ steps.cfg.outputs.artifact }}
      deps: ${{ steps.cfg.outputs.deps }}
      base_port: ${{ steps.cfg.outputs.base_port }}
    steps:
      - name: üõí Checkout
        uses: actions/checkout@v4
        continue-on-error: true

      # === prepare helpers (explicit; no YAML anchors) ===
      - name: üìÅ Ensure dirs & env
        run: |
          set -Eeuo pipefail
          mkdir -p "$GITHUB_WORKSPACE/.github/helpers" "$GITHUB_WORKSPACE/.manuals" artifacts || true
          {
            echo "HELPERS=$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh"
            echo "HELPLOG_FAILS=$GITHUB_WORKSPACE/.github/helpers/_fails.log"
            echo "HELPLOG_HELP=$GITHUB_WORKSPACE/.github/helpers/_help.log"
          } >> "$GITHUB_ENV"

      - name: üß∞ Write helper library (no heredoc)
        run: |
          set -Eeuo pipefail
          H="$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh"
          {
            printf '%s\n' '#!/usr/bin/env bash'
            printf '%s\n' 'set -Eeo pipefail'
            printf '%s\n' ': "${ECHO_FAILS:=${HELPLOG_FAILS:-/tmp/_fails.log}}"'
            printf '%s\n' ': "${ECHO_HELP:=${HELPLOG_HELP:-/tmp/_help.log}}"'
            printf '%s\n' 'note(){ printf "::notice::%s\n" "$*"; }'
            printf '%s\n' 'warn(){ printf "::warning::%s\n" "$*"; }'
            printf '%s\n' 'err (){ printf "::error::%s\n"   "$*"; }'
            printf '%s\n' 'record_fail(){ local code="$1"; local stage="$2"; shift 2 || true; local detail="$*"; printf "%s|%s|%s\n" "$code" "$stage" "$detail" >> "$ECHO_FAILS"; help_topic "$code" "$stage" "$detail" >> "$ECHO_HELP" || true; }'
            printf '%s\n' '_blk(){ printf "%b\n\n" "$1"; }'
            printf '%s\n' 'help_topic(){ local code="$1"; local stage="$2"; local detail="$3"; case "$code" in'
            printf '%s\n' '  JSON_INVALID)   _blk "[HELP] extras_json Î¨¥Ìö®\n- ÏõêÏù∏: Ïä§ÏºÄÏ§Ñ/Îπà Í∞í/ÌòïÏãù Ïò§Î•ò\n- Ï°∞Ïπò: Ïú†Ìö® JSON ÏûÖÎ†• ÎòêÎäî Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©(jq Î°ú Í≤ÄÏ¶ù)";;'
            printf '%s\n' '  DL_FAIL)        _blk "[HELP] Îã§Ïö¥Î°úÎìú Ïã§Ìå®\n- Ï†êÍ≤Ä: URL Ï†ëÍ∑º(curl -I), ÎÑ§Ìä∏ÏõåÌÅ¨/ÌîÑÎ°ùÏãú, Ïû¨ÏãúÎèÑ\n- ÎåÄÏ≤¥: Î¶¥Î¶¨Ïä§ ÏûêÏÇ∞/Ïª®ÌÖåÏù¥ÎÑà ÎûòÌçº";;'
            printf '%s\n' '  HEREDOC)        _blk "[HELP] Heredoc Ïò§Î•ò\n- Ï¢ÖÎ£å ÌÜ†ÌÅ∞ Ï§Ñ ÏãúÏûë Î∞∞Ïπò, ÌÜ†ÌÅ∞ ÏùºÏπò";;'
            printf '%s\n' '  GH_UPLOAD_0B)   _blk "[HELP] GH Release 400 Content-Length\n- 0Î∞îÏù¥Ìä∏ Ï†úÏô∏(find -size +0c), ÏÇ∞Ï∂úÎ¨º ÌôïÏù∏";;'
            printf '%s\n' '  GH_AUTH)        _blk "[HELP] GH CLI Ïù∏Ï¶ù/Í∂åÌïú\n- GH_TOKEN(contents:write), gh auth status";;'
            printf '%s\n' '  DOCKER_DAEMON)  _blk "[HELP] Docker Îç∞Î™¨/Í∂åÌïú\n- docker info/version, rootless/Í∂åÌïú Ï†êÍ≤Ä";;'
            printf '%s\n' '  DOCKER_BUILD)   _blk "[HELP] Docker ÎπåÎìú Ïã§Ìå®\n- Dockerfile/COPY Í≤ΩÎ°ú, Ï∫êÏãú Í∂åÌïú, Î≤†Ïù¥Ïä§ ÌÉúÍ∑∏";;'
            printf '%s\n' '  CONTAINER_HEALTH) _blk "[HELP] Ïª®ÌÖåÏù¥ÎÑà Ìó¨Ïä§ Ïã§Ìå®\n- Ìè¨Ìä∏ Ï∂©Îèå, logs, actuator/health, ÎåÄÍ∏∞ÌôïÎåÄ";;'
            printf '%s\n' '  MVN_BUILD)      _blk "[HELP] Maven ÎπåÎìú Ïã§Ìå®\n- JDK/Î¶¥Î¶¨Ï¶à Ìò∏Ìôò, ÌîÑÎ°ùÏãú, Ï†ÄÏû•ÏÜå Ïû¨ÏãúÎèÑ";;'
            printf '%s\n' '  GRADLE_BUILD)   _blk "[HELP] Gradle ÎπåÎìú Ïã§Ìå®\n- gradlew Í∂åÌïú, -Xmx, ÌîåÎü¨Í∑∏Ïù∏ Ï†ëÍ∑º";;'
            printf '%s\n' '  APT_LOCK)       _blk "[HELP] apt ÎùΩ/Ï∂©Îèå\n- dpkg --configure -a, apt-get -f install, Ï∫êÏãú Ïû¨ÏÉùÏÑ±";;'
            printf '%s\n' '  DISK_FULL)      _blk "[HELP] ÎîîÏä§ÌÅ¨ Î∂ÄÏ°±\n- FreeDisk ÏÉÅÌñ•, Î°úÍ∑∏/Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨, Ï∫êÏãú Ï†úÍ±∞";;'
            printf '%s\n' '  START_SPRING)   _blk "[HELP] Spring Initializr Ïã§Ìå®\n- ÎÑ§Ìä∏ÏõåÌÅ¨/ÌîÑÎ°ùÏãú, ÏàòÎèô ZIP Ïª§Î∞ã";;'
            printf '%s\n' '  K8S_CLI)        _blk "[HELP] K8s/Cloud CLI Ïã§Ìå®\n- GPG/ÌÇ§ÎßÅ/Î¶¨Ìè¨ ÏÑ§Ï†ï, Î∞îÏù¥ÎÑàÎ¶¨ ÏßÅÏ†ë Îã§Ïö¥Î°úÎìú";;'
            printf '%s\n' '  *)              _blk "[HELP] ÏùºÎ∞ò Ïò§Î•ò(${code})@${stage}\n- ÏÉÅÏÑ∏: ${detail}\n- Í≥µÌÜµ: ÎÑ§Ìä∏ÏõåÌÅ¨/Í∂åÌïú/Í≤ΩÎ°ú/ÌÉúÍ∑∏/Ïö©Îüâ";;'
            printf '%s\n' 'esac; }'
            printf '%s\n' 'show_help_summary(){ if [ -s "$ECHO_FAILS" ]; then echo "====== üÜò Failure Summary ======"; nl -ba "$ECHO_FAILS"; echo; echo "====== üìñ Help Manual (merged) ======"; awk '"'"'BEGIN{RS="";ORS="\n\n"}1'"'"' "$ECHO_HELP" || cat "$ECHO_HELP"; else note "No failures recorded. Help summary skipped."; fi; }'
          } > "$H"
          chmod +x "$H"
          echo "HELPERS=$H" >> "$GITHUB_ENV"
          head -n 5 "$H" || true

      - name: üìö Download reference manuals (best-effort)
        timeout-minutes: 3
        run: |
          set -Eeuo pipefail
          M="$GITHUB_WORKSPACE/.manuals"
          mkdir -p "$M"
          curl -fsSL https://www.gnu.org/software/bash/manual/bash.html           -o "$M/bash-manual.html" || true
          curl -fsSL https://man7.org/linux/man-pages/man1/curl.1.html           -o "$M/curl.html" || true
          curl -fsSL https://docs.github.com/en/rest/releases/releases           -o "$M/github-releases.html" || true
          curl -fsSL https://docs.docker.com/engine/reference/commandline/cli/   -o "$M/docker-cli.html" || true
          curl -fsSL https://maven.apache.org/guides/mini/guide-building.html    -o "$M/maven-build.html" || true
          curl -fsSL https://docs.gradle.org/current/userguide/userguide.html    -o "$M/gradle-userguide.html" || true
          curl -fsSL https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html -o "$M/spring-boot-actuator.html" || true
          curl -fsSL https://wiki.debian.org/Teams/Apt                          -o "$M/apt.html" || true

      # === end prepare helpers ===

      - name: üîß Config
        id: cfg
        run: |
          set -Eeuo pipefail
          source "$HELPERS"
          CURRENT_STAGE="config"
          ART="${{ inputs.boot_artifact }}";     [ -z "$ART" ] && ART="demo-app"
          DEPS="${{ inputs.boot_dependencies }}";[ -z "$DEPS" ] && DEPS="web,actuator"
          PORT="${{ inputs.container_port_host }}"; [ -z "$PORT" ] && PORT="18080"
          {
            echo "artifact=$ART"
            echo "deps=$DEPS"
            echo "base_port=$PORT"
          } >> "$GITHUB_OUTPUT" || record_fail JSON_INVALID "$CURRENT_STAGE" "outputs write"

      - name: üîé Runner Info
        timeout-minutes: 2
        run: |
          source "$HELPERS"
          CURRENT_STAGE="runner-info"
          uname -a || warn "uname failed"
          nproc || warn "nproc failed"
          free -h || warn "free failed"
          df -h || warn "df failed"
          docker version || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "docker version"
          docker info    || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "docker info"

      - name: üì¶ Reserve fast disk (5G)
        timeout-minutes: 1
        run: |
          source "$HELPERS"
          CURRENT_STAGE="reserve-disk"
          mkdir -p .github/workflows || true
          if ! sudo fallocate -l 5G .github/workflows/.reserve_space; then
            record_fail DISK_FULL "$CURRENT_STAGE" "fallocate 5G Ïã§Ìå®"
          fi
          sudo chmod 666 .github/workflows/.reserve_space || true
          du -h .github/workflows/.reserve_space || true
          df -h || true

      - name: üõ†Ô∏è numfmt shim (-4 Î¨¥Ïãú, anti-recursion)
        timeout-minutes: 2
        run: |
          set -Eeuo pipefail
          source "$HELPERS"
          CURRENT_STAGE="numfmt-shim"
          sudo apt-get -o Acquire::Retries=3 -o Acquire::http::Timeout=15 update -y || record_fail APT_LOCK "$CURRENT_STAGE" "apt update"
          sudo apt-get install -y coreutils jq unzip curl git || record_fail APT_LOCK "$CURRENT_STAGE" "apt install coreutils/jq"
          sudo mkdir -p /usr/local/bin
          TMP="$(mktemp)"
          {
            printf '%s\n' '#!/usr/bin/env bash'
            printf '%s\n' 'set -euo pipefail'
            printf '%s\n' 'REAL="/usr/bin/numfmt"'
            printf '%s\n' 'if [ ! -x "$REAL" ]; then echo "numfmt not found at $REAL" >&2; exit 127; fi'
            printf '%s\n' 'args=(); for a in "$@"; do [ "$a" = "-4" ] && continue; args+=("$a"); done'
            printf '%s\n' 'exec "$REAL" "${args[@]}"'
          } > "$TMP"
          sudo mv "$TMP" /usr/local/bin/numfmt && sudo chmod +x /usr/local/bin/numfmt
          command -v -a numfmt || true
          /usr/local/bin/numfmt -4 --to=iec 1024 || true

      - name: üßπ Free up disk (profiled)
        uses: jlumbroso/free-disk-space@main
        with:
          android:        ${{ inputs.freedisk_profile == 'aggressive' }}
          dotnet:         ${{ inputs.freedisk_profile == 'aggressive' }}
          haskell:        ${{ inputs.freedisk_profile == 'aggressive' }}
          large-packages: ${{ inputs.freedisk_profile == 'aggressive' }}
          docker-images:  ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          tool-cache:     ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          swap-storage:   ${{ inputs.freedisk_profile == 'aggressive' }}

      - name: ‚¨ÜÔ∏è Upgrade OS (opt)
        if: ${{ inputs.upgrade_os == 'true' }}
        timeout-minutes: 7
        run: |
          source "$HELPERS"
          CURRENT_STAGE="apt-upgrade"
          sudo apt-get -o Acquire::Retries=3 update -y || record_fail APT_LOCK "$CURRENT_STAGE" "apt update"
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade || record_fail APT_LOCK "$CURRENT_STAGE" "apt upgrade"
          sudo dpkg --configure -a || true
          sudo apt-get -f install || true

      - name: üßØ Purge apt cache&logs (opt)
        if: ${{ inputs.purge_apt_cache == 'true' }}
        timeout-minutes: 2
        run: |
          source "$HELPERS"
          CURRENT_STAGE="apt-purge"
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo journalctl --vacuum-time=1s || true
          sudo find /var/log -type f -name "*.gz" -delete || true
          sudo find /var/log -type f -name "*.1" -delete || true
          df -h || true

      - name: üß© Install Extras by JSON toggles (with Help)
        env:
          RAW_EXTRAS_JSON: ${{ inputs.extras_json }}
        timeout-minutes: 15
        run: |
          source "$HELPERS"
          CURRENT_STAGE="extras"
          set -Eeuo pipefail
          sudo apt-get -o Acquire::Retries=3 update -y || record_fail APT_LOCK "$CURRENT_STAGE" "apt update"
          sudo apt-get install -y jq unzip tar zstd pigz aria2 p7zip-full git-lfs gh curl ca-certificates gnupg || record_fail APT_LOCK "$CURRENT_STAGE" "apt install extras"
          git lfs install || true
          EXTRAS_JSON="${RAW_EXTRAS_JSON:-}"
          if ! printf '%s' "${EXTRAS_JSON}" | jq -e . >/dev/null 2>&1; then
            note "extras_json invalid ‚Üí DEFAULT_EXTRAS_JSON ÏÇ¨Ïö©"
            EXTRAS_JSON='${{ env.DEFAULT_EXTRAS_JSON }}'
            record_fail JSON_INVALID "$CURRENT_STAGE" "fallback to DEFAULT_EXTRAS_JSON"
          fi
          note "[extras] completed ok"

      - name: üÜò Help Manual (always)
        if: always()
        run: |
          source "$HELPERS" 2>/dev/null || true
          type show_help_summary >/dev/null 2>&1 && show_help_summary || echo "No helper"

  build_matrix:
    needs: setup_base
    runs-on: ubuntu-latest
    timeout-minutes: 40
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        java: ['17','21']
    env:
      BOOT_ARTIFACT: ${{ needs.setup_base.outputs.artifact }}
      BOOT_DEPS: ${{ needs.setup_base.outputs.deps }}
      BASE_PORT: ${{ needs.setup_base.outputs.base_port }}
      BOOT_GROUP: com.example
    steps:
      - name: üõí Checkout
        uses: actions/checkout@v4

      # === prepare helpers again ===
      - name: üìÅ Ensure dirs & env
        run: |
          set -Eeuo pipefail
          mkdir -p "$GITHUB_WORKSPACE/.github/helpers" "$GITHUB_WORKSPACE/.manuals" artifacts || true
          {
            echo "HELPERS=$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh"
            echo "HELPLOG_FAILS=$GITHUB_WORKSPACE/.github/helpers/_fails.log"
            echo "HELPLOG_HELP=$GITHUB_WORKSPACE/.github/helpers/_help.log"
          } >> "$GITHUB_ENV"

      - name: üß∞ Write helper library (no heredoc)
        run: |
          set -Eeuo pipefail
          H="$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh"
          test -f "$H" || { echo "helper missing from previous job; creating"; }
          # (Í∞ÑÍ≤∞Ìôî) Ïù¥ÎØ∏ setup_baseÏóêÏÑú ÏÉùÏÑ±Îê®. Ïû¨ÏÇ¨Ïö©Îßå Î≥¥Ïû•.
          echo "HELPERS=$H" >> "$GITHUB_ENV"
          head -n 3 "$H" || true
      # === end prepare ===

      - name: ‚òï Setup Java (no cache yet)
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: üì¶ Install Maven (tarball if version set)
        timeout-minutes: 6
        run: |
          source "$HELPERS"
          CURRENT_STAGE="maven-install"
          VER="${{ inputs.maven_version }}"
          if [ -n "$VER" ]; then
            URL="https://archive.apache.org/dist/maven/maven-3/${VER}/binaries/apache-maven-${VER}-bin.tar.gz"
            TMPD="$(mktemp -d)"
            (cd "$TMPD" && curl -fsSL "$URL" -o maven.tgz && tar -xzf maven.tgz) || record_fail DL_FAIL "$CURRENT_STAGE" "maven tarball"
            sudo rm -rf /opt/maven || true; sudo mv "$TMPD/apache-maven-${VER}" /opt/maven || record_fail DOCKER_BUILD "$CURRENT_STAGE" "move /opt/maven"
            echo "/opt/maven/bin" >> "$GITHUB_PATH"
            rm -rf "$TMPD" || true
          else
            sudo apt-get -o Acquire::Retries=3 update -y || record_fail APT_LOCK "$CURRENT_STAGE" "apt update"
            sudo apt-get install -y maven unzip pigz || record_fail APT_LOCK "$CURRENT_STAGE" "apt install maven"
          fi
          mvn -v || record_fail MVN_BUILD "$CURRENT_STAGE" "mvn -v"

      - name: üå± Generate Boot (Maven) + Hello
        timeout-minutes: 4
        run: |
          source "$HELPERS"
          CURRENT_STAGE="boot-generate-maven"
          G="${{ env.BOOT_GROUP }}"; A="${{ env.BOOT_ARTIFACT }}"; D="${{ env.BOOT_DEPS }}"; J="${{ matrix.java }}"
          PKG="${G}.${A//-/.}"
          mkdir -p boot-app || true
          curl -fsSL -G https://start.spring.io/starter.zip \
            --data-urlencode "type=maven-project" \
            --data-urlencode "language=java" \
            --data-urlencode "groupId=$G" \
            --data-urlencode "artifactId=$A" \
            --data-urlencode "name=$A" \
            --data-urlencode "packageName=$PKG" \
            --data-urlencode "dependencies=$D" \
            --data-urlencode "javaVersion=$J" \
            --data-urlencode "packaging=jar" \
            -o boot-app.zip || record_fail START_SPRING "$CURRENT_STAGE" "download starter.zip"
          unzip -q -o boot-app.zip -d boot-app || record_fail START_SPRING "$CURRENT_STAGE" "unzip starter"
          mkdir -p "boot-app/src/main/java/${PKG//.//}/controller"
          printf '%s\n' "package ${PKG}.controller; import org.springframework.web.bind.annotation.*; @RestController public class HelloController{@GetMapping(\"/hello\") public String hello(){return \"hello\";}}" > "boot-app/src/main/java/${PKG//.//}/controller/HelloController.java"
          mkdir -p boot-app/src/main/resources && printf '%s\n' "server.port=8080" "management.endpoints.web.exposure.include=*" >> boot-app/src/main/resources/application.properties

      - name: ‚òï Enable Maven cache
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven

      - name: üèóÔ∏è Build Boot (Maven)
        timeout-minutes: 8
        working-directory: boot-app
        run: |
          source "$HELPERS"
          CURRENT_STAGE="boot-build-maven"
          if [ -x "./mvnw" ]; then ./mvnw -q -T 1C -DskipTests package || record_fail MVN_BUILD "$CURRENT_STAGE" "mvnw package"
          else mvn -q -T 1C -DskipTests package || record_fail MVN_BUILD "$CURRENT_STAGE" "mvn package"
          fi
          ls -al target || true

      - name: üê≥ Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: üê≥ Create Dockerfile (JDK=${{ matrix.java }})
        timeout-minutes: 1
        working-directory: boot-app
        run: |
          J="${{ matrix.java }}"
          BUILDER="maven:3.9.9-eclipse-temurin-${J}"
          RUNTIME="eclipse-temurin:${J}-jre"
          {
            printf 'FROM %s AS builder\n' "$BUILDER"
            printf 'WORKDIR /workspace\nCOPY pom.xml .\nCOPY src ./src\n'
            printf 'RUN --mount=type=cache,target=/root/.m2 mvn -q -DskipTests package\n'
            printf 'FROM %s\nWORKDIR /app\nCOPY --from=builder /workspace/target/*.jar /app/app.jar\n' "$RUNTIME"
            printf 'EXPOSE 8080\nUSER 1000\nENTRYPOINT ["java","-jar","/app/app.jar"]\n'
          } > Dockerfile
          printf "target/\n.git/\n.github/\n**/*.iml\n**/.DS_Store\n*.log\n" > .dockerignore

      - name: üê≥ Build image (cached) - tag by JDK
        id: docker_build
        timeout-minutes: 12
        working-directory: boot-app
        env:
          IMG: ${{ env.BOOT_ARTIFACT }}:local-j${{ matrix.java }}
        run: |
          source "$HELPERS"
          CURRENT_STAGE="docker-build"
          mkdir -p /tmp/.buildx-cache-${{ matrix.java }} /tmp/.buildx-cache-new-${{ matrix.java }} || true
          docker buildx build --load -t "${IMG}" \
            --cache-from type=local,src=/tmp/.buildx-cache-${{ matrix.java }} \
            --cache-to   type=local,dest=/tmp/.buildx-cache-new-${{ matrix.java }},mode=max \
            . || record_fail DOCKER_BUILD "$CURRENT_STAGE" "buildx"
          rm -rf /tmp/.buildx-cache-${{ matrix.java }} || true
          mv /tmp/.buildx-cache-new-${{ matrix.java }} /tmp/.buildx-cache-${{ matrix.java }} || true
          echo "image=${IMG}" >> "$GITHUB_OUTPUT" || true
          docker images | head -n 20 || true

      - name: üê≥ Save image tar
        timeout-minutes: 3
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
        run: |
          source "$HELPERS"
          CURRENT_STAGE="docker-save"
          mkdir -p artifacts
          docker save "${IMG}" -o "artifacts/${IMG/:/_}.tar" 2>/dev/null || record_fail DOCKER_BUILD "$CURRENT_STAGE" "docker save"

      - name: üê≥ Run container (No-Stop)
        id: docker_run
        timeout-minutes: 6
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
          BASE: ${{ env.BASE_PORT }}
          J: ${{ matrix.java }}
        run: |
          source "$HELPERS"
          CURRENT_STAGE="docker-run"
          PORT=$BASE; [ "$J" = "21" ] && PORT=$((BASE+1))
          NAME="boot-app-${J}-${GITHUB_RUN_ID}"
          docker run -d --name "${NAME}" -p "${PORT}:8080" "${IMG}" || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "docker run"
          echo "container_name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "PORT=${PORT}" >> "$GITHUB_OUTPUT"
          for i in $(seq 1 30); do
            sleep 2
            if (curl -fsS "http://localhost:${PORT}/actuator/health" || curl -fsS "http://localhost:${PORT}/hello"); then
              echo "app ready on ${PORT}"
              break
            fi
            echo "[echo] waiting app(${J})... ($i)"
            [ "$i" -eq 30 ] && record_fail CONTAINER_HEALTH "$CURRENT_STAGE" "no response on ${PORT}"
          done
          docker logs --tail 120 "${NAME}" 2>/dev/null || true

      - name: ‚¨ÜÔ∏è Upload artifacts (per JDK)
        uses: actions/upload-artifact@v4
        with:
          name: bundles-j${{ matrix.java }}
          path: |
            artifacts/*
            boot-app/target/*.jar
            boot-app/Dockerfile
            boot-app/.dockerignore
          if-no-files-found: warn
          retention-days: 7

      - name: üÜò Help Manual (always)
        if: always()
        run: |
          source "$HELPERS" 2>/dev/null || true
          type show_help_summary >/dev/null 2>&1 && show_help_summary || echo "No helper"

  release:
    needs: [setup_base, build_matrix]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: false
    steps:
      - name: ‚¨áÔ∏è Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      # prepare helpers (short)
      - name: üìÅ Ensure dirs & env
        run: |
          mkdir -p "$GITHUB_WORKSPACE/.github/helpers" "$GITHUB_WORKSPACE/.manuals" || true
          echo "HELPERS=$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh" >> "$GITHUB_ENV"
      - name: üß∞ Touch helpers if missing
        run: |
          H="$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh"
          test -f "$H" || printf '#!/usr/bin/env bash\nnote(){ printf "::notice::%s\n" "$*"; }\nshow_help_summary(){ :; }' > "$H"
          chmod +x "$H"

      - name: üßæ List artifacts
        run: |
          source "$HELPERS"
          find release_artifacts -type f -printf "%p (%s bytes)\n" || true

      - name: üß∞ Normalize & de-duplicate ‚Üí release-bundle/
        run: |
          source "$HELPERS"
          CURRENT_STAGE="bundle"
          set -Eeuo pipefail
          mkdir -p release-bundle
          declare -A seen=()
          while IFS= read -r -d '' f; do
            base="$(basename "$f")"; ext="${base##*.}"; stem="${base%.*}"; sfx=""
            case "$f" in *bundles-j17/*) sfx="${sfx:+$sfx-}j17";; *bundles-j21/*) sfx="${sfx:+$sfx-}j21";; esac
            case "$f" in */boot-app/*) sfx="${sfx:+$sfx-}maven";; esac
            out="${base}"; [ -n "$sfx" ] && out="${stem}-${sfx}.${ext}"
            key="$out"
            if [[ -n "${seen[$key]:-}" ]]; then cnt="${seen[$key]}"; seen["$key"]=$((cnt+1)); out="${stem}-${sfx:+$sfx-}dup$((cnt+1)).${ext}"; else seen["$key"]=1; fi
            cp -f "$f" "release-bundle/$out" || echo "::warning::copy failed: $f"
          done < <(find release_artifacts -type f -print0)
          (cd release-bundle && ls -al) || true

      - name: üöÄ Create/Update Release with GH CLI (skip 0B, per-file upload)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: ${{ inputs.release_prerelease }}
        run: |
          source "$HELPERS"
          CURRENT_STAGE="release"
          set -Eeuo pipefail
          TAG="auto-${{ github.run_number }}"
          TITLE="Auto Release #${{ github.run_number }}"
          REPO="${{ github.repository }}"
          if ! gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            if [ "${PRERELEASE}" = "true" ]; then
              gh release create "$TAG" --title "$TITLE" --notes "" --prerelease --repo "$REPO"
            else
              gh release create "$TAG" --title "$TITLE" --notes "" --repo "$REPO"
            fi
          fi
          mapfile -d '' FILES < <(find release-bundle -type f -size +0c -print0)
          if [ "${#FILES[@]}" -eq 0 ]; then
            echo "::error::no non-empty files"; exit 1
          fi
          for f in "${FILES[@]}"; do
            for n in 1 2 3; do
              if gh release upload "$TAG" "$f" --clobber --repo "$REPO"; then
                echo "uploaded: $f"; break
              else
                echo "::warning::upload failed ($n/3) for $f; retrying..."
                sleep 2
                [ "$n" -eq 3 ] && echo "::error::upload failed $f"
              fi
            done
          done

      - name: ‚¨ÜÔ∏è Upload manuals bundle
        uses: actions/upload-artifact@v4
        with:
          name: manuals
          path: .manuals/*
          if-no-files-found: ignore
          retention-days: 7

      - name: üÜò Help Manual (always)
        if: always()
        run: |
          source "$HELPERS" 2>/dev/null || true
          type show_help_summary >/dev/null 2>&1 && show_help_summary || echo "No helper"

  promote_to_prod:
    needs: [setup_base, build_matrix]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
      - name: ‚¨áÔ∏è Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: stage_artifacts

      # mini-prepare
      - name: üìÅ Ensure dirs & env
        run: |
          mkdir -p "$GITHUB_WORKSPACE/.github/helpers" || true
          echo "HELPERS=$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh" >> "$GITHUB_ENV"
      - name: üß∞ Touch helpers if missing
        run: |
          H="$GITHUB_WORKSPACE/.github/helpers/echo_helpers.sh"
          test -f "$H" || printf '#!/usr/bin/env bash\nshow_help_summary(){ :; }\n' > "$H"
          chmod +x "$H"

      - name: üì¶ Promote artifacts ‚Üí prod (rename/retag tar)
        run: |
          source "$HELPERS"
          CURRENT_STAGE="promote"
          mkdir -p prod_artifacts
          find stage_artifacts -type f -name "*.tar" -print0 | while IFS= read -r -d '' f; do
            base="$(basename "$f")"; prod="${base/local/prod}"
            cp -f "$f" "prod_artifacts/${prod}" || echo "::warning::copy tar failed $f"
          done
          find stage_artifacts -type f \( -name "*.jar" -o -name "*.tgz" \) -print0 | while IFS= read -r -d '' f; do
            cp -f "$f" "prod_artifacts/$(basename "$f")" || echo "::warning::copy pkg failed $f"
          done
          ls -al prod_artifacts || true

      - name: ‚¨ÜÔ∏è Upload prod bundle
        uses: actions/upload-artifact@v4
        with:
          name: prod-bundles
          path: prod_artifacts/*
          if-no-files-found: warn
          retention-days: 14

      - name: üõí Checkout (for PR)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: üìù Create a PROD workflow copy (PR)
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/test1-prod.yml <<'YML'
          name: PROD Runner (wrapper)
          on: { workflow_dispatch: {} }
          jobs:
            info:
              runs-on: ubuntu-latest
              steps:
                - run: echo "This is a placeholder PROD workflow. It exists as a copy for ops traceability."
          YML

      - name: üîÅ Open PR for PROD workflow copy (hardened)
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(prod): add prod workflow copy & promote bundles"
          title: "chore(prod): add prod workflow copy & promote bundles"
          body: |
            ÏûêÎèô ÏÉùÏÑ±Îêú PROD ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÎûòÌçº Î∞è ÌîÑÎ°úÎ™®ÏÖò Î≤àÎì§ ÏóÖÎ°úÎìú.
            - test1-prod.yml Ï∂îÍ∞Ä(Ïö¥ÏòÅ Ï∂îÏ†ÅÏö©)
            - ÏïÑÌã∞Ìå©Ìä∏(prod-bundles) Ìè¨Ìï®
          branch: promote/prod-${{ github.run_id }}
          delete-branch: true
          author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          committer: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

      - name: üÜò Help Manual (always)
        if: always()
        run: |
          source "$HELPERS" 2>/dev/null || true
          type show_help_summary >/dev/null 2>&1 && show_help_summary || echo "No helper"
