name: Test-Server Setup (Fast Disk, Upgrades, Error-Tolerant)

on:
  workflow_dispatch:
    inputs:
      freedisk_profile:
        description: "FreeDisk 프로파일 (none|minimal|aggressive)"
        required: true
        default: "minimal"
      lowdisk_mode:
        description: "저용량 디스크 시뮬 (off|tmpfs|loop)"
        required: true
        default: "tmpfs"
      fast_compress:
        description: "pigz 병렬 압축 사용 (true/false)"
        required: true
        default: "true"
      upgrade_os:
        description: "OS 패키지 업그레이드 실행 (true/false)"
        required: true
        default: "false"
      java_version:
        description: "설치/사용할 JDK 버전 (예: 17, 21)"
        required: false
        default: "17"
      maven_version:
        description: "설치할 Maven 버전 (예: 3.9.9). 비우면 apt 기본 사용"
        required: false
        default: ""
      purge_apt_cache:
        description: "Apt 캐시/로그 정리 (true/false)"
        required: true
        default: "false"

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    continue-on-error: true  # ✅ 테스트 서버 감성: 실패해도 다음 단계 진행

    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: 📊 Show initial df/ip
        run: |
          set -o pipefail
          echo "== df -h ==" && df -h || true
          echo "== ip a (head) ==" && ip a || true
        continue-on-error: true

      # ✅ jlumbroso/free-disk-space: 지원 입력만 사용 (codeql 없음)
      - name: 🧹 Free up disk space (profiled)
        uses: jlumbroso/free-disk-space@main
        with:
          android:        ${{ inputs.freedisk_profile == 'aggressive' }}
          dotnet:         ${{ inputs.freedisk_profile == 'aggressive' }}
          haskell:        ${{ inputs.freedisk_profile == 'aggressive' }}
          large-packages: ${{ inputs.freedisk_profile == 'aggressive' }}
          docker-images:  ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          tool-cache:     ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          swap-storage:   ${{ inputs.freedisk_profile == 'aggressive' }}
        continue-on-error: true

      - name: 📊 df after cleanup
        run: df -h || true
        continue-on-error: true

      # 선택: OS 업그레이드 (안전 모드)
      - name: ⬆️ Upgrade OS packages (safe)
        if: ${{ inputs.upgrade_os == 'true' }}
        run: |
          set -o pipefail
          sudo apt-get update -y || true
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade || true
          sudo dpkg --configure -a || true
          sudo apt-get -f install || true
          df -h || true
        continue-on-error: true

      # 선택: apt 캐시/로그 정리
      - name: 🧯 Purge apt cache & logs
        if: ${{ inputs.purge_apt_cache == 'true' }}
        run: |
          set -o pipefail
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo journalctl --vacuum-time=1s || true
          sudo find /var/log -type f -name "*.gz" -delete || true
          sudo find /var/log -type f -name "*.1" -delete || true
          df -h || true
        continue-on-error: true

      # ⚡ 저용량 디스크 시뮬 (고속: tmpfs 기본 / loop 옵션)
      - name: ⚡ Low-disk simulate (tmpfs/loop/off)
        id: lowdisk
        run: |
          set -o pipefail
          MODE="${{ inputs.lowdisk_mode }}"
          echo "lowdisk_mode=$MODE"
          if [ -z "$MODE" ] || [ "$MODE" = "off" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ "$MODE" = "tmpfs" ]; then
            AVAIL_KB=$(awk '/MemAvailable/ {print $2}' /proc/meminfo 2>/dev/null || echo 0)
            SIZE_G=2; if [ "$AVAIL_KB" -gt $((8*1024*1024)) ]; then SIZE_G=4; fi
            MNT="/mnt/lowdisk"; sudo mkdir -p "$MNT" || true
            sudo mount -t tmpfs -o size=${SIZE_G}G,noatime,nodev,nosuid tmpfs "$MNT" || true
            sudo chmod 777 "$MNT" || true
            echo "mode=tmpfs" >> $GITHUB_OUTPUT
            echo "mnt=$MNT"  >> $GITHUB_OUTPUT
            df -h "$MNT" || true
            exit 0
          fi
          if [ "$MODE" = "loop" ]; then
            MNT="/mnt/lowdisk"; IMG="/mnt/tmp-pv.img"
            sudo mkdir -p "$MNT" || true
            AVAIL_GB=$(df --output=avail -BG /mnt | tail -1 | tr -dc '0-9' || echo 0)
            SIZE_GB=2; if [ "$AVAIL_GB" -ge 12 ]; then SIZE_GB=4; fi
            echo "Creating ${SIZE_GB}G loop image at $IMG (Avail=${AVAIL_GB}G)"
            sudo fallocate -l ${SIZE_GB}G "$IMG" 2>/dev/null || sudo truncate -s ${SIZE_GB}G "$IMG" || true
            sudo mkfs.ext4 -F -E lazy_itable_init=1,lazy_journal_init=1 -O ^has_journal "$IMG" || true
            sudo mount -o loop,noatime,nodiratime "$IMG" "$MNT" || true
            sudo chmod 777 "$MNT" || true
            echo "mode=loop" >> $GITHUB_OUTPUT
            echo "mnt=$MNT"  >> $GITHUB_OUTPUT
            echo "img=$IMG"  >> $GITHUB_OUTPUT
            df -h "$MNT" || true
            exit 0
          fi
          echo "skip=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      # (선택) CodeQL 수동 정리 가이드 스텝 — ⚠️ 실제 삭제는 주석 해제 시에만 수행
      - name: 🧼 Manual purge:CodeQL caches & DB (optional)
        run: |
          set -o pipefail
          # 필요 시 아래 줄 주석 해제
          # sudo rm -rf /opt/hostedtoolcache/codeql "$RUNNER_TEMP"/codeql* "$RUNNER_TEMP"/_github_home/codeql* ./.codeql ./codeql-db || true
          echo "CodeQL manual purge step (no action by default)."
        continue-on-error: true

      # 데모 디렉토리
      - name: 🧱 Prepare dirs (workspace + /opt demo)
        run: |
          set -o pipefail
          mkdir -p "$GITHUB_WORKSPACE/artifacts" || true
          sudo mkdir -p /opt/project/springboot/{src,logs,temp,server} || true
          sudo mkdir -p /opt/project/maven/{src,target,logs} || true
          echo "Simulated Spring Boot JAR" | sudo tee /opt/project/springboot/server/app.jar >/dev/null || true
          echo "Spring Boot Server Log"   | sudo tee /opt/project/springboot/logs/server.log >/dev/null || true
          echo "Maven Placeholder"        | sudo tee /opt/project/maven/src/Main.java >/dev/null || true
        continue-on-error: true

      # 자바 설치 (요청 버전)
      - name: ☕ Set up Java (no cache yet)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java_version }}
        continue-on-error: true

      # 메이븐 설치 (지정 버전 tarball or apt)
      - name: 📦 Install Maven (tarball if version set)
        run: |
          set -o pipefail
          VER="${{ inputs.maven_version }}"
          if [ -n "$VER" ]; then
            echo "Installing Apache Maven $VER (tarball)"
            URL="https://archive.apache.org/dist/maven/maven-3/${VER}/binaries/apache-maven-${VER}-bin.tar.gz"
            TMPD="$(mktemp -d)" || true
            (cd "$TMPD" && curl -fsSL "$URL" -o maven.tgz && tar -xzf maven.tgz) || true
            sudo rm -rf /opt/maven || true
            sudo mv "$TMPD/apache-maven-${VER}" /opt/maven || true
            echo "/opt/maven/bin" >> "$GITHUB_PATH"
            rm -rf "$TMPD" || true
          else
            echo "Installing Maven from apt"
            sudo apt-get update -y || true
            sudo apt-get install -y maven pigz || true
          fi
          mvn -v || true
        continue-on-error: true

      # 워크스페이스 내 Maven 샘플 생성
      - name: 🧪 Generate Maven sample (IN WORKSPACE)
        working-directory: ${{ github.workspace }}
        run: |
          set -o pipefail
          mvn -q archetype:generate \
            -DgroupId=com.example \
            -DartifactId=maven-sample \
            -DarchetypeArtifactId=maven-archetype-quickstart \
            -DarchetypeVersion=1.4 \
            -DinteractiveMode=false || true
          test -f "$GITHUB_WORKSPACE/maven-sample/pom.xml" || echo "⚠️ pom.xml 생성 확인 필요" || true
        continue-on-error: true

      # JDK 17/21 호환 POM 패치 (release 지정 + 최신 플러그인)
      - name: 🩹 Patch POM for modern JDK (set compiler release)
        working-directory: ${{ github.workspace }}/maven-sample
        run: |
          set -o pipefail
          JVER="${{ inputs.java_version }}"
          case "$JVER" in
            ""|"11"|"17"|"21") : ;;
            *) JVER="17" ;;
          esac
          cat > pom.xml <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>maven-sample</artifactId>
            <version>1.0.0</version>
            <name>maven-sample</name>
            <properties>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              <maven.compiler.release>__REPLACE_JAVA_RELEASE__</maven.compiler.release>
            </properties>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.11.0</version>
                  <configuration>
                    <release>${maven.compiler.release}</release>
                  </configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>3.2.5</version>
                </plugin>
              </plugins>
            </build>
            <dependencies>
              <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13.2</version>
                <scope>test</scope>
              </dependency>
            </dependencies>
          </project>
          EOF
          sed -i "s/__REPLACE_JAVA_RELEASE__/${JVER}/g" pom.xml || true
          echo "Patched POM with maven-compiler-plugin (release=${JVER})"
        continue-on-error: true

      # Maven 캐시 활성화(이제 워크스페이스에 pom.xml 존재)
      - name: ☕ Enable Maven cache (setup-java)
        if: ${{ hashFiles('maven-sample/pom.xml') != '' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java_version }}
          cache: 'maven'
          cache-dependency-path: |
            maven-sample/pom.xml
        continue-on-error: true

      - name: 🏗️ Build (maven-sample)
        working-directory: ${{ github.workspace }}/maven-sample
        run: |
          set -o pipefail
          mvn -q -DskipTests package || true
          ls -al target || true
        continue-on-error: true

      - name: 📦 Archive (fast) & Upload Artifacts
        run: |
          set -o pipefail
          mkdir -p "$GITHUB_WORKSPACE/artifacts" || true
          cp -f "$GITHUB_WORKSPACE/maven-sample/target/"*.jar "$GITHUB_WORKSPACE/artifacts/" 2>/dev/null || true
          if [ "${{ inputs.fast_compress }}" = "true" ]; then
            tar --use-compress-program=pigz -cf "$GITHUB_WORKSPACE/artifacts/maven-sample.tgz" -C "$GITHUB_WORKSPACE" maven-sample 2>/dev/null || true
          else
            tar -czf "$GITHUB_WORKSPACE/artifacts/maven-sample.tgz" -C "$GITHUB_WORKSPACE" maven-sample 2>/dev/null || true
          fi
        continue-on-error: true

      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-sample-build
          path: artifacts/*
          if-no-files-found: warn
          retention-days: 7
        continue-on-error: true

      - name: 📄 Summary
        run: |
          set -o pipefail
          echo "📄 DONE (Test-Server Mode)"
          echo "- freedisk_profile: ${{ inputs.freedisk_profile }}"
          echo "- lowdisk_mode: ${{ inputs.lowdisk_mode }}"
          echo "- java_version: ${{ inputs.java_version }}"
          echo "- maven_version: ${{ inputs.maven_version || 'apt-default' }}"
          if [ -n "${{ steps.lowdisk.outputs.mnt }}" ]; then
            echo "- lowdisk mount: ${{ steps.lowdisk.outputs.mnt }} (mode=${{ steps.lowdisk.outputs.mode }})"
          fi
          echo "== df -h ==" && df -h || true
        continue-on-error: true

      - name: 🧽 Post-cleanup (unmount & remove loopback/tmpfs)
        if: always()
        run: |
          set -o pipefail
          MODE="${{ steps.lowdisk.outputs.mode }}"
          if [ "$MODE" = "tmpfs" ] && [ -n "${{ steps.lowdisk.outputs.mnt }}" ]; then
            sudo umount "${{ steps.lowdisk.outputs.mnt }}" || true
          fi
          if [ "$MODE" = "loop" ]; then
            if [ -n "${{ steps.lowdisk.outputs.mnt }}" ] && mountpoint -q "${{ steps.lowdisk.outputs.mnt }}"; then
              sudo umount "${{ steps.lowdisk.outputs.mnt }}" || true
            fi
            if [ -n "${{ steps.lowdisk.outputs.img }}" ] && [ -f "${{ steps.lowdisk.outputs.img }}" ]; then
              sudo rm -f "${{ steps.lowdisk.outputs.img }}" || true
            fi
          fi
          echo "Cleanup done."
        continue-on-error: true
