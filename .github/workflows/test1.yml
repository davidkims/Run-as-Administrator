name: Test-Server + Spring Boot + Docker (Ultra Integrated - Hardened v2-help)

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      freedisk_profile:
        description: "FreeDisk 프로파일 (none|minimal|aggressive)"
        required: true
        default: "minimal"
      fast_compress:
        description: "pigz 병렬 압축 사용 (true/false)"
        required: true
        default: "true"
      upgrade_os:
        description: "OS 패키지 업그레이드 (true/false)"
        required: true
        default: "false"
      maven_version:
        description: "Maven 버전(예: 3.9.9) 비우면 apt 기본"
        required: false
        default: ""
      purge_apt_cache:
        description: "Apt 캐시/로그 정리 (true/false)"
        required: true
        default: "false"
      boot_artifact:
        description: "Spring Boot artifactId"
        required: false
        default: "demo-app"
      boot_dependencies:
        description: "Boot deps CSV (web,actuator,...)"
        required: false
        default: "web,actuator"
      container_port_host:
        description: "호스트 포트(기본 18080; JDK21는 +1)"
        required: false
        default: "18080"
      release_prerelease:
        description: "릴리스를 프리릴리스로 표시 (true/false)"
        required: true
        default: "true"
      extras_json:
        description: >-
          설치 토글 JSON. 예)
          {"container_toolchain":true,"k8s_toolchain":true,"security_tools":true,
           "obs_tools":true,"db_images":true,"db_clis":true,
           "build_runtimes":true,"release_utils":true,"docs_tools":true}
        required: false
        default: '{"container_toolchain":true,"k8s_toolchain":true,"security_tools":true,"obs_tools":true,"db_images":true,"db_clis":true,"build_runtimes":true,"release_utils":true,"docs_tools":true}'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: test-server-ultra-${{ github.ref }}
  cancel-in-progress: true

env:
  BOOT_GROUP: com.example
  DEFAULT_EXTRAS_JSON: >-
    {"container_toolchain":true,"k8s_toolchain":true,"security_tools":true,
     "obs_tools":true,"db_images":true,"db_clis":true,
     "build_runtimes":true,"release_utils":true,"docs_tools":true}

jobs:
  setup_base:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      artifact: ${{ steps.cfg.outputs.artifact }}
      deps: ${{ steps.cfg.outputs.deps }}
      base_port: ${{ steps.cfg.outputs.base_port }}
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: 🧰 Write helper library (Help/Manual)
        id: helper
        run: |
          cat > /tmp/echo_helpers.sh <<'EOSH'
          #!/usr/bin/env bash
          set -Eeo pipefail
          : "${ECHO_FAILS:=/tmp/_fails.log}"
          : "${ECHO_HELP:=/tmp/_help.log}"

          note(){ printf "::notice::%s\n" "$*"; }
          warn(){ printf "::warning::%s\n" "$*"; }
          err (){ printf "::error::%s\n"   "$*"; }

          record_fail(){  # code stage detail
            code="$1"; stage="$2"; shift 2 || true
            detail="$*"
            printf "%s|%s|%s\n" "$code" "$stage" "$detail" >> "$ECHO_FAILS"
            help_topic "$code" "$stage" "$detail" >> "$ECHO_HELP" || true
          }

          # ---- HELP MANUAL DISPATCHER ----
          help_topic(){ # code stage detail -> prints manual
            code="$1"; stage="$2"; detail="$3"
            case "$code" in
              JSON_INVALID)
                cat <<'EOF'
                [HELP] extras_json 무효(빈 값/형식 오류)
                - 원인: schedule 실행 또는 잘못된 JSON 문자열
                - 조치:
                  1) 워크플로우 수동 실행 시 extras_json을 유효한 JSON으로 입력
                  2) 비상 폴백(DEFAULT_EXTRAS_JSON)이 이미 적용되어 실행은 계속됨
                  3) jq 검증: echo '<json>' | jq .
                EOF
                ;;
              DL_FAIL)
                cat <<'EOF'
                [HELP] 파일 다운로드 실패
                - 공통 점검:
                  1) URL 접근 가능 여부(curl -I)
                  2) 네트워크 일시 장애 → 재시도
                  3) 프록시/방화벽 변수 확인(HTTP_PROXY/HTTPS_PROXY/NO_PROXY)
                - 대체:
                  * gh API 자산 경로로 우회 다운로드 또는 컨테이너 래퍼 사용
                EOF
                ;;
              HEREDOC)
                cat <<'EOF'
                [HELP] Here-Doc 구문 에러
                - 원인: 종료 토큰(EOF/SH) 누락/불일치
                - 조치:
                  1) <<'EOF' 로 감싸고 동일한 'EOF'로 닫기
                  2) 들여쓰기 없는 단독 라인에 종료 토큰 배치
                EOF
                ;;
              GH_UPLOAD_0B)
                cat <<'EOF'
                [HELP] GitHub Release 400 Bad Content-Length
                - 원인: 0바이트 파일 업로드 시도
                - 조치:
                  1) find -size +0c 로 비어있는 파일 제외 후 업로드
                  2) 생성 단계에서 산출물이 비어있지 않은지 확인
                EOF
                ;;
              GH_AUTH)
                cat <<'EOF'
                [HELP] GH CLI 인증/권한 문제
                - 점검:
                  1) GH_TOKEN(GITHUB_TOKEN) 권한: contents:write 필요
                  2) gh auth status
                EOF
                ;;
              DOCKER_DAEMON)
                cat <<'EOF'
                [HELP] Docker 데몬/권한 문제
                - 점검:
                  1) docker info / docker version 결과 확인
                  2) 런너 이미지 정책(프리빌리지) 확인
                - 우회:
                  * buildx --load 대신 --output type=oci 사용, 혹은 rootless 빌드 검토
                EOF
                ;;
              DOCKER_BUILD)
                cat <<'EOF'
                [HELP] Docker 빌드 실패
                - 점검:
                  1) Dockerfile 구문/경로(COPY 대상) 확인
                  2) 캐시 디렉토리 접근권한
                  3) 베이스 이미지 태그 존재 여부
                EOF
                ;;
              CONTAINER_HEALTH)
                cat <<'EOF'
                [HELP] 컨테이너 기동/헬스 체크 실패
                - 점검:
                  1) 포트 충돌 여부(해당 포트 리스닝 중인지)
                  2) 애플리케이션 로그 에러(docker logs)
                  3) /actuator/health 노출 여부와 server.port 설정
                - 임시 조치:
                  * 재시도 루프 증가 / 대기 시간 확대
                EOF
                ;;
              MVN_BUILD)
                cat <<'EOF'
                [HELP] Maven 빌드 실패
                - 점검:
                  1) JDK 버전/소스 릴리즈 호환성(maven-compiler-plugin release)
                  2) 프록시 설정(~/.m2/settings.xml)
                  3) 저장소 장애 시 재시도
                EOF
                ;;
              GRADLE_BUILD)
                cat <<'EOF'
                [HELP] Gradle 빌드 실패
                - 점검:
                  1) gradlew 실행권한(chmod +x)
                  2) JVM 메모리(-Xmx) 조정
                  3) 플러그인/레포 접근성
                EOF
                ;;
              APT_LOCK)
                cat <<'EOF'
                [HELP] apt 락/패키지 충돌
                - 조치:
                  1) sudo dpkg --configure -a
                  2) sudo apt-get -f install
                  3) sudo rm -rf /var/lib/apt/lists/* && sudo apt-get update
                EOF
                ;;
              DISK_FULL)
                cat <<'EOF'
                [HELP] 디스크 용량 부족
                - 조치:
                  1) FreeDisk 액션 프로파일을 minimal/aggressive로
                  2) /var/log 정리 및 Docker 이미지/레이어 삭제
                  3) 임시 파일/캐시 제거
                EOF
                ;;
              START_SPRING)
                cat <<'EOF'
                [HELP] start.spring.io 접근 실패
                - 조치:
                  1) 네트워크/프록시 점검
                  2) 수동으로 프로젝트 ZIP 내려받아 커밋 후 빌드 진행
                EOF
                ;;
              K8S_CLI)
                cat <<'EOF'
                [HELP] K8s/Cloud CLI 설치 실패
                - 조치:
                  1) GPG 키/레포 키링 경로 검증
                  2) 재시도 또는 바이너리 직접 다운로드(릴리스 자산)
                EOF
                ;;
              *)
                cat <<EOF
                [HELP] 일반 오류 코드(${code}) @ ${stage}
                - 상세: ${detail}
                - 공통 점검: 네트워크, 권한, 경로, 태그 존재 여부, 용량/메모리
                EOF
                ;;
            esac
          }

          show_help_summary(){
            if [ -s "$ECHO_FAILS" ]; then
              echo "====== 🆘 Failure Summary ======"
              cat "$ECHO_FAILS" | nl -ba
              echo
              echo "====== 📖 Help Manual (merged) ======"
              awk 'BEGIN{RS="";ORS="\n\n"}1' "$ECHO_HELP" || cat "$ECHO_HELP"
            else
              note "No failures recorded. Help summary skipped."
            fi
          }
          EOSH
          chmod +x /tmp/echo_helpers.sh
          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: 🔧 Config
        id: cfg
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="config"
          echo "artifact=${{ inputs.boot_artifact || 'demo-app' }}" >> "$GITHUB_OUTPUT" || record_fail JSON_INVALID "$CURRENT_STAGE" "artifact output write"
          echo "deps=${{ inputs.boot_dependencies || 'web,actuator' }}" >> "$GITHUB_OUTPUT" || record_fail JSON_INVALID "$CURRENT_STAGE" "deps output write"
          echo "base_port=${{ inputs.container_port_host || '18080' }}" >> "$GITHUB_OUTPUT" || record_fail JSON_INVALID "$CURRENT_STAGE" "port output write"

      - name: 🔎 Runner Info
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="runner-info"
          uname -a || warn "uname failed"
          nproc || warn "nproc failed"
          free -h || warn "free failed"
          df -h || warn "df failed"
          docker version || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "docker version"
          docker info    || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "docker info"

      - name: 📦 Reserve fast disk (5G)
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="reserve-disk"
          mkdir -p .github/workflows || true
          if ! sudo fallocate -l 5G .github/workflows/.reserve_space; then
            record_fail DISK_FULL "$CURRENT_STAGE" "fallocate 5G 실패"
          fi
          sudo chmod 666 .github/workflows/.reserve_space || true
          du -h .github/workflows/.reserve_space || true
          df -h || true

      - name: 🛠️ numfmt shim (-4 무시)
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="numfmt-shim"
          set -Eeuo pipefail
          if ! (sudo apt-get update -y && sudo apt-get install -y coreutils jq unzip curl git); then
            record_fail APT_LOCK "$CURRENT_STAGE" "apt install coreutils/jq 등"
          fi
          sudo mkdir -p /usr/local/bin
          cat > /tmp/_numfmt.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          TARGET="$(command -v numfmt || true)"
          if [ -z "${TARGET:-}" ]; then
            echo "numfmt not found" >&2; exit 127
          fi
          args=()
          for a in "$@"; do [ "$a" = "-4" ] && continue; args+=("$a"); done
          exec "$TARGET" "${args[@]}"
          EOF
          sudo mv /tmp/_numfmt.sh /usr/local/bin/numfmt && sudo chmod +x /usr/local/bin/numfmt
          /usr/local/bin/numfmt -4 --to=iec 1024 || true

      - name: 🧹 Free up disk (profiled)
        uses: jlumbroso/free-disk-space@main
        with:
          android:        ${{ inputs.freedisk_profile == 'aggressive' }}
          dotnet:         ${{ inputs.freedisk_profile == 'aggressive' }}
          haskell:        ${{ inputs.freedisk_profile == 'aggressive' }}
          large-packages: ${{ inputs.freedisk_profile == 'aggressive' }}
          docker-images:  ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          tool-cache:     ${{ inputs.freedisk_profile == 'minimal' || inputs.freedisk_profile == 'aggressive' }}
          swap-storage:   ${{ inputs.freedisk_profile == 'aggressive' }}

      - name: ⬆️ Upgrade OS (opt)
        if: ${{ inputs.upgrade_os == 'true' }}
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="apt-upgrade"
          sudo apt-get update -y || record_fail APT_LOCK "$CURRENT_STAGE" "apt update"
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade || record_fail APT_LOCK "$CURRENT_STAGE" "apt upgrade"
          sudo dpkg --configure -a || true
          sudo apt-get -f install || true

      - name: 🧯 Purge apt cache&logs (opt)
        if: ${{ inputs.purge_apt_cache == 'true' }}
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="apt-purge"
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo journalctl --vacuum-time=1s || true
          sudo find /var/log -type f -name "*.gz" -delete || true
          sudo find /var/log -type f -name "*.1" -delete || true
          df -h || true

      - name: 🧩 Install Extras by JSON toggles (API/fallback + Help)
        env:
          RAW_EXTRAS_JSON: ${{ inputs.extras_json }}
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="extras"
          set -Eeuo pipefail
          sudo apt-get update -y || record_fail APT_LOCK "$CURRENT_STAGE" "apt update"
          sudo apt-get install -y jq unzip tar zstd pigz aria2 p7zip-full git-lfs gh curl ca-certificates gnupg || record_fail APT_LOCK "$CURRENT_STAGE" "apt install extras"
          git lfs install || true

          EXTRAS_JSON="${RAW_EXTRAS_JSON:-}"
          if ! printf '%s' "${EXTRAS_JSON}" | jq -e . >/dev/null 2>&1; then
            note "extras_json invalid → DEFAULT_EXTRAS_JSON 사용"
            EXTRAS_JSON='${{ env.DEFAULT_EXTRAS_JSON }}'
            record_fail JSON_INVALID "$CURRENT_STAGE" "fallback to DEFAULT_EXTRAS_JSON"
          fi

          gh_api(){ curl -fsSL "https://api.github.com/$1"; }
          dl(){ url="$1"; out="$2"; retries="${3:-3}"; for i in $(seq 1 "$retries"); do curl -fL --retry 3 --retry-connrefused --retry-delay 2 -o "$out" "$url" && return 0 || warn "download failed ($i/$retries): $url"; sleep 2; done; return 1; }
          gh_dl_asset(){ owner="$1"; repo="$2"; filt="$3"; out="$4"; rel="$(gh_api repos/${owner}/${repo}/releases/latest | jq -r '.tag_name, (.assets // [])[]?.browser_download_url' 2>/dev/null || true)"; url="$(echo "$rel" | awk '/^https?:/ {print}' | grep -iE "$filt" | head -n1 || true)"; [ -z "$url" ] && return 1; dl "$url" "$out"; }
          make_wrapper(){ name="$1"; image="$2"; sudo tee "/usr/local/bin/${name}" >/dev/null <<EOF
          #!/usr/bin/env bash
          exec docker run --rm -i --net=host -v "\$PWD:/work" -w /work ${image} ${name} "\$@"
          EOF
          sudo chmod +x "/usr/local/bin/${name}"; }

          get_flag(){ printf '%s' "${EXTRAS_JSON}" | jq -r ".\"$1\" // false" 2>/dev/null || echo false; }

          # (하위 설치 로직은 동일 — 실패 시 record_fail로 헬프 수집)
          if [ "$(get_flag container_toolchain)" = "true" ]; then
            sudo apt-get install -y skopeo || record_fail APT_LOCK "$CURRENT_STAGE" "install skopeo"
            curl -fsSL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo bash -s -- -b /usr/local/bin || record_fail DL_FAIL "$CURRENT_STAGE" "syft"
            curl -fsSL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo bash -s -- -b /usr/local/bin || record_fail DL_FAIL "$CURRENT_STAGE" "grype"
            curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin || record_fail DL_FAIL "$CURRENT_STAGE" "trivy"
            if ! curl -fsSL https://raw.githubusercontent.com/wagoodman/dive/master/install.sh | sudo sh -s -- -b /usr/local/bin; then
              gh_dl_asset wagoodman dive "linux_amd64.*\.tar\.gz" /tmp/dive.tgz || record_fail DL_FAIL "$CURRENT_STAGE" "dive"
              sudo tar -xzf /tmp/dive.tgz -C /usr/local/bin dive || record_fail HEREDOC "$CURRENT_STAGE" "dive extract"
            fi
            if ! dl "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64" /tmp/cosign; then
              gh_dl_asset sigstore cosign "linux_amd64.*\.tar\.gz" /tmp/cosign.tgz || record_fail DL_FAIL "$CURRENT_STAGE" "cosign asset"
              sudo tar -xzf /tmp/cosign.tgz -C /usr/local/bin cosign || record_fail DOCKER_BUILD "$CURRENT_STAGE" "cosign extract"
            else
              sudo install -m 0755 /tmp/cosign /usr/local/bin/cosign || record_fail DOCKER_BUILD "$CURRENT_STAGE" "cosign install"
            fi
            if ! gh_dl_asset google go-containerregistry "crane_linux_amd64$" /tmp/crane; then
              docker pull gcr.io/go-containerregistry/crane:debug || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "pull crane:debug"
              make_wrapper crane gcr.io/go-containerregistry/crane:debug
            else
              sudo install -m 0755 /tmp/crane /usr/local/bin/crane || record_fail DOCKER_BUILD "$CURRENT_STAGE" "crane install"
            fi
            if gh_dl_asset oras-project oras "linux_amd64.*\.tar\.gz" /tmp/oras.tgz; then
              sudo tar -xzf /tmp/oras.tgz -C /usr/local/bin oras && sudo chmod +x /usr/local/bin/oras || record_fail DOCKER_BUILD "$CURRENT_STAGE" "oras extract"
            fi
          fi

          if [ "$(get_flag k8s_toolchain)" = "true" ]; then
            dl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" awscliv2.zip || record_fail DL_FAIL "$CURRENT_STAGE" "awscli zip"
            unzip -q awscliv2.zip || record_fail DL_FAIL "$CURRENT_STAGE" "aws unzip"
            sudo ./aws/install || record_fail K8S_CLI "$CURRENT_STAGE" "aws install"
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
            curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg || record_fail K8S_CLI "$CURRENT_STAGE" "gpg dearmor"
            sudo apt-get update -y || record_fail APT_LOCK "$CURRENT_STAGE" "gcloud apt update"
            sudo apt-get install -y google-cloud-sdk || record_fail K8S_CLI "$CURRENT_STAGE" "gcloud install"
            curl -fsSL https://aka.ms/InstallAzureCLIDeb | sudo bash || record_fail K8S_CLI "$CURRENT_STAGE" "azure cli"
            dl https://storage.googleapis.com/kubernetes-release/release/stable.txt /tmp/kver || record_fail DL_FAIL "$CURRENT_STAGE" "stable.txt"
            dl "https://storage.googleapis.com/kubernetes-release/release/$(cat /tmp/kver)/bin/linux/amd64/kubectl" /tmp/kubectl || record_fail DL_FAIL "$CURRENT_STAGE" "kubectl"
            sudo install -m 0755 /tmp/kubectl /usr/local/bin/kubectl || record_fail K8S_CLI "$CURRENT_STAGE" "kubectl install"
            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash || record_fail K8S_CLI "$CURRENT_STAGE" "helm"
            KUSVER="$(curl -fsSL https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest | jq -r .tag_name)"
            dl "https://github.com/kubernetes-sigs/kustomize/releases/download/${KUSVER}/kustomize_${KUSVER#kustomize/}_linux_amd64.tar.gz" /tmp/kus.tgz || record_fail DL_FAIL "$CURRENT_STAGE" "kustomize"
            sudo tar -xzf /tmp/kus.tgz -C /usr/local/bin kustomize || record_fail K8S_CLI "$CURRENT_STAGE" "kustomize extract"
            dl https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 /tmp/argocd || record_fail DL_FAIL "$CURRENT_STAGE" "argocd"
            sudo install -m 0755 /tmp/argocd /usr/local/bin/argocd || record_fail K8S_CLI "$CURRENT_STAGE" "argocd install"
            YQVER="$(curl -fsSL https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r .tag_name)"
            dl "https://github.com/mikefarah/yq/releases/download/${YQVER}/yq_linux_amd64" /tmp/yq || record_fail DL_FAIL "$CURRENT_STAGE" "yq"
            sudo install -m 0755 /tmp/yq /usr/local/bin/yq || record_fail K8S_CLI "$CURRENT_STAGE" "yq install"
          fi

          if [ "$(get_flag security_tools)" = "true" ]; then
            sudo apt-get install -y python3-pip shellcheck || record_fail APT_LOCK "$CURRENT_STAGE" "security tools"
            GLVER="$(curl -fsSL https://api.github.com/repos/gitleaks/gitleaks/releases/latest | jq -r .tag_name)"
            dl "https://github.com/gitleaks/gitleaks/releases/download/${GLVER}/gitleaks_${GLVER#v}_linux_x64.tar.gz" /tmp/gitleaks.tgz || record_fail DL_FAIL "$CURRENT_STAGE" "gitleaks"
            sudo tar -xzf /tmp/gitleaks.tgz -C /usr/local/bin gitleaks || record_fail DOCKER_BUILD "$CURRENT_STAGE" "gitleaks extract"
            pip3 install --upgrade pip semgrep bandit || record_fail DL_FAIL "$CURRENT_STAGE" "pip semgrep bandit"
            HADVER="$(curl -fsSL https://api.github.com/repos/hadolint/hadolint/releases/latest | jq -r .tag_name)"
            dl "https://github.com/hadolint/hadolint/releases/download/${HADVER}/hadolint-Linux-x86_64" /tmp/hadolint || record_fail DL_FAIL "$CURRENT_STAGE" "hadolint"
            sudo install -m 0755 /tmp/hadolint /usr/local/bin/hadolint || record_fail DOCKER_BUILD "$CURRENT_STAGE" "hadolint install"
          fi

          if [ "$(get_flag obs_tools)" = "true" ]; then
            sudo apt-get install -y prometheus-node-exporter unzip || record_fail APT_LOCK "$CURRENT_STAGE" "prometheus-node-exporter"
            PTVER="$(curl -fsSL https://api.github.com/repos/grafana/loki/releases/latest | jq -r .tag_name)"
            dl "https://github.com/grafana/loki/releases/download/${PTVER}/promtail-linux-amd64.zip" /tmp/promtail.zip || record_fail DL_FAIL "$CURRENT_STAGE" "promtail zip"
            unzip -o /tmp/promtail.zip -d /tmp || record_fail DL_FAIL "$CURRENT_STAGE" "promtail unzip"
            sudo mv /tmp/promtail-linux-amd64 /usr/local/bin/promtail && sudo chmod +x /usr/local/bin/promtail || record_fail DOCKER_BUILD "$CURRENT_STAGE" "promtail install"
            if ! gh_dl_asset open-telemetry opentelemetry-collector-releases "otelcol_.*linux_amd64.*\.tar\.gz" /tmp/otelcol.tgz; then
              warn "otelcol binary fetch failed; using docker wrapper"
              docker pull otel/opentelemetry-collector:latest || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "otelcol docker pull"
              cat >/usr/local/bin/otelcol <<'EOF'
              #!/usr/bin/env bash
              exec docker run --rm --net=host -v "$PWD:/work" -w /work -v /var/log:/var/log -v /etc:/etc otel/opentelemetry-collector:latest "$@"
              EOF
              chmod +x /usr/local/bin/otelcol
            else
              sudo tar -xzf /tmp/otelcol.tgz -C /usr/local/bin otelcol || record_fail DOCKER_BUILD "$CURRENT_STAGE" "otelcol extract"
            fi
          fi

          if [ "$(get_flag db_images)" = "true" ]; then
            docker pull postgres:16 || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "pull postgres"
            docker pull mysql:8 || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "pull mysql"
            docker pull redis:7 || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "pull redis"
            docker pull mongo:7 || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "pull mongo"
            docker pull bitnami/kafka:latest || docker pull redpandadata/redpanda:latest || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "pull kafka/redpanda"
            docker pull minio/minio:latest || true
            docker pull minio/mc:latest || true
            docker pull hashicorp/vault:1.16 || true
          fi

          if [ "$(get_flag db_clis)" = "true" ]; then
            sudo apt-get install -y postgresql-client mysql-client redis-tools unzip || record_fail APT_LOCK "$CURRENT_STAGE" "db clis"
            dl https://dl.min.io/client/mc/release/linux-amd64/mc /tmp/mc && sudo install -m 0755 /tmp/mc /usr/local/bin/mc || record_fail DL_FAIL "$CURRENT_STAGE" "mc"
            dl https://releases.hashicorp.com/vault/1.16.3/vault_1.16.3_linux_amd64.zip /tmp/vault.zip || record_fail DL_FAIL "$CURRENT_STAGE" "vault zip"
            unzip -o /tmp/vault.zip -d /usr/local/bin && sudo chmod +x /usr/local/bin/vault || record_fail DOCKER_BUILD "$CURRENT_STAGE" "vault install"
            dl https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.9.4.deb /tmp/mdb.deb || record_fail DL_FAIL "$CURRENT_STAGE" "mongodb tools"
            sudo dpkg -i /tmp/mdb.deb || warn "mongodb tools dpkg warning"
          fi

          if [ "$(get_flag build_runtimes)" = "true" ]; then
            curl -s "https://get.sdkman.io" | bash || warn "sdkman bootstrap failed"
            export SDKMAN_DIR="$HOME/.sdkman"
            set +u; [ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ] && source "$SDKMAN_DIR/bin/sdkman-init.sh"; set -u
            sudo apt-get install -y python3-pip || record_fail APT_LOCK "$CURRENT_STAGE" "python3-pip"
            pip3 install --upgrade pip pipx poetry || warn "pipx/poetry upgrade fail"
            curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash || warn "nvm install fail"
            export NVM_DIR="$HOME/.nvm"; set +u; [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; set -u
            nvm install --lts || warn "nvm lts install fail"
            corepack enable || true
            npm i -g pnpm || warn "pnpm install fail"
          fi

          if [ "$(get_flag release_utils)" = "true" ]; then
            sudo apt-get install -y rclone || record_fail APT_LOCK "$CURRENT_STAGE" "rclone"
          fi

          if [ "$(get_flag docs_tools)" = "true" ]; then
            sudo apt-get install -y pandoc graphviz default-jre wkhtmltopdf || record_fail APT_LOCK "$CURRENT_STAGE" "docs tools"
            dl https://sourceforge.net/projects/plantuml/files/plantuml.jar/download /usr/local/bin/plantuml.jar || warn "plantuml download failed"
          fi

          note "[extras] completed ok"

      # ===== Help summary for setup_base =====
      - name: 🆘 Help Manual (always)
        if: always()
        run: |
          source /tmp/echo_helpers.sh
          show_help_summary

  build_matrix:
    needs: setup_base
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        java: ['17','21']
    env:
      BOOT_ARTIFACT: ${{ needs.setup_base.outputs.artifact }}
      BOOT_DEPS: ${{ needs.setup_base.outputs.deps }}
      BASE_PORT: ${{ needs.setup_base.outputs.base_port }}
      BOOT_GROUP: com.example

    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup Java (no cache yet)
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: 📦 Install Maven (tarball if version set)
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="maven-install"
          VER="${{ inputs.maven_version }}"
          if [ -n "$VER" ]; then
            URL="https://archive.apache.org/dist/maven/maven-3/${VER}/binaries/apache-maven-${VER}-bin.tar.gz"
            TMPD="$(mktemp -d)" || true
            (cd "$TMPD" && curl -fsSL "$URL" -o maven.tgz && tar -xzf maven.tgz) || record_fail DL_FAIL "$CURRENT_STAGE" "maven tarball"
            sudo rm -rf /opt/maven || true; sudo mv "$TMPD/apache-maven-${VER}" /opt/maven || record_fail DOCKER_BUILD "$CURRENT_STAGE" "move /opt/maven"
            echo "/opt/maven/bin" >> "$GITHUB_PATH"
            rm -rf "$TMPD" || true
          else
            sudo apt-get update -y || record_fail APT_LOCK "$CURRENT_STAGE" "apt update"
            sudo apt-get install -y maven unzip pigz || record_fail APT_LOCK "$CURRENT_STAGE" "apt install maven"
          fi
          mvn -v || record_fail MVN_BUILD "$CURRENT_STAGE" "mvn -v"

      - name: 🧪 Generate Maven sample + patch (JDK=${{ matrix.java }})
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="maven-sample"
          mvn -q -T 1C archetype:generate -DgroupId=com.example -DartifactId=maven-sample -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false || record_fail MVN_BUILD "$CURRENT_STAGE" "archetype"
          sed -i "s/__REL__/${{ matrix.java }}/g" maven-sample/pom.xml || true
          (cd maven-sample && mvn -q -T 1C -DskipTests package) || record_fail MVN_BUILD "$CURRENT_STAGE" "package"
          ls -al maven-sample/target || true

      - name: 🌱 Generate Boot (Maven) + Hello + IT stub
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="boot-generate-maven"
          G="${{ env.BOOT_GROUP }}"; A="${{ env.BOOT_ARTIFACT }}"; D="${{ env.BOOT_DEPS }}"; J="${{ matrix.java }}"
          PKG="${G}.${A//-/.}"
          mkdir -p boot-app || true
          curl -fsSL -G https://start.spring.io/starter.zip \
            --data-urlencode "type=maven-project" \
            --data-urlencode "language=java" \
            --data-urlencode "groupId=$G" \
            --data-urlencode "artifactId=$A" \
            --data-urlencode "name=$A" \
            --data-urlencode "packageName=$PKG" \
            --data-urlencode "dependencies=$D" \
            --data-urlencode "javaVersion=$J" \
            --data-urlencode "packaging=jar" \
            -o boot-app.zip || record_fail START_SPRING "$CURRENT_STAGE" "download starter.zip"
          unzip -q -o boot-app.zip -d boot-app || record_fail START_SPRING "$CURRENT_STAGE" "unzip starter"
          # 소스/테스트 추가는 동일 (생략)
          echo "server.port=8080" >> boot-app/src/main/resources/application.properties || true

      - name: ☕ Enable Maven cache
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven

      - name: 🏗️ Build Boot (Maven)
        working-directory: boot-app
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="boot-build-maven"
          if [ -x "./mvnw" ]; then ./mvnw -q -T 1C -DskipTests package || record_fail MVN_BUILD "$CURRENT_STAGE" "mvnw package"
          else mvn -q -T 1C -DskipTests package || record_fail MVN_BUILD "$CURRENT_STAGE" "mvn package"
          fi
          ls -al target || true

      - name: 🌱 Generate Boot (Gradle)
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="boot-generate-gradle"
          # (생성 로직 동일) 실패 시:
          true

      - name: 🏗️ Build Boot (Gradle)
        working-directory: boot-app-gradle
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="boot-build-gradle"
          chmod +x ./gradlew || true
          ./gradlew -q -Dorg.gradle.jvmargs="-Xmx1g" -x test build || record_fail GRADLE_BUILD "$CURRENT_STAGE" "gradle build"
          ls -al build/libs || true

      - name: 🐳 Setup QEMU/Buildx
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: 🐳 Create Dockerfile (multi-stage, JDK=${{ matrix.java }})
        working-directory: boot-app
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="dockerfile"
          J="${{ matrix.java }}"
          BUILDER="maven:3.9.9-eclipse-temurin-${J}"
          RUNTIME="eclipse-temurin:${J}-jre"
          cat > Dockerfile <<EOF
          FROM ${BUILDER} AS builder
          WORKDIR /workspace
          COPY pom.xml .
          COPY src ./src
          RUN --mount=type=cache,target=/root/.m2 mvn -q -DskipTests package
          FROM ${RUNTIME}
          WORKDIR /app
          COPY --from=builder /workspace/target/*.jar /app/app.jar
          EXPOSE 8080
          USER 1000
          ENTRYPOINT ["java","-jar","/app/app.jar"]
          EOF
          printf "target/\n.git/\n.github/\n**/*.iml\n**/.DS_Store\n*.log\n" > .dockerignore || true

      - name: 🐳 Build image (cached) - tag by JDK
        id: docker_build
        working-directory: boot-app
        env:
          IMG: ${{ env.BOOT_ARTIFACT }}:local-j${{ matrix.java }}
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="docker-build"
          mkdir -p /tmp/.buildx-cache-${{ matrix.java }} /tmp/.buildx-cache-new-${{ matrix.java }} || true
          docker buildx build --load -t "${IMG}" \
            --cache-from type=local,src=/tmp/.buildx-cache-${{ matrix.java }} \
            --cache-to   type=local,dest=/tmp/.buildx-cache-new-${{ matrix.java }},mode=max \
            . || record_fail DOCKER_BUILD "$CURRENT_STAGE" "buildx"
          rm -rf /tmp/.buildx-cache-${{ matrix.java }} || true
          mv /tmp/.buildx-cache-new-${{ matrix.java }} /tmp/.buildx-cache-${{ matrix.java }} || true
          echo "image=${IMG}" >> "$GITHUB_OUTPUT" || true
          docker images | head -n 20 || true

      - name: 🐳 Save image tar
        working-directory: ${{ github.workspace }}
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="docker-save"
          docker save "${IMG}" -o "artifacts/${IMG/:/_}.tar" 2>/dev/null || record_fail DOCKER_BUILD "$CURRENT_STAGE" "docker save"

      - name: 🐳 Run container (No-Stop)
        id: docker_run
        env:
          IMG: ${{ steps.docker_build.outputs.image }}
          BASE: ${{ env.BASE_PORT }}
          J: ${{ matrix.java }}
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="docker-run"
          PORT=$BASE; [ "$J" = "21" ] && PORT=$((BASE+1))
          NAME="boot-app-${J}-${GITHUB_RUN_ID}"
          docker run -d --name "${NAME}" -p "${PORT}:8080" "${IMG}" || record_fail DOCKER_DAEMON "$CURRENT_STAGE" "docker run"
          echo "container_name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "PORT=${PORT}" >> "$GITHUB_OUTPUT"
          for i in $(seq 1 30); do
            sleep 2
            if (curl -fsS "http://localhost:${PORT}/actuator/health" || curl -fsS "http://localhost:${PORT}/hello"); then
              break
            fi
            echo "[echo] waiting app(${J})... ($i)"
            [ "$i" -eq 30 ] && record_fail CONTAINER_HEALTH "$CURRENT_STAGE" "no response on ${PORT}"
          done
          docker logs --tail 120 "${NAME}" 2>/dev/null || true

      - name: ⬆️ Upload artifacts (per JDK)
        uses: actions/upload-artifact@v4
        with:
          name: bundles-j${{ matrix.java }}
            # 0바이트 제외는 업로드 단계에서 처리됨(아래 release job)
          path: |
            artifacts/*
            maven-sample/target/*.jar
            boot-app/target/*.jar
            boot-app/Dockerfile
            boot-app/.dockerignore
            boot-app-gradle/build/libs/*.jar
          if-no-files-found: warn
          retention-days: 7

      - name: 🆘 Help Manual (always)
        if: always()
        run: |
          source /tmp/echo_helpers.sh
          show_help_summary

  release:
    needs: [setup_base, build_matrix]
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: ⬇️ Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: 🧾 List artifacts
        run: |
          source /tmp/echo_helpers.sh
          find release_artifacts -type f -printf "%p (%s bytes)\n" || true

      - name: 🧰 Normalize & de-duplicate → release-bundle/
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="bundle"
          set -Eeuo pipefail
          mkdir -p release-bundle
          declare -A seen=()
          while IFS= read -r -d '' f; do
            base="$(basename "$f")"; ext="${base##*.}"; stem="${base%.*}"; sfx=""
            case "$f" in *bundles-j17/*) sfx="${sfx:+$sfx-}j17";; *bundles-j21/*) sfx="${sfx:+$sfx-}j21";; esac
            case "$f" in */boot-app-gradle/*|*gradle/*) sfx="${sfx:+$sfx-}gradle";; */boot-app/*|*maven-sample/*) sfx="${sfx:+$sfx-}maven";; esac
            out="${base}"; [ -n "$sfx" ] && out="${stem}-${sfx}.${ext}"
            key="$out"
            if [[ -n "${seen[$key]:-}" ]]; then cnt="${seen[$key]}"; seen["$key"]=$((cnt+1)); out="${stem}-${sfx:+$sfx-}dup$((cnt+1)).${ext}"; else seen["$key"]=1; fi
            cp -f "$f" "release-bundle/$out" || record_fail GH_UPLOAD_0B "$CURRENT_STAGE" "copy $f"
          done < <(find release_artifacts -type f -print0)
          (cd release-bundle && ls -al) || true

      - name: 🚀 Create/Update Release with GH CLI (skip 0B, per-file upload)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="release"
          set -Eeuo pipefail
          TAG="auto-${{ github.run_number }}"
          TITLE="Auto Release #${{ github.run_number }}"
          REPO="${{ github.repository }}"
          if ! gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            if [ "${{ inputs.release_prerelease }}" = "true" ]; then
              gh release create "$TAG" --title "$TITLE" --notes "" --prerelease --repo "$REPO" || record_fail GH_AUTH "$CURRENT_STAGE" "create prerelease"
            else
              gh release create "$TAG" --title "$TITLE" --notes "" --repo "$REPO" || record_fail GH_AUTH "$CURRENT_STAGE" "create release"
            fi
          fi
          mapfile -d '' FILES < <(find release-bundle -type f -size +0c -print0)
          if [ "${#FILES[@]}" -eq 0 ]; then
            record_fail GH_UPLOAD_0B "$CURRENT_STAGE" "no non-empty files"
          fi
          for f in "${FILES[@]}"; do
            for n in 1 2 3; do
              if gh release upload "$TAG" "$f" --clobber --repo "$REPO"; then
                echo "uploaded: $f"; break
              else
                warn "upload failed ($n/3) for $f; retrying..."
                sleep 2
                [ "$n" -eq 3 ] && record_fail GH_AUTH "$CURRENT_STAGE" "upload $f"
              fi
            done
          done

      - name: 🆘 Help Manual (always)
        if: always()
        run: |
          source /tmp/echo_helpers.sh
          show_help_summary

  promote_to_prod:
    needs: [setup_base, build_matrix]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: ⬇️ Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: stage_artifacts

      - name: 📦 Promote artifacts → prod (rename/retag tar)
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="promote"
          mkdir -p prod_artifacts
          find stage_artifacts -type f -name "*.tar" -print0 | while IFS= read -r -d '' f; do
            base="$(basename "$f")"; prod="${base/local/prod}"
            cp -f "$f" "prod_artifacts/${prod}" || record_fail GH_UPLOAD_0B "$CURRENT_STAGE" "copy tar"
          done
          find stage_artifacts -type f \( -name "*.jar" -o -name "*.tgz" \) -print0 | while IFS= read -r -d '' f; do
            cp -f "$f" "prod_artifacts/$(basename "$f")" || record_fail GH_UPLOAD_0B "$CURRENT_STAGE" "copy pkg"
          done
          ls -al prod_artifacts || true

      - name: ⬆️ Upload prod bundle
        uses: actions/upload-artifact@v4
        with:
          name: prod-bundles
          path: prod_artifacts/*
          if-no-files-found: warn
          retention-days: 14

      - name: 🛒 Checkout (for PR)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 📝 Create a PROD workflow copy (PR)
        run: |
          source /tmp/echo_helpers.sh
          CURRENT_STAGE="prod-pr"
          mkdir -p .github/workflows
          cat > .github/workflows/test1-prod.yml <<'YML'
          name: PROD Runner (wrapper)
          on:
            workflow_dispatch:
          jobs:
            info:
              runs-on: ubuntu-latest
              steps:
                - run: echo "This is a placeholder PROD workflow. It exists as a copy for ops traceability."
          YML

      - name: 🔁 Open PR for PROD workflow copy (hardened)
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(prod): add prod workflow copy & promote bundles"
          title: "chore(prod): add prod workflow copy & promote bundles"
          body: |
            자동 생성된 PROD 워크플로우 래퍼 및 프로모션 번들 업로드.
            - test1-prod.yml 추가(운영 추적용)
            - 아티팩트(prod-bundles) 포함
          branch: promote/prod-${{ github.run_id }}
          delete-branch: true
          author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          committer: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

      - name: 🆘 Help Manual (always)
        if: always()
        run: |
          source /tmp/echo_helpers.sh
          show_help_summary
