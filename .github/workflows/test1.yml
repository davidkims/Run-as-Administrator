name: Setup SpringBoot and Maven Project (Safe Disk + Maven Cache)

on:
  workflow_dispatch:
    inputs:
      clean_android:
        description: "FreeDisk: Android 제거"
        required: true
        default: "false"
      clean_dotnet:
        description: "FreeDisk: .NET 제거"
        required: true
        default: "false"
      clean_haskell:
        description: "FreeDisk: Haskell 제거"
        required: true
        default: "false"
      clean_large_packages:
        description: "FreeDisk: Large packages 제거"
        required: true
        default: "false"
      clean_docker_images:
        description: "FreeDisk: Docker images 제거"
        required: true
        default: "false"
      clean_tool_cache:
        description: "FreeDisk: Tool cache 제거"
        required: true
        default: "false"
      clean_swap_storage:
        description: "FreeDisk: Swap 제거"
        required: true
        default: "false"
      prune_docker_all:
        description: "수동: docker system prune -af --volumes"
        required: true
        default: "false"
      purge_apt_cache:
        description: "수동: apt/로그 정리"
        required: true
        default: "false"
      simulate_low_disk:
        description: "루프백 2~4GB /mnt/lowdisk 마운트"
        required: true
        default: "false"

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Show initial disk/network info
        run: |
          set -Eeuo pipefail
          echo "== df -h =="
          df -h
          echo "== docker images (head) =="
          docker images | head -n 15 || true
          echo "== ip a (head) =="
          ip a || true

      - name: 🧹 Free up disk space (action)
        uses: jlumbroso/free-disk-space@main
        with:
          android:        ${{ github.event.inputs.clean_android == 'true' }}
          dotnet:         ${{ github.event.inputs.clean_dotnet == 'true' }}
          haskell:        ${{ github.event.inputs.clean_haskell == 'true' }}
          large-packages: ${{ github.event.inputs.clean_large_packages == 'true' }}
          docker-images:  ${{ github.event.inputs.clean_docker_images == 'true' }}
          tool-cache:     ${{ github.event.inputs.clean_tool_cache == 'true' }}
          swap-storage:   ${{ github.event.inputs.clean_swap_storage == 'true' }}

      - name: 📊 Disk after action cleanup
        run: df -h

      - name: 🧽 Manual prune: Docker ALL
        if: ${{ github.event.inputs.prune_docker_all == 'true' }}
        run: |
          set -Eeuo pipefail
          docker system prune -af --volumes || true
          docker builder prune -af || true
          df -h

      - name: 🧯 Manual purge: apt cache & logs
        if: ${{ github.event.inputs.purge_apt_cache == 'true' }}
        run: |
          set -Eeuo pipefail
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo journalctl --vacuum-time=1s || true
          sudo find /var/log -type f -name "*.gz" -delete || true
          sudo find /var/log -type f -name "*.1" -delete || true
          df -h

      - name: 🧪 (Optional) Simulate low-disk via loopback mount
        if: ${{ github.event.inputs.simulate_low_disk == 'true' }}
        id: lowdisk
        run: |
          set -Eeuo pipefail
          MNT="/mnt/lowdisk"
          IMG="/mnt/tmp-pv.img"
          sudo mkdir -p "$MNT"
          AVAIL_GB=$(df --output=avail -BG /mnt | tail -1 | tr -dc '0-9')
          SIZE_GB=2
          if [ "$AVAIL_GB" -ge 12 ]; then SIZE_GB=4; fi
          echo "Creating loopback file of ${SIZE_GB}G at $IMG (Avail=${AVAIL_GB}G)"
          sudo fallocate -l ${SIZE_GB}G "$IMG" || sudo dd if=/dev/zero of="$IMG" bs=1M count=$((SIZE_GB*1024))
          sudo mkfs.ext4 -F "$IMG"
          sudo mount -o loop "$IMG" "$MNT"
          sudo chmod 777 "$MNT"
          echo "mounted" > "$MNT/.ok"
          echo "img=$IMG" >> $GITHUB_OUTPUT
          echo "mnt=$MNT" >> $GITHUB_OUTPUT
          df -h "$MNT"

      - name: 🧱 Create dirs (workspace + /opt demo)
        run: |
          set -Eeuo pipefail
          mkdir -p "$GITHUB_WORKSPACE/artifacts"
          # /opt 데모(실제 빌드는 워크스페이스에서 수행)
          sudo mkdir -p /opt/project/springboot/{src,logs,temp,server}
          sudo mkdir -p /opt/project/maven/{src,target,logs}
          echo "Simulated Spring Boot JAR" | sudo tee /opt/project/springboot/server/app.jar >/dev/null
          echo "Spring Boot Server Log"   | sudo tee /opt/project/springboot/logs/server.log >/dev/null
          echo "Maven Placeholder"        | sudo tee /opt/project/maven/src/Main.java >/dev/null

      - name: ☕ Set up Java (no cache yet)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📦 Install Maven CLI
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y maven
          mvn -v

      - name: 🧪 Generate Maven sample project (IN WORKSPACE)
        working-directory: ${{ github.workspace }}
        run: |
          set -Eeuo pipefail
          mvn -q archetype:generate \
            -DgroupId=com.example \
            -DartifactId=maven-sample \
            -DarchetypeArtifactId=maven-archetype-quickstart \
            -DinteractiveMode=false
          echo "✅ Generated $GITHUB_WORKSPACE/maven-sample/pom.xml"

      - name: ☕ Enable Maven cache (setup-java)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          cache-dependency-path: |
            maven-sample/pom.xml

      - name: 🏗️ Build (maven-sample)
        working-directory: ${{ github.workspace }}/maven-sample
        run: |
          set -Eeuo pipefail
          mvn -q -DskipTests package
          ls -al target

      - name: 📦 Archive & Upload Artifacts
        run: |
          set -Eeuo pipefail
          cp -f "$GITHUB_WORKSPACE/maven-sample/target/"*.jar "$GITHUB_WORKSPACE/artifacts/" || true
          tar -czf "$GITHUB_WORKSPACE/artifacts/maven-sample.tgz" -C "$GITHUB_WORKSPACE" maven-sample

      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-sample-build
          path: artifacts/*
          if-no-files-found: warn
          retention-days: 7

      - name: 📄 Summary
        run: |
          set -Eeuo pipefail
          echo "📄 DONE"
          echo "- Workspace project: $GITHUB_WORKSPACE/maven-sample"
          echo "- Built JARs in: $GITHUB_WORKSPACE/maven-sample/target"
          echo "- Demo JAR: /opt/project/springboot/server/app.jar"
          if [ "${{ steps.lowdisk.outcome }}" = "success" ]; then
            echo "- LowDisk mount: ${{ steps.lowdisk.outputs.mnt }}"
          fi
          echo "== df -h =="
          df -h

      - name: 🧽 Post-cleanup (unmount & remove loopback)
        if: always()
        run: |
          set -Eeuo pipefail
          if [ -n "${{ steps.lowdisk.outputs.mnt }}" ] && mountpoint -q "${{ steps.lowdisk.outputs.mnt }}"; then
            sudo umount "${{ steps.lowdisk.outputs.mnt }}"
          fi
          if [ -n "${{ steps.lowdisk.outputs.img }}" ] && [ -f "${{ steps.lowdisk.outputs.img }}" ]; then
            sudo rm -f "${{ steps.lowdisk.outputs.img }}"
          fi
          echo "Cleanup done."
