name: "🗄️ Workflow DB FullOps (권한 파일 생성+적용+제품별 샘플)"

on:
  workflow_dispatch:
    inputs:
      wf_product:
        description: "워크플로우 제품"
        type: choice
        required: true
        default: "airflow"
        options: ["airflow", "n8n", "ibm-baw", "sharepoint-wfm"]
      target_db:
        description: "대상 DB"
        type: choice
        required: true
        default: "postgres"
        options: ["postgres", "mysql", "mssql"]  # mssql은 권한파일만 생성(기본)
      db_name:
        description: "DB 이름"
        required: true
        default: "appdb"
      db_user:
        description: "DB 접속 사용자"
        required: true
        default: "appuser"
      db_password:
        description: "DB 접속 비밀번호"
        required: true
        default: "StrongPw123!"
      extra_schema:
        description: "추가 스키마(없으면 빈칸)"
        required: false
        default: ""
      grant_model:
        description: "권한 모델"
        type: choice
        required: true
        default: "strict"
        options: ["strict", "basic"]
      enable_tls:
        description: "TLS 가이드 파일 포함"
        type: choice
        required: true
        default: "true"
        options: ["true", "false"]
      create_artifacts:
        description: "생성 산출물(권한 SQL/샘플설정) 아티팩트 업로드"
        type: choice
        required: true
        default: "true"
        options: ["true", "false"]
      run_apply:
        description: "DB 컨테이너 기동 후 SQL 실제 적용(지원: postgres/mysql)"
        type: choice
        required: true
        default: "false"
        options: ["true", "false"]

permissions:
  contents: write

jobs:
  db-fullops:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare variables
        id: prep
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "WF_PRODUCT=${{ github.event.inputs.wf_product }}" >> $GITHUB_ENV
          echo "TARGET_DB=${{ github.event.inputs.target_db }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ github.event.inputs.db_name }}" >> $GITHUB_ENV
          echo "DB_USER=${{ github.event.inputs.db_user }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ github.event.inputs.db_password }}" >> $GITHUB_ENV
          echo "EXTRA_SCHEMA=${{ github.event.inputs.extra_schema }}" >> $GITHUB_ENV
          echo "GRANT_MODEL=${{ github.event.inputs.grant_model }}" >> $GITHUB_ENV
          echo "ENABLE_TLS=${{ github.event.inputs.enable_tls }}" >> $GITHUB_ENV
          echo "CREATE_ARTIFACTS=${{ github.event.inputs.create_artifacts }}" >> $GITHUB_ENV
          echo "RUN_APPLY=${{ github.event.inputs.run_apply }}" >> $GITHUB_ENV
          mkdir -p .github/echo_db/{postgres,mysql,mssql,common} .github/echo_products/{airflow,n8n,ibm-baw,sharepoint-wfm}

      # 1) 공통 보안/TLS 가이드 & 백업/DR 체크리스트
      - name: Generate common guides
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/common/SECURITY_TLS_GUIDE.md <<'MD'
          # DB 보안/TLS 가이드 (요약)
          - 서버 측 TLS 인증서, 클라이언트 인증(필요 시) 구성
          - 최소 권한 원칙(Role/Grant), 비밀번호 금고(Vault/KeyVault)
          - 감사 로그 활성화, 로테이션, 보관 정책
          - 백업/DR: 정기 백업 + 복구 리허설, PITR(Postgres) 등
          MD

          cat > .github/echo_db/common/BACKUP_DR_CHECKLIST.md <<'MD'
          # 백업/DR 체크리스트
          - 전체/증분 백업 주기, 점검 절차
          - 복구 목표(RPO/RTO) 정의 및 리허설
          - 레플리케이션/HA 구성(AG/Patroni/InnoDB Cluster 등)
          - 스냅샷/아카이브 보관 기간 및 접근통제
          MD

      # 2) 제품별 샘플 설정/가이드
      - name: Generate product samples
        shell: bash
        run: |
          set -Eeuo pipefail
          # Airflow
          cat > .github/echo_products/airflow/ENV.sample <<'ENV'
          AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:pw@db:5432/airflow
          # airflow db init 후 webserver/scheduler 실행
          ENV

          # n8n
          cat > .github/echo_products/n8n/ENV.sample <<'ENV'
          DB_TYPE=postgresdb
          DB_POSTGRESDB_HOST=db
          DB_POSTGRESDB_PORT=5432
          DB_POSTGRESDB_DATABASE=n8n
          DB_POSTGRESDB_USER=n8n
          DB_POSTGRESDB_PASSWORD=strong_pw
          ENV

          # IBM BAW
          cat > .github/echo_products/ibm-baw/JDBC.sample.properties <<'PROPS'
          # 예시 JDBC (환경에 맞게 수정)
          db.type=postgres
          db.url=jdbc:postgresql://db.example.com:5432/bawdb?sslmode=require
          db.user=baw
          db.password=*****
          # BAW는 Process/PDW/Common DB 분리(단, Postgres는 Common DB 제외 구성)
          PROPS

          # SharePoint Workflow Manager
          cat > .github/echo_products/sharepoint-wfm/SETUP_CHECKLIST.md <<'MD'
          # SP Workflow Manager 사전 체크
          - SQL Server: TCP/IP 활성화(1433), SQL Browser 실행
          - Azure Service Fabric Runtime 설치(권장 최신)
          - 팜 구성 계정/권한 준비, 방화벽 예외
          MD

      # 3) 권한 파일 — PostgreSQL (템플릿; envsubst로 치환 적용)
      - name: Generate PostgreSQL SQL (create/roles/grants)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/postgres/01_roles.sql <<'SQL'
          -- 사용자/역할 생성
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='${DB_USER}') THEN
              EXECUTE format('CREATE ROLE %I LOGIN PASSWORD %L', '${DB_USER}', '${DB_PASSWORD}');
            END IF;
          END$$;

          -- 최소 권한 롤(읽기/쓰기) 분리
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='app_read') THEN CREATE ROLE app_read NOLOGIN; END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='app_write') THEN CREATE ROLE app_write NOLOGIN; END IF;
          END$$;

          GRANT app_read TO "${DB_USER}";
          GRANT app_write TO "${DB_USER}";
          SQL

          cat > .github/echo_db/postgres/02_schema_grants.sql <<'SQL'
          -- 기본 스키마 소유자 지정
          ALTER SCHEMA public OWNER TO "${DB_USER}";

          -- 추가 스키마(선택) — 값이 있으면 수동 적용 권장:
          -- CREATE SCHEMA IF NOT EXISTS "${EXTRA_SCHEMA}" AUTHORIZATION "${DB_USER}";

          -- 기본 권한 템플릿
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO app_read;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT,INSERT,UPDATE,DELETE ON TABLES TO app_write;
          SQL

          cat > .github/echo_db/postgres/03_model_strict.sql <<'SQL'
          -- strict: 테이블 개별 권한
          CREATE TABLE IF NOT EXISTS public.process_instance(
            id BIGSERIAL PRIMARY KEY,
            status TEXT NOT NULL,
            assignee TEXT,
            created_at TIMESTAMPTZ DEFAULT now()
          );
          REVOKE ALL ON public.process_instance FROM PUBLIC;
          GRANT SELECT ON public.process_instance TO app_read;
          GRANT SELECT,INSERT,UPDATE,DELETE ON public.process_instance TO app_write;
          SQL

          cat > .github/echo_db/postgres/03_model_basic.sql <<'SQL'
          -- basic: 스키마 단위 일괄 권한
          GRANT USAGE ON SCHEMA public TO app_read, app_write;
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;
          GRANT SELECT,INSERT,UPDATE,DELETE ON ALL TABLES IN SCHEMA public TO app_write;
          SQL

      # 4) 권한 파일 — MySQL (템플릿; envsubst로 치환 적용)
      - name: Generate MySQL SQL (create/user/grants)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/mysql/00_create_db.sql <<'SQL'
          CREATE DATABASE IF NOT EXISTS `${DB_NAME}` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
          SQL

          cat > .github/echo_db/mysql/01_user.sql <<'SQL'
          CREATE USER IF NOT EXISTS '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASSWORD}';
          GRANT USAGE ON *.* TO '${DB_USER}'@'%';
          SQL

          cat > .github/echo_db/mysql/02_grants_basic.sql <<'SQL'
          GRANT SELECT ON `${DB_NAME}`.* TO '${DB_USER}'@'%';
          GRANT INSERT, UPDATE, DELETE ON `${DB_NAME}`.* TO '${DB_USER}'@'%';
          FLUSH PRIVILEGES;
          SQL

          cat > .github/echo_db/mysql/02_grants_strict.sql <<'SQL'
          -- strict: 테이블 생성 후 테이블 단위 권한
          USE `${DB_NAME}`;
          CREATE TABLE IF NOT EXISTS process_instance(
            id BIGINT PRIMARY KEY AUTO_INCREMENT,
            status VARCHAR(64) NOT NULL,
            assignee VARCHAR(128),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${DB_USER}'@'%';
          GRANT SELECT ON `${DB_NAME}`.process_instance TO '${DB_USER}'@'%';
          GRANT INSERT,UPDATE,DELETE ON `${DB_NAME}`.process_instance TO '${DB_USER}'@'%';
          FLUSH PRIVILEGES;
          SQL

      # 5) 권한 파일 — MSSQL (생성만; 적용은 별도)
      - name: Generate MSSQL SQL (create/login/grants) - files only
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/mssql/00_create_db.sql <<'SQL'
          IF DB_ID(N'${DB_NAME}') IS NULL
            CREATE DATABASE [${DB_NAME}];
          GO
          SQL

          cat > .github/echo_db/mssql/01_user.sql <<'SQL'
          USE [${DB_NAME}];
          IF NOT EXISTS (SELECT 1 FROM sys.sql_logins WHERE name = N'${DB_USER}')
            CREATE LOGIN [${DB_USER}] WITH PASSWORD=N'${DB_PASSWORD}', CHECK_POLICY=ON;
          IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N'${DB_USER}')
            CREATE USER [${DB_USER}] FOR LOGIN [${DB_USER}];
          SQL

          cat > .github/echo_db/mssql/02_grants_basic.sql <<'SQL'
          USE [${DB_NAME}];
          EXEC sp_addrolemember N'db_datareader', N'${DB_USER}';
          EXEC sp_addrolemember N'db_datawriter', N'${DB_USER}';
          SQL

          cat > .github/echo_db/mssql/02_grants_strict.sql <<'SQL'
          USE [${DB_NAME}];
          IF OBJECT_ID('dbo.process_instance','U') IS NULL
            CREATE TABLE dbo.process_instance(
              id BIGINT IDENTITY(1,1) PRIMARY KEY,
              status NVARCHAR(64) NOT NULL,
              assignee NVARCHAR(128),
              created_at DATETIME2 DEFAULT SYSUTCDATETIME()
            );
          REVOKE SELECT, INSERT, UPDATE, DELETE ON dbo.process_instance FROM [${DB_USER}];
          GRANT SELECT ON dbo.process_instance TO [${DB_USER}];
          GRANT INSERT, UPDATE, DELETE ON dbo.process_instance TO [${DB_USER}];
          SQL

      # 6) (선택) DB 컨테이너 기동 — PostgreSQL
      - name: Start PostgreSQL container (conditional)
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'postgres' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          docker run -d --name pg -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:16
          # 대기
          for i in {1..30}; do
            if docker exec pg pg_isready -U postgres >/dev/null 2>&1; then break; fi
            sleep 2
          done
          docker exec pg pg_isready -U postgres

      # 7) (선택) DB 컨테이너 기동 — MySQL
      - name: Start MySQL container (conditional)
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'mysql' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:8
          # 대기
          for i in {1..40}; do
            if docker exec mysqldb mysqladmin ping -proot --silent >/dev/null 2>&1; then break; fi
            sleep 3
          done
          docker exec mysqldb mysqladmin ping -proot --silent

      # 8) 실제 적용 (PostgreSQL)
      - name: Apply SQL (PostgreSQL)
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'postgres' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update && sudo apt-get install -y postgresql-client gettext-base

          export PGPASSWORD=postgres

          # DB 없으면 생성
          if ! psql -h 127.0.0.1 -U postgres -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1; then
            psql -h 127.0.0.1 -U postgres -d postgres -c "CREATE DATABASE \"${DB_NAME}\""
          fi

          # 역할/권한 적용 (템플릿 -> envsubst -> psql)
          envsubst < .github/echo_db/postgres/01_roles.sql \
            | psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1

          envsubst < .github/echo_db/postgres/02_schema_grants.sql \
            | psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1

          if [ "${GRANT_MODEL}" = "strict" ]; then
            psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1 -f .github/echo_db/postgres/03_model_strict.sql
          else
            psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1 -f .github/echo_db/postgres/03_model_basic.sql
          fi

      # 9) 실제 적용 (MySQL)
      - name: Apply SQL (MySQL)
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'mysql' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update && sudo apt-get install -y mysql-client gettext-base

          envsubst < .github/echo_db/mysql/00_create_db.sql \
            | mysql -h 127.0.0.1 -P 3306 -uroot -proot

          envsubst < .github/echo_db/mysql/01_user.sql \
            | mysql -h 127.0.0.1 -P 3306 -uroot -proot

          if [ "${GRANT_MODEL}" = "strict" ]; then
            envsubst < .github/echo_db/mysql/02_grants_strict.sql \
              | mysql -h 127.0.0.1 -P 3306 -uroot -proot
          else
            envsubst < .github/echo_db/mysql/02_grants_basic.sql \
              | mysql -h 127.0.0.1 -P 3306 -uroot -proot
          fi

      # 10) 산출물 업로드
      - name: Upload artifacts
        if: ${{ env.CREATE_ARTIFACTS == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: db-fullops-artifacts
          path: |
            .github/echo_db/**
            .github/echo_products/**
