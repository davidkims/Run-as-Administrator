name: "🔐 AWS KeyOps (Auth-Auto: OIDC → Static → B64 Session) + Encrypted Download"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "작업 유형"
        type: choice
        required: true
        default: "create"
        options: ["create", "rotate", "show", "revoke"]
      iam_user:
        description: "대상 IAM User 이름"
        required: true
        default: "ci-bot"
      encrypt_mode:
        description: "다운로드 암호화 모드"
        type: choice
        required: true
        default: "pgp"
        options: ["pgp", "password", "none"]
      pgp_public_key:
        description: "(선택) PGP 공개키(ASCII armor)"
        required: false
        default: ""
      download_password:
        description: "(선택) 비밀번호 (password 모드)"
        required: false
        default: ""
      create_inactive:
        type: boolean
        default: false
      rotate_deactivate_old:
        type: boolean
        default: true
      rotate_delete_old:
        type: boolean
        default: false
      aws_keys_b64:
        description: "(선택) Base64(AccessKeyId:SecretAccessKey:SessionToken) — 세션키 1회성 입력"
        required: false
        default: ""
      artifact_retention_days:
        description: "아티팩트 보관일"
        required: true
        default: "3"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }} # OIDC 권장
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}    # (비권장) 정적/임시 키
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  keyops:
    runs-on: ubuntu-latest
    name: "KeyOps (Auth Auto-Detect)"
    steps:
      - uses: actions/checkout@v4

      - name: Tooling
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq gnupg zip curl
          python3 -m pip install --upgrade --user awscli >/dev/null 2>&1 || true
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # OIDC 토큰 진단(요약에 표시)
      - name: Pull GitHub OIDC token (diagnostic)
        id: oidc-diag
        env:
          OIDC_AUD: "sts.amazonaws.com"
        run: |
          set -euo pipefail
          TOKEN="$(curl -sSL -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${OIDC_AUD}" | jq -r '.value')"
          if [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
            H="$(echo "$TOKEN" | cut -d. -f1 | base64 -d 2>/dev/null || true)"
            C="$(echo "$TOKEN" | cut -d. -f2 | base64 -d 2>/dev/null || true)"
            echo "### OIDC Diagnostics" >> $GITHUB_STEP_SUMMARY
            echo "- header: \`$(echo "$H" | tr -d '\n' | head -c 180)...\`" >> $GITHUB_STEP_SUMMARY
            echo "- claims(sub subset): \`$(echo "$C" | jq -c '{iss,sub,repository,ref,event_name,actor,workflow} // .')\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi

      # 1) OIDC (권장)
      - name: Configure AWS via OIDC (preferred)
        id: aws-oidc
        if: env.AWS_ROLE_TO_ASSUME != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # 2) 정적/임시 키(Secrets)
      - name: Configure via static creds (fallback)
        id: aws-static
        if: steps.aws-oidc.outcome == 'skipped' && env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != ''
        run: |
          echo "Using static AWS credentials (fallback)."
          test -n "${AWS_REGION:-}" || echo "AWS_REGION=us-east-1" >> $GITHUB_ENV

      # 3) 런타임 입력 B64 세션키
      - name: Configure via runtime B64 session keys (second fallback)
        id: aws-b64
        if: steps.aws-oidc.outcome == 'skipped' && steps.aws-static.outcome == 'skipped' && inputs.aws_keys_b64 != ''
        env:
          B64: ${{ inputs.aws_keys_b64 }}
        run: |
          set -euo pipefail
          DEC="$(printf '%s' "$B64" | base64 -d)"
          AKID="$(printf '%s' "$DEC" | cut -d: -f1)"
          SKEY="$(printf '%s' "$DEC" | cut -d: -f2)"
          STOK="$(printf '%s' "$DEC" | cut -d: -f3-)"
          test -n "$AKID" && test -n "$SKEY" && test -n "$STOK" || { echo "::error::Invalid aws_keys_b64"; exit 1; }
          {
            echo "AWS_ACCESS_KEY_ID=$AKID"
            echo "AWS_SECRET_ACCESS_KEY=$SKEY"
            echo "AWS_SESSION_TOKEN=$STOK"
            echo "AWS_REGION=${AWS_REGION:-us-east-1}"
          } >> $GITHUB_ENV
          echo "::add-mask::$AKID"; echo "::add-mask::$SKEY"; echo "::add-mask::$STOK"
          echo "Configured from runtime B64 session keys."

      - name: Verify AWS auth (or explain fix)
        id: verify-auth
        run: |
          set -euo pipefail
          if aws sts get-caller-identity --output json >/dev/null 2>&1; then
            aws sts get-caller-identity --output json | tee auth_identity.json
            echo "### ✅ AWS Auth OK" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat auth_identity.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`"
          else
            echo "### ❌ AWS Auth NOT configured" >> $GITHUB_STEP_SUMMARY
            echo "- Set repo secret **AWS_ROLE_TO_ASSUME** (OIDC) *or* **AWS_ACCESS_KEY_ID/SECRET_ACCESS_KEY** *or* input **aws_keys_b64**." >> $GITHUB_STEP_SUMMARY
            echo "- Trust policy example and minimal permissions are in the previous message or docs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Guardrails (prevent root-user ops)
        id: guard
        run: |
          set -euo pipefail
          CURR_ARN="$(aws sts get-caller-identity --query Arn --output text)"
          if echo "$CURR_ARN" | grep -qE ':root$'; then
            echo "::error::Refusing to manage access keys for root account."
            exit 1
          fi
          echo "caller_arn=$CURR_ARN" >> $GITHUB_OUTPUT

      - name: Ensure IAM User
        id: user
        run: |
          set -euo pipefail
          USER="${{ inputs.iam_user }}"
          aws iam get-user --user-name "$USER" >/dev/null 2>&1 || aws iam create-user --user-name "$USER" >/dev/null
          echo "name=$USER" >> $GITHUB_OUTPUT

      - name: Execute Key Action
        id: keyop
        env:
          ACTION: ${{ inputs.action }}
          USERNAME: ${{ steps.user.outputs.name }}
          CREATE_INACTIVE: ${{ inputs.create_inactive }}
          ROTATE_DEACTIVATE_OLD: ${{ inputs.rotate_deactivate_old }}
          ROTATE_DELETE_OLD: ${{ inputs.rotate_delete_old }}
        run: |
          set -euo pipefail
          mkdir -p out
          action="${ACTION}"
          user="${USERNAME}"
          list_keys() { aws iam list-access-keys --user-name "$user" --query 'AccessKeyMetadata' --output json; }
          case "$action" in
            show)
              list_keys > out/keys.json
              ;;
            create)
              RES="$(aws iam create-access-key --user-name "$user")"
              echo "$RES" | jq '.' > out/new_key_raw.json
              AKID="$(echo "$RES" | jq -r '.AccessKey.AccessKeyId')"
              SECRET="$(echo "$RES" | jq -r '.AccessKey.SecretAccessKey')"
              echo "::add-mask::$AKID"; echo "::add-mask::$SECRET"
              STATUS="Active"
              if [ "${CREATE_INACTIVE}" = "true" ]; then
                aws iam update-access-key --user-name "$user" --access-key-id "$AKID" --status Inactive
                STATUS="Inactive"
              fi
              jq -n --arg user "$user" --arg access_key_id "$AKID" --arg secret_access_key "$SECRET" --arg status "$STATUS" --arg created "$(date -u +%FT%TZ)" \
                '{user:$user, access_key_id:$access_key_id, secret_access_key:$secret_access_key, status:$status, created:$created}' > out/keybundle.json
              ;;
            rotate)
              RES="$(aws iam create-access-key --user-name "$user")"
              echo "$RES" | jq '.' > out/rotate_new_raw.json
              NEW_AKID="$(echo "$RES" | jq -r '.AccessKey.AccessKeyId')"
              NEW_SECRET="$(echo "$RES" | jq -r '.AccessKey.SecretAccessKey')"
              echo "::add-mask::$NEW_AKID"; echo "::add-mask::$NEW_SECRET"
              OLD_META="$(aws iam list-access-keys --user-name "$user" --query 'AccessKeyMetadata' --output json)"
              echo "$OLD_META" > out/rotate_old_list.json
              OLD_AKID="$(echo "$OLD_META" | jq -r '.[0].AccessKeyId // empty')"
              if [ -n "$OLD_AKID" ]; then
                [ "${ROTATE_DEACTIVATE_OLD}" = "true" ] && aws iam update-access-key --user-name "$user" --access-key-id "$OLD_AKID" --status Inactive || true
                [ "${ROTATE_DELETE_OLD}" = "true" ] && aws iam delete-access-key --user-name "$user" --access-key-id "$OLD_AKID" || true
              fi
              jq -n --arg user "$user" --arg new_access_key_id "$NEW_AKID" --arg new_secret_access_key "$NEW_SECRET" --arg rotated_at "$(date -u +%FT%TZ)" --arg deactivated_old "${ROTATE_DEACTIVATE_OLD}" --arg deleted_old "${ROTATE_DELETE_OLD}" \
                '{user:$user,new_access_key_id:$new_access_key_id,new_secret_access_key:$new_secret_access_key,rotated_at:$rotated_at,deactivated_old:$deactivated_old,deleted_old:$deleted_old}' > out/keybundle.json
              ;;
            revoke)
              META="$(aws iam list-access-keys --user-name "$user" --query 'AccessKeyMetadata' --output json)"
              echo "$META" > out/revoke_before.json
              for id in $(echo "$META" | jq -r '.[].AccessKeyId'); do
                aws iam update-access-key --user-name "$user" --access-key-id "$id" --status Inactive || true
                aws iam delete-access-key --user-name "$user" --access-key-id "$id" || true
              done
              list_keys > out/revoke_after.json
              jq -n --arg user "$user" --arg revoked_at "$(date -u +%FT%TZ)" '{user:$user,revoked_at:$revoked_at}' > out/keybundle.json
              ;;
            *) echo "::error::Unknown action: $action"; exit 1 ;;
          esac

      - name: Encrypt output
        id: pack
        env:
          MODE: ${{ inputs.encrypt_mode }}
          PGP_KEY: ${{ inputs.pgp_public_key }}
          PASS_IN: ${{ inputs.download_password }}
        run: |
          set -euo pipefail
          cd out
          FILES=(*.json)
          ARCH="aws-keybundle-$(date -u +%Y%m%dT%H%M%SZ).zip"
          zip -9 "$ARCH" "${FILES[@]}" >/dev/null
          if [ "$MODE" = "pgp" ]; then
            echo "$PGP_KEY" > pub.asc
            gpg --batch --import pub.asc
            RECIP="$(gpg --with-colons --list-keys | awk -F: '/^pub/ {print $5; exit}')"
            [ -z "$RECIP" ] && { echo "::error::Invalid PGP public key"; exit 1; }
            gpg --batch --yes --trust-model always -r "$RECIP" -o "$ARCH.gpg" --encrypt "$ARCH"
            rm -f "$ARCH"
            echo "artifact=$ARCH.gpg" >> $GITHUB_OUTPUT
          elif [ "$MODE" = "password" ]; then
            PASS="$PASS_IN"; if [ -z "$PASS" ]; then PASS="$(openssl rand -base64 24)"; fi
            echo "::add-mask::$PASS"
            echo "### 🔑 Download Password\n\`\`\`\n$PASS\n\`\`\`" >> $GITHUB_STEP_SUMMARY
            openssl enc -aes-256-cbc -pbkdf2 -iter 200000 -salt -in "$ARCH" -out "$ARCH.enc" -k "$PASS"
            rm -f "$ARCH"
            echo "artifact=$ARCH.enc" >> $GITHUB_OUTPUT
          else
            echo "artifact=$ARCH" >> $GITHUB_OUTPUT
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: aws-keys-${{ github.run_id }}
          path: out/${{ steps.pack.outputs.artifact }}
          if-no-files-found: error
          retention-days: ${{ inputs.artifact_retention_days }}

      - name: Summary
        run: |
          echo "## ✅ AWS KeyOps Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Action: ${{ inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- IAM User: ${{ inputs.iam_user }}" >> $GITHUB_STEP_SUMMARY
          echo "- Auth Path: ${{ steps.aws-oidc.outcome != 'skipped' && 'OIDC' || (steps.aws-static.outcome != 'skipped' && 'Static' || (steps.aws-b64.outcome != 'skipped' && 'B64 Session' || 'UNKNOWN')) }}" >> $GITHUB_STEP_SUMMARY
          echo "- Artifact: aws-keys-${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
