name: "🧱 WAS FS/Dir + Memory Expansion (Loopback+Swap+JVM)"

on:
  workflow_dispatch:
    inputs:
      fs_size_gb:
        description: "루프백 디스크 크기(GB)"
        required: true
        default: "10"
      mount_point:
        description: "마운트 지점"
        required: true
        default: "/mnt/was_data"
      fs_label:
        description: "파일시스템 라벨"
        required: true
        default: "WASDATA"
      dir_list:
        description: "생성할 디렉토리(콤마 구분)"
        required: true
        default: "logs,temp,uploads,cache,sessions,backups,conf,static,assets"
      swap_size_gb:
        description: "추가 SWAP 크기(GB, 0이면 생략)"
        required: true
        default: "4"
      app_type:
        description: "WAS 타입"
        type: choice
        required: true
        default: "spring-boot"
        options: ["spring-boot","tomcat"]
      jvm_xms:
        description: "JVM Xms (예: 1024m)"
        required: true
        default: "1024m"
      jvm_xmx:
        description: "JVM Xmx (예: 2048m)"
        required: true
        default: "2048m"
      app_jar_path:
        description: "[spring-boot] JAR 경로 (예: target/app.jar)"
        required: false
        default: "target/app.jar"
      tomcat_base:
        description: "[tomcat] TОМCAT_BASE 경로 (예: /opt/tomcat)"
        required: false
        default: "/opt/tomcat"
      commit_changes:
        description: "에코 산출물 커밋/푸시 (true/false)"
        required: true
        default: "false"

permissions:
  contents: write

jobs:
  was-expand:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          set -Eeuo pipefail
          echo "[INFO] Kernel: $(uname -a)"
          echo "[INFO] Disk (df -h):"
          df -h
          echo "[INFO] Memory (free -h):"
          free -h
          echo "[INFO] Block devices (lsblk):"
          lsblk || true

      - name: Reclaim disk space (optional)
        run: |
          set -Eeuo pipefail
          echo "[INFO] Reclaiming disk... (docker prune, apt cache clean)"
          docker system prune -af || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true
          sudo apt-get clean || true
          df -h

      - name: Create loopback ext4 volume and mount
        id: loopfs
        run: |
          set -Eeuo pipefail
          MP="${{ github.event.inputs.mount_point }}"
          SIZE_GB="${{ github.event.inputs.fs_size_gb }}"
          LABEL="${{ github.event.inputs.fs_label }}"
          IMG="wasdata.img"

          echo "[INFO] Creating mount point: ${MP}"
          sudo mkdir -p "${MP}"

          echo "[INFO] Allocating loopback file (${SIZE_GB}G) -> ${IMG}"
          # fallocate is fast; fallback to dd if needed
          if ! fallocate -l "${SIZE_GB}G" "${IMG}"; then
            echo "[WARN] fallocate failed, using dd (this can take time)"
            dd if=/dev/zero of="${IMG}" bs=1G count="${SIZE_GB}" status=progress
          fi

          echo "[INFO] Formatting ext4 with label ${LABEL}"
          sudo mkfs.ext4 -F -L "${LABEL}" "${IMG}"

          echo "[INFO] Mounting to ${MP}"
          sudo mount -o loop "${IMG}" "${MP}"

          echo "[INFO] Mounted:"
          df -h "${MP}"

          echo "image_path=${IMG}" >> "$GITHUB_OUTPUT"

      - name: Create directories and set permissions
        run: |
          set -Eeuo pipefail
          MP="${{ github.event.inputs.mount_point }}"
          IFS=',' read -r -a DIRS <<< "${{ github.event.inputs.dir_list }}"
          echo "[INFO] Creating directories under ${MP}"
          for d in "${DIRS[@]}"; do
            d_trim="$(echo "$d" | xargs)"
            [ -z "$d_trim" ] && continue
            sudo mkdir -p "${MP}/${d_trim}"
            sudo chmod 2775 "${MP}/${d_trim}"
          done
          echo "[INFO] Directory tree sample:"
          sudo find "${MP}" -maxdepth 2 -type d | sort | sed "s#${MP}#<MP>#"

      - name: Configure SWAP (optional)
        if: ${{ github.event.inputs.swap_size_gb != '0' && github.event.inputs.swap_size_gb != '' }}
        run: |
          set -Eeuo pipefail
          SWAP_GB="${{ github.event.inputs.swap_size_gb }}"
          SWAPF="swapfile_${SWAP_GB}G"
          echo "[INFO] Creating ${SWAP_GB}G swap file..."
          sudo fallocate -l "${SWAP_GB}G" "/${SWAPF}" || sudo dd if=/dev/zero of="/${SWAPF}" bs=1G count="${SWAP_GB}" status=progress
          sudo chmod 600 "/${SWAPF}"
          sudo mkswap "/${SWAPF}"
          sudo swapon "/${SWAPF}"
          echo "[INFO] SWAP enabled:"
          swapon --show
          free -h

      - name: Write JVM memory settings
        id: jvm
        run: |
          set -Eeuo pipefail
          XMS="${{ github.event.inputs.jvm_xms }}"
          XMX="${{ github.event.inputs.jvm_xmx }}"
          APP="${{ github.event.inputs.app_type }}"

          echo "[INFO] Writing JVM opts for ${APP} (Xms=${XMS}, Xmx=${XMX})"
          echo "JAVA_TOOL_OPTIONS=\"-Xms${XMS} -Xmx${XMX} -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${{ github.event.inputs.mount_point }}/heapdump.hprof\"" > .java-memory.env
          cat .java-memory.env

          if [ "${APP}" = "tomcat" ]; then
            echo 'CATALINA_OPTS="${JAVA_TOOL_OPTIONS} ${CATALINA_OPTS}"' > .tomcat-opts.env
            cat .tomcat-opts.env
          fi

      - name: Sample run (Spring Boot or Tomcat)
        if: ${{ always() }}
        run: |
          set -Eeuo pipefail
          APP="${{ github.event.inputs.app_type }}"
          MP="${{ github.event.inputs.mount_point }}"
          source .java-memory.env

          if [ "${APP}" = "spring-boot" ]; then
            JAR="${{ github.event.inputs.app_jar_path }}"
            if [ -f "${JAR}" ]; then
              echo "[INFO] Running Spring Boot: ${JAR}"
              nohup bash -c "JAVA_TOOL_OPTIONS='${JAVA_TOOL_OPTIONS}' java -jar ${JAR} --logging.file.name=${MP}/logs/app.log --spring.servlet.multipart.location=${MP}/temp" >/tmp/sb.out 2>&1 &
              sleep 3
              echo "[INFO] Spring Boot launched (background)."
            else
              echo "[WARN] ${JAR} not found; skip launching."
            fi
          else
            TBASE="${{ github.event.inputs.tomcat_base }}"
            if [ -x "${TBASE}/bin/catalina.sh" ]; then
              echo "[INFO] Running Tomcat at ${TBASE}"
              source .tomcat-opts.env || true
              nohup bash -c "export CATALINA_BASE='${TBASE}'; export CATALINA_OPTS='${CATALINA_OPTS}'; ${TBASE}/bin/catalina.sh start" >/tmp/tc.out 2>&1 &
              sleep 3
              echo "[INFO] Tomcat launched (background)."
              # 예시: 로그 디렉토리를 증설 볼륨으로 교체(심볼릭 링크)
              if [ -d "${TBASE}/logs" ]; then
                sudo mkdir -p "${MP}/tomcat-logs"
                sudo rm -rf "${TBASE}/logs"
                sudo ln -s "${MP}/tomcat-logs" "${TBASE}/logs"
                echo "[INFO] Tomcat logs redirected to ${MP}/tomcat-logs"
              fi
            else
              echo "[WARN] ${TBASE}/bin/catalina.sh not found; skip launching."
            fi
          fi

      - name: Generate reports
        run: |
          set -Eeuo pipefail
          MP="${{ github.event.inputs.mount_point }}"
          {
            echo "# WAS Expansion Report"
            echo
            echo "## Filesystem"
            echo "- Mount point: ${MP}"
            echo "- Label: ${{ github.event.inputs.fs_label }}"
            echo "- Size(GB): ${{ github.event.inputs.fs_size_gb }}"
            echo
            echo "### df -h ${MP}"
            df -h "${MP}" || true
            echo
            echo "## Directories"
            echo "${{ github.event.inputs.dir_list }}"
            echo
            echo "## Memory (free -h)"
            free -h || true
            echo
            echo "## Swap"
            swapon --show || true
            echo
            echo "## JVM"
            echo '```'
            cat .java-memory.env
            [ -f .tomcat-opts.env ] && cat .tomcat-opts.env || true
            echo '```'
          } > was_expansion_report.md

          # 마운트/트리 정보
          sudo bash -c "df -h > mount_report.txt"
          sudo bash -c "du -sh ${MP}/* 2>/dev/null | sort -h > usage_report.txt" || true
          sudo bash -c "find ${MP} -maxdepth 2 -type d | sort > dir_tree.txt" || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: was-expansion-artifacts
          path: |
            was_expansion_report.md
            mount_report.txt
            usage_report.txt
            dir_tree.txt
            ${{ steps.loopfs.outputs.image_path }}
            .java-memory.env
            .tomcat-opts.env

      - name: Commit & push reports (optional)
        if: ${{ github.event.inputs.commit_changes == 'true' }}
        run: |
          set -Eeuo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p .github/echo_was
          cp -f was_expansion_report.md .github/echo_was/
          cp -f mount_report.txt usage_report.txt dir_tree.txt .github/echo_was/ || true
          git add .github/echo_was || true
          git commit -m "[ECHO][WAS] FS/Dir/Mem expansion reports" || echo "[INFO] Nothing to commit"
          git push || echo "[WARN] Push skipped (no changes or missing permissions)"
