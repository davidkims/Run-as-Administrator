name: "🗄️ Workflow DB FullOps (권한/대량생성+적용+TLS템플릿+Oracle/Db2+Ansible/Makefile)"

on:
  workflow_dispatch:
    inputs:
      wf_product:
        description: "워크플로우 제품"
        type: choice
        required: true
        default: "airflow"
        options: ["airflow", "n8n", "ibm-baw", "sharepoint-wfm"]
      target_db:
        description: "대상 DB"
        type: choice
        required: true
        default: "postgres"
        options: ["postgres", "mysql", "mssql"]  # mssql: 실제 적용 가능
      db_name:
        description: "DB 이름"
        required: true
        default: "appdb"
      db_user:
        description: "DB 접속 사용자"
        required: true
        default: "appuser"
      db_password:
        description: "DB 접속 비밀번호"
        required: true
        default: "StrongPw123!"
      extra_schema:
        description: "추가 스키마(없으면 빈칸)"
        required: false
        default: ""
      grant_model:
        description: "권한 모델"
        type: choice
        required: true
        default: "strict"
        options: ["strict", "basic"]
      enable_tls:
        description: "TLS 가이드/템플릿 포함"
        type: choice
        required: true
        default: "true"
        options: ["true", "false"]
      create_artifacts:
        description: "생성 산출물(권한/대량/샘플/Ansible/Makefile) 업로드"
        type: choice
        required: true
        default: "true"
        options: ["true", "false"]
      run_apply:
        description: "DB 컨테이너 기동 후 SQL 실제 적용(지원: postgres/mysql/mssql)"
        type: choice
        required: true
        default: "false"
        options: ["true", "false"]

permissions:
  contents: write

jobs:
  db-fullops:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- 시스템 업그레이드 (Upgrade) ---
      - name: System upgrade (apt-get)
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
          sudo apt-get -y install gettext-base jq

      - name: Prepare variables & dirs
        id: prep
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "WF_PRODUCT=${{ github.event.inputs.wf_product }}" >> $GITHUB_ENV
          echo "TARGET_DB=${{ github.event.inputs.target_db }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ github.event.inputs.db_name }}" >> $GITHUB_ENV
          echo "DB_USER=${{ github.event.inputs.db_user }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ github.event.inputs.db_password }}" >> $GITHUB_ENV
          echo "EXTRA_SCHEMA=${{ github.event.inputs.extra_schema }}" >> $GITHUB_ENV
          echo "GRANT_MODEL=${{ github.event.inputs.grant_model }}" >> $GITHUB_ENV
          echo "ENABLE_TLS=${{ github.event.inputs.enable_tls }}" >> $GITHUB_ENV
          echo "CREATE_ARTIFACTS=${{ github.event.inputs.create_artifacts }}" >> $GITHUB_ENV
          echo "RUN_APPLY=${{ github.event.inputs.run_apply }}" >> $GITHUB_ENV
          # 내부 상수
          echo "MSSQL_SA_PASSWORD=Str0ng!Passw0rd" >> $GITHUB_ENV
          echo "BULK_COUNT=20" >> $GITHUB_ENV
          echo "BULK_PREFIX=${{ github.event.inputs.db_user }}_bulk" >> $GITHUB_ENV

          mkdir -p \
            .github/echo_db/{postgres,mysql,mssql,oracle,db2,common} \
            .github/echo_products/{airflow,n8n,ibm-baw,sharepoint-wfm} \
            .github/echo_ansible/group_vars \
            .github/echo_ansible/roles/db_tasks/templates

      # --- 공통 보안/TLS & 백업/DR & TLS 템플릿 ---
      - name: Generate common guides & TLS templates
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/common/SECURITY_TLS_GUIDE.md <<'MD'
          # 보안/TLS 요약
          - TLS 강제(서버 인증서), 최소권한(ROLE/GRANT), 비밀관리(Vault/KeyVault)
          - 감사 로깅/로테이션, 백업/DR(PITR/스냅샷), 정기 복구 리허설
          MD

          cat > .github/echo_db/common/BACKUP_DR_CHECKLIST.md <<'MD'
          # 백업/DR 체크리스트
          - 전체/증분, RPO/RTO, DR Runbook
          - 레플리카/클러스터(AG/Patroni/InnoDB Cluster 등) + 모니터링/알람
          MD

          # MSSQL TLS 클라이언트/서버 템플릿(가이드/예시)
          cat > .github/echo_db/mssql/TLS_CLIENT_CONNECTION_EXAMPLES.md <<'MD'
          ## MSSQL TLS 클라이언트 연결 예시
          - sqlcmd(OLE DB 18+): sqlcmd -S host,1433 -U user -P 'pw' -C -Q "SELECT 1"
          - JDBC: jdbc:sqlserver://host:1433;databaseName=appdb;encrypt=true;trustServerCertificate=false;hostNameInCertificate=CN=db.example.com;
          - ODBC: Encrypt=Yes;TrustServerCertificate=No;HostNameInCertificate=CN=db.example.com;
          > 실제 서버 TLS 활성화는 서버 인증서 설치/바인딩 필요(운영 정책에 맞게 적용).
          MD

          cat > .github/echo_db/mssql/TLS_SERVER_ENABLE_GUIDE.md <<'MD'
          # MSSQL TLS 서버 활성화 가이드(개요)
          1) 조직 CA 또는 공인CA 인증서(.pfx/.pem) 준비(서버 FQDN 포함)
          2) 윈도우/리눅스별 SQL Server에 인증서 등록/바인딩
          3) force encryption=on 정책/포트 방화벽 예외
          4) 클라이언트는 encrypt=true, trustServerCertificate=false, hostNameInCertificate 일치 필요
          * 컨테이너 환경은 커스텀 이미지와 mssql.conf/openssl 설치 후 바인딩 스크립트 사용
          MD

      # --- 제품별 샘플 ---
      - name: Generate product samples
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_products/airflow/ENV.sample <<'ENV'
          AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:pw@db:5432/airflow
          # airflow db init && airflow webserver
          ENV

          cat > .github/echo_products/n8n/ENV.sample <<'ENV'
          DB_TYPE=postgresdb
          DB_POSTGRESDB_HOST=db
          DB_POSTGRESDB_PORT=5432
          DB_POSTGRESDB_DATABASE=n8n
          DB_POSTGRESDB_USER=n8n
          DB_POSTGRESDB_PASSWORD=strong_pw
          ENV

          cat > .github/echo_products/ibm-baw/JDBC.sample.properties <<'PROPS'
          db.type=postgres
          db.url=jdbc:postgresql://db.example.com:5432/bawdb?sslmode=require
          db.user=baw
          db.password=*****
          # BAW: Process/PDW/Common DB 분리(단, Postgres는 Common DB 제외)
          PROPS

          cat > .github/echo_products/sharepoint-wfm/SETUP_CHECKLIST.md <<'MD'
          - SQL Server: TCP/IP(1433) 활성, SQL Browser 실행
          - Azure Service Fabric Runtime 설치
          - 팜 구성 계정/권한, 방화벽 예외
          MD

      # --- PostgreSQL 권한 템플릿 ---
      - name: Generate PostgreSQL SQL (roles/grants)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/postgres/01_roles.sql <<'SQL'
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='${DB_USER}') THEN
              EXECUTE format('CREATE ROLE %I LOGIN PASSWORD %L', '${DB_USER}', '${DB_PASSWORD}');
            END IF;
          END$$;

          DO $$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='app_read') THEN CREATE ROLE app_read NOLOGIN; END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='app_write') THEN CREATE ROLE app_write NOLOGIN; END IF;
          END$$;

          GRANT app_read TO "${DB_USER}";
          GRANT app_write TO "${DB_USER}";
          SQL

          cat > .github/echo_db/postgres/02_schema_grants.sql <<'SQL'
          ALTER SCHEMA public OWNER TO "${DB_USER}";
          -- CREATE SCHEMA IF NOT EXISTS "${EXTRA_SCHEMA}" AUTHORIZATION "${DB_USER}";
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO app_read;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT,INSERT,UPDATE,DELETE ON TABLES TO app_write;
          SQL

          cat > .github/echo_db/postgres/03_model_strict.sql <<'SQL'
          CREATE TABLE IF NOT EXISTS public.process_instance(
            id BIGSERIAL PRIMARY KEY,
            status TEXT NOT NULL,
            assignee TEXT,
            created_at TIMESTAMPTZ DEFAULT now()
          );
          REVOKE ALL ON public.process_instance FROM PUBLIC;
          GRANT SELECT ON public.process_instance TO app_read;
          GRANT SELECT,INSERT,UPDATE,DELETE ON public.process_instance TO app_write;
          SQL

          cat > .github/echo_db/postgres/03_model_basic.sql <<'SQL'
          GRANT USAGE ON SCHEMA public TO app_read, app_write;
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;
          GRANT SELECT,INSERT,UPDATE,DELETE ON ALL TABLES IN SCHEMA public TO app_write;
          SQL

      # --- MySQL 권한 + 대량 생성 템플릿 ---
      - name: Generate MySQL SQL (create/user/grants + bulk)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/mysql/00_create_db.sql <<'SQL'
          CREATE DATABASE IF NOT EXISTS `${DB_NAME}` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
          SQL

          cat > .github/echo_db/mysql/01_user.sql <<'SQL'
          CREATE USER IF NOT EXISTS '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASSWORD}';
          GRANT USAGE ON *.* TO '${DB_USER}'@'%';
          SQL

          cat > .github/echo_db/mysql/02_grants_basic.sql <<'SQL'
          GRANT SELECT ON `${DB_NAME}`.* TO '${DB_USER}'@'%';
          GRANT INSERT, UPDATE, DELETE ON `${DB_NAME}`.* TO '${DB_USER}'@'%';
          FLUSH PRIVILEGES;
          SQL

          cat > .github/echo_db/mysql/02_grants_strict.sql <<'SQL'
          USE `${DB_NAME}`;
          CREATE TABLE IF NOT EXISTS process_instance(
            id BIGINT PRIMARY KEY AUTO_INCREMENT,
            status VARCHAR(64) NOT NULL,
            assignee VARCHAR(128),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${DB_USER}'@'%';
          GRANT SELECT ON `${DB_NAME}`.process_instance TO '${DB_USER}'@'%';
          GRANT INSERT,UPDATE,DELETE ON `${DB_NAME}`.process_instance TO '${DB_USER}'@'%';
          FLUSH PRIVILEGES;
          SQL

          # 대량 생성(샘플: 사용자/DB N개)
          {
            echo "/* BULK CREATE (users/db) generated */"
            echo "SET @i := 1;"
            echo "WHILE @i <= ${BULK_COUNT} DO"
            echo "  SET @uname := '${BULK_PREFIX}' + LPAD(@i, 2, '0');"
            echo "  SET @db := CONCAT('${DB_NAME}_', LPAD(@i, 2, '0'));"
            echo "  SET @sql := CONCAT('CREATE DATABASE IF NOT EXISTS `', @db, '` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;');"
            echo "  PREPARE s FROM @sql; EXECUTE s; DEALLOCATE PREPARE s;"
            echo "  SET @sql := CONCAT('CREATE USER IF NOT EXISTS ''', @uname, '''@''%'' IDENTIFIED BY ''${DB_PASSWORD}'';');"
            echo "  PREPARE s FROM @sql; EXECUTE s; DEALLOCATE PREPARE s;"
            echo "  SET @sql := CONCAT('GRANT SELECT,INSERT,UPDATE,DELETE ON `', @db, '`.* TO ''', @uname, '''@''%''; FLUSH PRIVILEGES;');"
            echo "  PREPARE s FROM @sql; EXECUTE s; DEALLOCATE PREPARE s;"
            echo "  SET @i := @i + 1;"
            echo "END WHILE;"
          } > .github/echo_db/mysql/99_bulk.sql

      # --- MSSQL 권한 + 전용 롤 + 대량 생성 템플릿 + TLS 예시 ---
      - name: Generate MSSQL SQL (roles/grants + bulk + TLS conn templates)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github/echo_db/mssql/00_create_db.sql <<'SQL'
          IF DB_ID(N'${DB_NAME}') IS NULL
            CREATE DATABASE [${DB_NAME}];
          GO
          SQL

          cat > .github/echo_db/mssql/01_roles.sql <<'SQL'
          USE [${DB_NAME}];
          IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name=N'app_read') CREATE ROLE app_read AUTHORIZATION dbo;
          IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name=N'app_write') CREATE ROLE app_write AUTHORIZATION dbo;
          SQL

          cat > .github/echo_db/mssql/02_user_and_grants.sql <<'SQL'
          USE [${DB_NAME}];
          IF NOT EXISTS (SELECT 1 FROM sys.sql_logins WHERE name = N'${DB_USER}')
            CREATE LOGIN [${DB_USER}] WITH PASSWORD=N'${DB_PASSWORD}', CHECK_POLICY=ON;
          IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N'${DB_USER}')
            CREATE USER [${DB_USER}] FOR LOGIN [${DB_USER}];
          EXEC sp_addrolemember N'app_read',  N'${DB_USER}';
          EXEC sp_addrolemember N'app_write', N'${DB_USER}';
          SQL

          cat > .github/echo_db/mssql/03_model_strict.sql <<'SQL'
          USE [${DB_NAME}];
          IF OBJECT_ID('dbo.process_instance','U') IS NULL
            CREATE TABLE dbo.process_instance(
              id BIGINT IDENTITY(1,1) PRIMARY KEY,
              status NVARCHAR(64) NOT NULL,
              assignee NVARCHAR(128),
              created_at DATETIME2 DEFAULT SYSUTCDATETIME()
            );
          DENY SELECT, INSERT, UPDATE, DELETE ON dbo.process_instance TO PUBLIC;
          GRANT SELECT ON dbo.process_instance TO app_read;
          GRANT SELECT, INSERT, UPDATE, DELETE ON dbo.process_instance TO app_write;
          SQL

          cat > .github/echo_db/mssql/03_model_basic.sql <<'SQL'
          USE [${DB_NAME}];
          -- 스키마 단위 부여(샘플, 실제 운영 정책에 맞춤)
          EXEC sp_addrolemember N'app_read',  N'${DB_USER}';
          EXEC sp_addrolemember N'app_write', N'${DB_USER}';
          SQL

          # 대량 생성(샘플: 사용자/DB N개)
          cat > .github/echo_db/mssql/99_bulk.sql <<'SQL'
          DECLARE @i INT = 1;
          WHILE @i <= ${BULK_COUNT}
          BEGIN
            DECLARE @uname SYSNAME = CONCAT('${BULK_PREFIX}', RIGHT(CONCAT('0', @i), 2));
            DECLARE @db SYSNAME = CONCAT('${DB_NAME}_', RIGHT(CONCAT('0', @i), 2));
            IF DB_ID(@db) IS NULL
              EXEC('CREATE DATABASE [' + @db + '];');
            IF NOT EXISTS (SELECT 1 FROM sys.sql_logins WHERE name=@uname)
              EXEC('CREATE LOGIN [' + @uname + '] WITH PASSWORD=N''${DB_PASSWORD}'', CHECK_POLICY=ON;');
            DECLARE @sql NVARCHAR(MAX) = N'USE [' + @db + ']; ' +
              N'IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name=N''' + @uname + ''') CREATE USER [' + @uname + '] FOR LOGIN [' + @uname + ']; ' +
              N'IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name=N''app_read'')  CREATE ROLE app_read AUTHORIZATION dbo; ' +
              N'IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name=N''app_write'') CREATE ROLE app_write AUTHORIZATION dbo; ' +
              N'EXEC sp_addrolemember N''app_read'',  N''' + @uname + N'''; ' +
              N'EXEC sp_addrolemember N''app_write'', N''' + @uname + N'''; ';
            EXEC sp_executesql @sql;
            SET @i += 1;
          END
          GO
          SQL

          # TLS 연결 샘플(클라이언트) 추가
          cat > .github/echo_db/mssql/JDBC_TLS.sample <<'CONF'
          jdbc:sqlserver://db.example.com:1433;databaseName=${DB_NAME};encrypt=true;trustServerCertificate=false;hostNameInCertificate=CN=db.example.com;
          CONF

      # --- Oracle/Db2 스크립트(템플릿만) ---
      - name: Generate Oracle/Db2 templates (create user/roles/grants)
        shell: bash
        run: |
          set -Eeuo pipefail
          # Oracle (sqlplus용 템플릿)
          cat > .github/echo_db/oracle/create_user.sql <<'SQL'
          -- 접속: sqlplus sys/*****@//host:1521/ORCLPDB1 as sysdba
          CREATE USER ${DB_USER} IDENTIFIED BY "${DB_PASSWORD}"
            DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
          GRANT CREATE SESSION TO ${DB_USER};
          GRANT CONNECT, RESOURCE TO ${DB_USER};
          -- 최소 권한 정책에 맞춰 필요한 권한만 선별 부여 권장
          SQL

          cat > .github/echo_db/oracle/grants_basic.sql <<'SQL'
          -- 예: 스키마/오브젝트 권한 샘플
          GRANT SELECT, INSERT, UPDATE, DELETE ON ${DB_USER}.PROCESS_INSTANCE TO ${DB_USER};
          SQL

          # Db2 (CLP 템플릿)
          cat > .github/echo_db/db2/create_user.sql <<'SQL'
          -- db2 connect to ${DB_NAME} user db2inst1 using ******
          -- OS/LDAP 사용자 기반 DB2 권장. 예시는 DB 권한 부여 샘플.
          GRANT CONNECT ON DATABASE TO USER ${DB_USER};
          GRANT CREATETAB ON DATABASE TO USER ${DB_USER};
          SQL

      # --- Ansible 플레이북 & Makefile 동시 생성 ---
      - name: Generate Ansible playbook & Makefile
        shell: bash
        run: |
          set -Eeuo pipefail
          # inventory
          cat > .github/echo_ansible/inventory.ini <<'INV'
          [db_local]
          127.0.0.1 ansible_connection=local
          INV

          # vars
          cat > .github/echo_ansible/group_vars/all.yml <<'YML'
          db_name: ${DB_NAME}
          db_user: ${DB_USER}
          db_password: ${DB_PASSWORD}
          grant_model: ${GRANT_MODEL}
          target_db: ${TARGET_DB}
          YML

          # tasks
          cat > .github/echo_ansible/roles/db_tasks/tasks/main.yml <<'YML'
          ---
          - name: Show DB variables
            debug:
              msg:
                db_name: "{{ db_name }}"
                db_user: "{{ db_user }}"
                grant_model: "{{ grant_model }}"
                target_db: "{{ target_db }}"

          - name: Display note
            debug:
              msg: "이 역할은 로컬 생성된 SQL 템플릿을 배포/적용하는 골격 예시입니다."
          YML

          # site playbook
          cat > .github/echo_ansible/site.yml <<'YML'
          ---
          - hosts: db_local
            gather_facts: false
            roles:
              - db_tasks
          YML

          # Makefile
          cat > .github/echo_ansible/Makefile <<'MK'
          .PHONY: ansible-setup ansible-run show
          ansible-setup:
          	python3 -m pip install --upgrade pip
          	pip3 install ansible
          ansible-run:
          	ansible-playbook -i inventory.ini site.yml
          show:
          	@echo "DB: ${DB_NAME}, USER: ${DB_USER}, MODEL: ${GRANT_MODEL}, TARGET: ${TARGET_DB}"
          MK

      # --- 컨테이너 기동 (조건부) ---
      - name: Start PostgreSQL container
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'postgres' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          docker run -d --name pg -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:16
          for i in {1..40}; do
            if docker exec pg pg_isready -U postgres >/dev/null 2>&1; then break; fi
            sleep 3
          done
          docker exec pg pg_isready -U postgres

      - name: Start MySQL container
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'mysql' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:8
          for i in {1..60}; do
            if docker exec mysqldb mysqladmin ping -proot --silent >/dev/null 2>&1; then break; fi
            sleep 3
          done

      - name: Start MSSQL container
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'mssql' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          docker run -d --name mssql -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}" -p 1433:1433 mcr.microsoft.com/mssql/server:2022-latest
          for i in {1..80}; do
            if docker exec mssql /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "${MSSQL_SA_PASSWORD}" -C -Q "SELECT 1" >/dev/null 2>&1; then break; fi
            sleep 3
          done || true

      # --- 실제 적용 (PostgreSQL) ---
      - name: Apply SQL (PostgreSQL)
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'postgres' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update && sudo apt-get install -y postgresql-client gettext-base
          export PGPASSWORD=postgres
          if ! psql -h 127.0.0.1 -U postgres -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1; then
            psql -h 127.0.0.1 -U postgres -d postgres -c "CREATE DATABASE \"${DB_NAME}\""
          fi
          envsubst < .github/echo_db/postgres/01_roles.sql \
            | psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1
          envsubst < .github/echo_db/postgres/02_schema_grants.sql \
            | psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1
          if [ "${GRANT_MODEL}" = "strict" ]; then
            psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1 -f .github/echo_db/postgres/03_model_strict.sql
          else
            psql -h 127.0.0.1 -U postgres -d "${DB_NAME}" -v ON_ERROR_STOP=1 -f .github/echo_db/postgres/03_model_basic.sql
          fi

      # --- 실제 적용 (MySQL) + 대량 생성 ---
      - name: Apply SQL (MySQL) + Bulk
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'mysql' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update && sudo apt-get install -y mysql-client gettext-base
          # 연결 재시도
          for i in {1..20}; do if mysql -h 127.0.0.1 -P 3306 -uroot -proot -e "SELECT 1" >/dev/null 2>&1; then break; fi; sleep 3; done
          envsubst < .github/echo_db/mysql/00_create_db.sql | mysql -h 127.0.0.1 -P 3306 -uroot -proot
          envsubst < .github/echo_db/mysql/01_user.sql      | mysql -h 127.0.0.1 -P 3306 -uroot -proot
          if [ "${GRANT_MODEL}" = "strict" ]; then
            envsubst < .github/echo_db/mysql/02_grants_strict.sql | mysql -h 127.0.0.1 -P 3306 -uroot -proot
          else
            envsubst < .github/echo_db/mysql/02_grants_basic.sql  | mysql -h 127.0.0.1 -P 3306 -uroot -proot
          fi
          # 대량 생성
          envsubst < .github/echo_db/mysql/99_bulk.sql | mysql -h 127.0.0.1 -P 3306 -uroot -proot

      # --- 실제 적용 (MSSQL) + 대량 생성 ---
      - name: Apply SQL (MSSQL) + Bulk (sqlcmd)
        if: ${{ env.RUN_APPLY == 'true' && env.TARGET_DB == 'mssql' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo apt-get install -y curl ca-certificates apt-transport-https gnupg gettext-base
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
          export PATH="$PATH:/opt/mssql-tools18/bin"

          # 연결 재시도
          for i in {1..60}; do
            if sqlcmd -S 127.0.0.1 -U sa -P "${MSSQL_SA_PASSWORD}" -C -Q "SELECT 1" >/dev/null 2>&1; then break; fi
            sleep 3
          done

          # 적용 (GO 구분자 유지)
          envsubst < .github/echo_db/mssql/00_create_db.sql | sqlcmd -S 127.0.0.1 -U sa -P "${MSSQL_SA_PASSWORD}" -C
          envsubst < .github/echo_db/mssql/01_roles.sql     | sqlcmd -S 127.0.0.1 -U sa -P "${MSSQL_SA_PASSWORD}" -C
          envsubst < .github/echo_db/mssql/02_user_and_grants.sql | sqlcmd -S 127.0.0.1 -U sa -P "${MSSQL_SA_PASSWORD}" -C
          if [ "${GRANT_MODEL}" = "strict" ]; then
            envsubst < .github/echo_db/mssql/03_model_strict.sql | sqlcmd -S 127.0.0.1 -U sa -P "${MSSQL_SA_PASSWORD}" -C
          else
            envsubst < .github/echo_db/mssql/03_model_basic.sql  | sqlcmd -S 127.0.0.1 -U sa -P "${MSSQL_SA_PASSWORD}" -C
          fi
          envsubst < .github/echo_db/mssql/99_bulk.sql | sqlcmd -S 127.0.0.1 -U sa -P "${MSSQL_SA_PASSWORD}" -C

      # --- 아티팩트 업로드 ---
      - name: Upload artifacts
        if: ${{ env.CREATE_ARTIFACTS == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: db-fullops-artifacts
          path: |
            .github/echo_db/**
            .github/echo_products/**
            .github/echo_ansible/**
