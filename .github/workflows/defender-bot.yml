name: Dependabot Updates via Proxy + Full Scan & Servers (Echoe)

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:
    inputs:
      commit_changes:
        description: "자동 생성 파일 커밋/푸시 (true/false)"
        required: true
        default: "true"
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [main]
    paths:
      - '**/pom.xml'
      - '.github/**'
      - 'Dockerfile'
      - '**/Dockerfile'

permissions:
  contents: write
  pull-requests: write
  security-events: write

env:
  HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
  HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
  NO_PROXY: ${{ secrets.NO_PROXY }}
  PROXY_HOST: ${{ secrets.PROXY_HOST }}
  PROXY_PORT: ${{ secrets.PROXY_PORT }}

jobs:
  prepare-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Define echoe helper
        run: |
          mkdir -p dist/echo
          cat > /tmp/echo_helpers.sh <<'EOS'
          set -Eeuo pipefail
          TS(){ date -u +'%Y-%m-%dT%H:%M:%SZ'; }
          log(){ echo "[INFO  $(TS)] $*"; }
          warn(){ echo "[WARN  $(TS)] $*" >&2; }
          fail(){ echo "[ERROR $(TS)] $*" >&2; exit 1; }
          echoe(){ local CMD="$*"; echo "[ECHO  $(TS)] $CMD"; eval "$CMD"; }
          EOS
      - name: Create required files
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          echoe "mkdir -p .github dist/site dist/sql src/main/java/com/example"

          [ -f .gitignore ] || echoe "cat > .gitignore <<'EOF'
          target/
          dist/
          *.log
          .DS_Store
          EOF"

          [ -f .dockerignore ] || echoe "cat > .dockerignore <<'EOF'
          .git
          dist
          target
          *.log
          EOF"

          [ -f README.md ] || echoe "cat > README.md <<'EOF'
          # Auto-Initialized Repo (EchoOps)
          EOF"

          [ -f .github/dependabot.yml ] || echoe "cat > .github/dependabot.yml <<'EOF'
          version: 2
          updates:
            - package-ecosystem: maven
              directory: /
              schedule:
                interval: weekly
          EOF"

          [ -f pom.xml ] || echoe "cat > pom.xml <<'EOF'
          <project>
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>auto-sample</artifactId>
            <version>0.0.1</version>
          </project>
          EOF"

          [ -f src/main/java/com/example/App.java ] || echoe "cat > src/main/java/com/example/App.java <<'EOF'
          package com.example;
          public class App {
            public static void main(String[] args) {
              System.out.println(\"Hello from auto-sample!\");
            }
          }
          EOF"

          [ -f Dockerfile ] || echoe "cat > Dockerfile <<'EOF'
          FROM alpine:3.19
          RUN adduser -D appuser
          USER appuser
          CMD [\"sh\", \"-c\", \"echo Auto Docker image OK; sleep 5\"]
          EOF"

          echoe "cat > dist/site/index.html <<'EOF'
          <h1>Echo Test OK</h1>
          EOF"

          echoe "cat > dist/sql/init.sql <<'EOF'
          CREATE TABLE IF NOT EXISTS accounts(
            id INT PRIMARY KEY AUTO_INCREMENT,
            owner VARCHAR(64),
            balance DECIMAL(18,2),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          INSERT INTO accounts(owner, balance) VALUES ('alice', 1000.00), ('bob', 500.50);
          EOF"

  validate-pr:
    if: ${{ github.event_name == 'pull_request' && github.actor == 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '17'
      - name: Build Maven & Docker (echoe)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          echoe "mvn -B -V -e -DskipTests package"
          echoe "docker build -t myapp:latest ."

  security-scans:
    runs-on: ubuntu-latest
    needs: [validate-pr]
    steps:
      - uses: actions/checkout@v4
      - name: Install & run scans (echoe)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          echoe "mkdir -p dist/reports dist/sbom"
          echoe "curl -fsSL https://raw.githubusercontent.com/anchore/sbom-action/main/install.sh | bash -s -- -b /usr/local/bin v1.31.0"
          echoe "syft scan docker:myapp:latest -o spdx-json > dist/sbom/sbom-image.spdx.json"
          echoe "wget -qO- https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh"
          echoe "./bin/trivy fs --no-progress --format sarif --output dist/reports/trivy-fs.sarif ."

  servers:
    runs-on: ubuntu-latest
    needs: [security-scans]
    steps:
      - uses: actions/checkout@v4
      - name: Run nginx + MySQL (echoe)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          echoe "docker run -d --rm --name echo_nginx -p 8080:80 -v '${{ github.workspace }}/dist/site:/usr/share/nginx/html:ro' nginx:alpine"
          echoe "docker run -d --rm --name echo_mysql -e MYSQL_ROOT_PASSWORD=rootpass -e MYSQL_DATABASE=echo_db -p 3306:3306 mysql:8.0"
          echoe "sleep 10"
          echoe "docker exec -i echo_mysql sh -lc 'mysql -uroot -prootpass echo_db' < dist/sql/init.sql"
          echoe "docker exec -i echo_mysql sh -lc 'mysql -uroot -prootpass -e \"SELECT * FROM echo_db.accounts;\"' | tee dist/sql/select_accounts.txt"
          echoe "curl -sSf http://127.0.0.1:8080/ | head -n1"
          echoe "docker rm -f echo_nginx echo_mysql"
