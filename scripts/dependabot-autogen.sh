#!/usr/bin/env bash
set -euo pipefail

TARGET_ROOT=${1:-generated}

# Ensure a clean generation directory so repeated runs are consistent
rm -rf "$TARGET_ROOT"
mkdir -p "$TARGET_ROOT"

# Java standalone example
JAVA_SRC_DIR="$TARGET_ROOT/java/src/main/java/com/example/dependabot"
mkdir -p "$JAVA_SRC_DIR"
cat <<'JAVA' > "$JAVA_SRC_DIR/HelloDependabot.java"
package com.example.dependabot;

/**
 * Simple entry point used by the Dependabot automation workflow to prove
 * that Java source files can be generated programmatically.
 */
public final class HelloDependabot {
    private HelloDependabot() {
        // Prevent instantiation
    }

    public static void main(String[] args) {
        System.out.println("Hello from the Dependabot auto-generation workflow!");
    }
}
JAVA

# Maven project skeleton
MAVEN_PROJECT_DIR="$TARGET_ROOT/maven"
MAVEN_SRC_DIR="$MAVEN_PROJECT_DIR/src/main/java/com/example/dependabot"
mkdir -p "$MAVEN_SRC_DIR"
cat <<'POM' > "$MAVEN_PROJECT_DIR/pom.xml"
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>dependabot-automation</artifactId>
    <version>1.0.0</version>
    <name>Dependabot Automation Sample</name>
    <description>Auto-generated Maven project for Dependabot validation.</description>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <exec.mainClass>com.example.dependabot.AutomationApp</exec.mainClass>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.12</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <release>17</release>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.example.dependabot.AutomationApp</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
POM

cat <<'JAVA' > "$MAVEN_SRC_DIR/AutomationApp.java"
package com.example.dependabot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Simple application packaged by Maven to demonstrate Dependabot automation.
 */
public class AutomationApp {
    private static final Logger LOGGER = LoggerFactory.getLogger(AutomationApp.class);

    public static void main(String[] args) {
        LOGGER.info("Dependabot automation is ready to go!");
    }
}
JAVA

# Docker template
DOCKER_DIR="$TARGET_ROOT/docker"
mkdir -p "$DOCKER_DIR"
cat <<'DOCKER' > "$DOCKER_DIR/Dockerfile"
# syntax=docker/dockerfile:1
FROM eclipse-temurin:17-jre

LABEL maintainer="automation@example.com"

ARG JAR_FILE=dependabot-automation.jar
COPY ${JAR_FILE} /opt/app/app.jar

ENTRYPOINT ["java", "-jar", "/opt/app/app.jar"]
DOCKER

# Red Hat compatible Containerfile (using UBI image)
REDHAT_DIR="$TARGET_ROOT/redhat"
mkdir -p "$REDHAT_DIR"
cat <<'RHEL' > "$REDHAT_DIR/Containerfile"
# syntax=docker/dockerfile:1
FROM registry.access.redhat.com/ubi9/openjdk-17:1.17

LABEL maintainer="automation@example.com"

ARG JAR_FILE=dependabot-automation.jar
COPY ${JAR_FILE} /opt/app/app.jar

USER 185
WORKDIR /opt/app

ENTRYPOINT ["java", "-jar", "./app.jar"]
RHEL

# Helper metadata for repeatability
cat <<'INFO' > "$TARGET_ROOT/README.md"
# Generated Templates

This directory is auto-generated by the Dependabot automation workflow. It
contains sample Java, Maven, Docker, and Red Hat (Containerfile) assets that
can be recreated on demand. Remove this folder before committing manual
changes and allow the workflow to build a fresh copy.
INFO
